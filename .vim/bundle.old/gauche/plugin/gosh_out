
gosh> *** ERROR: unbound variable: 本書は、R5RS準拠のScheme処理系、Gaucheのリファレンスマニュアルです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Gaucheのバージョン0.8.13に対応します。
Stack Trace:
_______________________________________
gosh> 1
gosh> *** ERROR: unbound variable: はじめに
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 31: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: なお、本マニュアルの日本語版製作には、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 佐藤
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 誠
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 氏、山下
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 伸夫
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 氏の協力を頂きました。
Stack Trace:
_______________________________________
gosh> 1.1
gosh> *** ERROR: unbound variable: Gaucheの概要
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 41: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: に規定されている数多くのライブラリを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: サポートしています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Gaucheは、プログラマやシステム管理者がこなす日常の雑事を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 効率よくSchemeで書けるようにすることを目的として設計されています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 世の中には多くのSchemeの実装がありますが、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: それぞれの実装には長所と短所があります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Gaucheが長所とするべく重点を置いているのは次のようなポイントです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 立ち上りが速いこと
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Gaucheが想定している用途のひとつは、プロダクション環境でちょろっと
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |10行スクリプトをでっちあげて、それが非常に頻繁に呼ばれるようなケースです。|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: CGIスクリプトなどもそうです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Gaucheでは、言語のコアとスクリプトとして良く使いそうな機能に絞って
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 実行ファイルにコンパイルインし、使う分野が特定される機能は必要に応じて
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 読み込むようにしています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: マルチバイト文字列
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列が1バイトキャラクタのみを扱っていれば良かった時代は過ぎ去りました。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 現代のプログラミングシステムは、様々なエンコーディングによるマルチバイト文字／文字列を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 自然に扱える必要があります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Gaucheは内部的に文字列を全て、コンパイル時に選択したエンコーディングの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: マルチバイト文字列として扱います。後から付け足したライブラリレベルでの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: マルチバイト文字列のサポートよりも、一貫性がありロバストな文字列操作が可能になっています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 詳しくは*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: マルチバイト文字列::を参照してください。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: モジュラー開発
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Gaucheは名前空間を分離する単純なモジュールシステムを備えており、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 名前の衝突を心配せずに複数の開発者が並行して作業をすることができます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 統合されたオブジェクトシステム
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: CLOSライクなメタオブジェクトプロトコルを備えた強力なオブジェクトシステム
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が組み込んであります。STklosやGuileのオブジェクトシステムとかなり互換性があります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: システムインタフェース
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Schemeは計算機の詳細の多くを抽象化しますが、プログラムを書いていると、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: それらの高レベル層をバイパスして地下室に降りて作業しなければならないような時が
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: あります。GaucheはPOSIX.1システムコールのほとんどを組み込みでサポートします。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: また、ネットワーキングモジュールなど他のシステム関連モジュールは通常、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 高レベルの抽象的なインタフェースと低レベルのシステムコールに近いインタフェースを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 両方提供します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 強化された入出力
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 本物のアプリケーションはI/O無しでは成り立ちません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SchemeはI/Oをポートとして簡潔に抽象化していますが、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 標準のSchemeには最低限の操作しか定義されていません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Gaucheはポートオブジェクトを入出力のための統合された抽象化オブジェクトと考え、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: それを通して下位のI/Oシステム層にアクセスするユーティリティ関数を提供しています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 入出力::を参照して下さい。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 一方、Gaucheは所詮インタプリタですから、高速に大量の計算をこなしたり
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 巨大なデータセットを扱ったりするのは苦手です。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 但し、そのような場合でも、Gaucheを各コンポーネントをつなぐ「糊」言語として
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 使うことは可能です。例えば性能の要求の厳しい部分はネイティブコードにコンパイルする言語で
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 書いておき、セットアップにGaucheを使うといった方法があります。
Stack Trace:
_______________________________________
gosh> 1.2
gosh> *** ERROR: unbound variable: 表記について
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 185: unsupported #-syntax: #'
Stack Trace:
_______________________________________
gosh> で表す数字表記を認識します。
gosh> #<subr *>
gosh> *** ERROR: unbound variable: 手続き
Stack Trace:
_______________________________________
gosh> rationalize
gosh> 、
gosh> transcript-on
gosh> 、及び
gosh> transcript-off
gosh> はサポートされていません。
gosh> *** ERROR: unbound variable: GaucheをR6RS準拠にする予定は近い将来にはありませんが、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Gaucheはまた、以下のSRFIをサポートしています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-0
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,機能ベースの条件展開
"(stdin)":196:,機能ベースの条件展開

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: オートロードされるマクロとしてサポートされます。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 機能条件式::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-1
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,リストライブラリ
"(stdin)":200:,リストライブラリ

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: モジュール
Stack Trace:
_______________________________________
gosh> srfi-1
gosh> でサポートされます。*Note
gosh> *** ERROR: unbound variable: List
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: library::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-1の手続きのうちいくつかは組み込みになっています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-2
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,AND-LET*:
"(stdin)":204:,AND-LET*:

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 局所束縛をともなう
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: AND、ガード付
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: LET*
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 特殊フォーム
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 組み込みです。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 変数束縛::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-4
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,一様な数値ベクタ型
"(stdin)":207:,一様な数値ベクタ型

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: モジュール
Stack Trace:
_______________________________________
gosh> gauche.uvector
gosh> が
gosh> srfi-4
gosh> の上位互換手続きを提供します。
gosh> *** ERROR: unbound variable: 同モジュールにはSRFI-4の手続きに加え、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 算術演算やジェネリックなインタフェースが定義されています。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ユニフォームベクタ::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-5
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,シグネチャとrest引数に互換性のあるlet形式
"(stdin)":213:,シグネチャとrest引数に互換性のあるlet形式

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: モジュール
Stack Trace:
_______________________________________
gosh> srfi-5
gosh> でサポートされます。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: シグネチャとrest引数に互換性のあるlet形式::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-6
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,基本文字列ポート
"(stdin)":217:,基本文字列ポート

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-6の手続きは組み込みになっています。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列ポート::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-7
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,機能ベースプログラム設定言語
"(stdin)":220:,機能ベースプログラム設定言語

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: オートロードされるマクロとしてサポートされています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 機能ベースプログラム設定言語::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-8
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,receive:
"(stdin)":224:,receive:

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 多値束縛
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 構文
Stack Trace:
_______________________________________
gosh> receive
gosh> は組み込みになっています。*Note
gosh> *** ERROR: unbound variable: 変数束縛::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-9
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,レコード型の定義
"(stdin)":227:,レコード型の定義

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: モジュール
Stack Trace:
_______________________________________
gosh> srfi-9
gosh> でサポートされます。*Note
gosh> *** ERROR: unbound variable: レコード型::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-10
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Sharp-comma外部フォーム
"(stdin)":230:,Sharp-comma外部フォーム

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 組み込みです。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 読み込み時コンストラクタ::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-11
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,多値を受け取るための構文
"(stdin)":233:,多値を受け取るための構文

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: モジュール
Stack Trace:
_______________________________________
gosh> srfi-11
gosh> でサポートされます。*Note
gosh> *** ERROR: unbound variable: Let-values::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-13
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,文字列ライブラリ
"(stdin)":236:,文字列ライブラリ

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: モジュール
Stack Trace:
_______________________________________
gosh> srfi-13
gosh> でサポートされます。*Note
gosh> *** ERROR: unbound variable: 文字列ライブラリ::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-13の手続きのいくつかは組み込みになっています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-14
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,文字集合のライブラリ
"(stdin)":241:,文字集合のライブラリ

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字集合と基本的なSRFI-14手続きは組み込みになっています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字集合::参照。SRFI-14の完全なサポートはモジュール
Stack Trace:
_______________________________________
gosh> srfi-14
gosh> で提供されています。*Note
gosh> *** ERROR: unbound variable: 文字集合ライブラリ::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-16
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,可変長引数手続き構文
"(stdin)":246:,可変長引数手続き構文

Stack Trace:
_______________________________________
gosh> #<closure (make-dispatcher make-dispatcher)>
gosh> *** ERROR: unbound variable: 組み込みです。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 手続きを作る::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-17
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,一般化された
"(stdin)":249:,一般化された

Stack Trace:
_______________________________________
gosh> #<syntax set!>
gosh> *** ERROR: unbound variable: 組み込みです。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 代入::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-18
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,マルチスレッドのサポート
"(stdin)":252:,マルチスレッドのサポート

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: いくつかのSRFI-18の機能は組み込みであり、、残りのAPIは
Stack Trace:
_______________________________________
gosh> gauche.threads
gosh> モジュールで提供されます。*Note
gosh> *** ERROR: unbound variable: スレッド::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-19
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,時間データの型と手続き
"(stdin)":256:,時間データの型と手続き

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 時間のデータ型はGauche組み込みです
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 時間::参照
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-19の完全なサポートはモジュール
Stack Trace:
_______________________________________
gosh> srfi-19
gosh> で提供されています。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 時間のデータ型と手続き::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-22
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,UNIX
"(stdin)":261:,UNIX

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 上の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Scheme
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: スクリプトの実行
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: サポートされています。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Schemeスクリプトを書く::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-23
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,エラー報告機構
"(stdin)":264:,エラー報告機構

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 組み込みです。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 例外の通知::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-25
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,多次元配列のプリミティブ
"(stdin)":267:,多次元配列のプリミティブ

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: モジュール
Stack Trace:
_______________________________________
gosh> gauche.array
gosh> が、SRFI-25の上位互換と
gosh> *** ERROR: unbound variable: なっています。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 配列::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-26
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,カリー化をともなわないパラメータの特殊化記法
"(stdin)":271:,カリー化をともなわないパラメータの特殊化記法

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: オートロードされるマクロとして定義されています。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 手続きを作る::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-27
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,ランダムビットのソース
"(stdin)":275:,ランダムビットのソース

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: モジュール
Stack Trace:
_______________________________________
gosh> srfi-27
gosh> でサポートされます。*Note
gosh> *** ERROR: unbound variable: ランダムビットのソース::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-28
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,基本フォーマット文字列
"(stdin)":279:,基本フォーマット文字列

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Gauche組み込みの
Stack Trace:
_______________________________________
gosh> format
gosh> がSRFI-28のものの上位互換に
gosh> *** ERROR: unbound variable: なっています。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 出力::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-29
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,地域化
"(stdin)":283:,地域化

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: モジュール
Stack Trace:
_______________________________________
gosh> srfi-29
gosh> でサポートされます。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 地域化::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-30
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,ネストした複数行コメント
"(stdin)":286:,ネストした複数行コメント

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ネイティブのリーダでサポートされています。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 字句構造::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-31
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,再帰評価用の特殊フォーム
"(stdin)":289:,再帰評価用の特殊フォーム

Stack Trace:
_______________________________________
gosh> #<macro rec>
gosh> *** ERROR: unbound variable: オートロードされるマクロとして定義されています。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 変数束縛::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-34
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,プログラムの例外処理
"(stdin)":293:,プログラムの例外処理

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 組み込みです。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 例外::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 実装していて、それはsrfi-34と若干異なります。将来はsrfi-34に合わせるかもしれません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-35
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,コンディション
"(stdin)":298:,コンディション

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 組み込みです。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: コンディション::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-36
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,I/O
"(stdin)":301:,I/O

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: コンディション
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 部分的にサポートされています.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: コンディション::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-37
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,args-fold:
"(stdin)":304:,args-fold:

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: プログラム引数処理
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: モジュール
Stack Trace:
_______________________________________
gosh> srfi-37
gosh> でサポートされます。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: args-fold
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: プログラム引数処理::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-38
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,共有されるデータの外部表現
"(stdin)":308:,共有されるデータの外部表現

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 組み込みです。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: データの読み込み::と*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 出力::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-39
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,パラメータオブジェクト
"(stdin)":311:,パラメータオブジェクト

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: モジュール
Stack Trace:
_______________________________________
gosh> gauche.parameter
gosh> でサポートされます。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: パラメータ::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-40
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,ストリームライブラリ
"(stdin)":315:,ストリームライブラリ

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: モジュール
Stack Trace:
_______________________________________
gosh> util.stream
gosh> でサポートされています。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ストリームライブラリ::.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-42
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,先行評価的内包表記
"(stdin)":319:,先行評価的内包表記

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: モジュール
Stack Trace:
_______________________________________
gosh> srfi-42
gosh> でサポートされます。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Eager
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: comprehensions::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-43
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,ベクタライブラリ
"(stdin)":323:,ベクタライブラリ

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: モジュール
Stack Trace:
_______________________________________
gosh> srfi-43
gosh> でサポートされます。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Vector
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: library::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-45
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,反復的
"(stdin)":327:,反復的

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Lazy
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: アルゴリズムのための基本関数
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 組み込みです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 遅延評価::.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-55
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,requireの拡張
"(stdin)":330:,requireの拡張

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: オートロードマクロとしてサポートされます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Requiring
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: extensions::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-61
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,より汎用的な
"(stdin)":334:,より汎用的な

Stack Trace:
_______________________________________
gosh> cond
gosh> 節
gosh> *** ERROR: unbound variable: 組込みです。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 条件式::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-62
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,S式コメント
"(stdin)":337:,S式コメント

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ネイティブのリーダでサポートされています。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 字句構造::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-87
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,case節での
"(stdin)":340:,case節での

Stack Trace:
_______________________________________
gosh> =>
gosh> 組込みです。*Note
gosh> *** ERROR: unbound variable: 条件式::参照。
Stack Trace:
_______________________________________
gosh> 2.2
gosh> *** ERROR: unbound variable: マルチバイト文字列
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 1500: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: シンボル::も参照して下さい。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: _文字コードによる文字リテラル_
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字リテラルを文字コードにより表記することができます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Gauche内部コードを使う
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 1504: Unknown character name: #\xnn
Stack Trace:
_______________________________________
gosh> と、
gosh> *** ERROR: unbound variable: Unicodeを使う
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 1505: Unknown character name: #\unn
Stack Trace:
_______________________________________
gosh> という表記があります。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字::を参照して下さい。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |_拡張された#構文_|
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 1508: unsupported #-syntax: #'
Stack Trace:
_______________________________________
gosh> で始まる特殊構文がたくさん定義されています。
gosh> *** ERROR: unbound variable: 下の表を参照して下さい。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 以下の表はシャープ構文のリストです。
Stack Trace:
_______________________________________
gosh> ファイルの先頭でインタプリタを指定します。
gosh> *** ERROR: unbound variable: Scheme
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のローダはこの行を無視します。
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 1516: unsupported #-syntax: #"
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 1516: unsupported #-syntax: ##
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 1516: unsupported #-syntax: #$
Stack Trace:
_______________________________________
gosh> ,未使用。
gosh> *** READ-ERROR: Read error at "(stdin)":line 1517: unsupported #-syntax: #%
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 1517: unsupported #-syntax: #&
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 1517: unsupported #-syntax: #'
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 1519: unsupported #-syntax: #)
Stack Trace:
_______________________________________
gosh> 未使用。
gosh> *** READ-ERROR: Read error at "(stdin)":line 1520: unsupported #*-syntax: #*'
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 二重引用符がこれに続くときは、不完全な文字列を表します。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列::参照。
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 1522: unsupported #-syntax: #+
Stack Trace:
_______________________________________
gosh> 未使用。
gosh> *** READ-ERROR: Read error at "(stdin)":line 1523: bad #,-form: '(' should be followed, but got '
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-10
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: リーダ構築子構文を先導します。
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 1524: unsupported #-syntax: #-
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 1524: unsupported #-syntax: #.
Stack Trace:
_______________________________________
gosh> 未使用。
gosh> *** ERROR: bad charset spec in pattern: "'               リテラルの正規表現を先導します。*Note\n                   正規表現::参照。\n`#0' ... `#9'      [SRFI-38] 共有サブストラクチャの定義と参照。\n`#:'               未使用。\n`#;'               [SRFI-62]\n                   S式コメント。続くS式をひとつ読んで捨てます。\n`#<'               読み取り不可能オブジェクトを先導します。\n`#=', `#>'         未使用。\n`#?'               デバッグマクロを先導します。*Note\n                   デバッグ::参照。\n`#@'               未使用。\n`#a'               未使用。\n`#b'               [R5RS] 2進数接頭辞。\n`#c'               未使用。\n`#d'               [R5RS] 10進数接頭辞。\n`#e'               [R5RS] 正確数接頭辞。\n`#f'               [R5RS] 真理値の偽、あるいは       SRFI-4\n                   のユニフォームベクタを先導します。*Note\n                   ユニフォームベクタ::参照\n`#g', `#h'         未使用。\n`#i'               [R5RS] 不正確数接頭辞。\n`#j', `#k', `#l',  未使用。\n`#m', `#n'         \n`#o'               [R5RS] 8進数接頭辞。\n`#p', `#q', `#r'   未使用。\n`#s'               [SRFI-4] SRFI-4\n                   のユニフォームベクタを先導します。*Note\n                   ユニフォームベクタ::参照。\n`#t'               [R5RS] 真理値の真。\n`#u'               [SRFI-4] SRFI-4\n                   のユニフォームベクタを先導します。*Note\n                   ユニフォームベクタ::参照。\n`#v', `#w'         未使用。\n`#x'               [R5RS] 16進数接頭辞\n`#y', `#z'         未使用。\n`#['               リテラルの文字集合を先導します。*Note\n                   文字集合::参照\n`#\\'               [R5RS] リテラルの文字を先導します。*Note\n                   文字::参照。\n`#]', `#^', `#_'   未使用。\n`#`'               補間された文字列を先導します。*Note\n                   文字列の補間::参照。\n`#{'               未使用。\n`#|'               [SRFI-30]\n                   ブロックコメントを先導します。コメントは対応する\n                   '`|#'' で終ります。\n`#}', `#~'         未使用。\n\n4.2 リテラル {{{2\n============\n\n -- Special Form: quote datum\n     [R5RS] DATUMそれ自身を返します。\n          (quote x) => x\n          (quote (1 2 3)) => (1 2 3)\n\n -- Reader Syntax: `'DATUM'\n     [R5RS] `(quote datum)'の略記です。\n          'x => x\n          '(1 2 3) => (1 2 3)\n\n_注:_ R5RSは、リテラル式の値を変更するのはエラーであるとしています。\nしかしGaucheはペアとベクタについてはそれが定数であるかどうかをチェックしておらず、\n`set-car!'や`vector-set!'等の破壊的手続きによってそれらの値を\n変更してもエラーは報告されません。そうした場合の動作は不定です。\n文字列に関しては定数かどうかのチェックを行っており、定数文字列を変更しようとすると\nエラーが報告されます。\n\n4.3 手続きを作る {{{2\n================\n\n -- Special Form: lambda formals body ...\n     [R5RS]\n     この式は評価されると手続きを生成します。この式が評価された時点の環境が手続き中に保持されます。\n     手続きが呼ばれると、記憶された環境に引数の束縛を追加した環境中でBODY\n     が順に評価され、 最後の式の値が返されます。\n\n     FORMALS は以下のいずれかの形でなければなりません。\n        * `(VARIABLE ...)' : 手続きは決まった数の引数を取ります。\n          実引数がそれぞれ対応するVARIABLEに束縛されます。\n\n        * `VARIABLE' : 手続きは不定個の引数を取ります。\n          実引数は新しいリストに集められて、そのリストがVARIBLEに束縛されます。\n\n        * `(VARIABLE_0 ... VARIABLE_N-1. VARIABLE_N)' :\n          手続きは少なくともN個の引数を取ります。N個までの実引数は対応するVARIABLE\n          に束縛されます。N個を越えた実引数は新しいリストに集められて\n          VARIABLE_Nに束縛されます。\n\n          (lambda (a b) (+ a b))\n            => 二つの引数を加算する手続き\n\n          ((lambda (a b) (+ a b)) 1 2)\n            => 3\n\n_注:_ いくつかのSchemeの実装ではFORMALSの構文を拡張して、\nCommonLispのように省略可能引数やキーワード引数などの表記を可能にしているものが\nあります。Gaucheには今のところそのような拡張はありません。\n\n -- Macro: cut expr-or-slot expr-or-slot2 ...\n -- Macro: cute expr-or-slot expr-or-slot2 ...\n     [SRFI-26] 手続きを簡潔に書ける便利なマクロです。\n     いわゆる部分適用を実現するために使えます。\n\n     各EXPR-OR-SLOTは式またはシンボル`<>'でなければなりません。\n     最後のEXPR-OR-SLOTはシンボル`<...>'であっても構いません。\n     `cut'は、そのフォーム中にある`<>'と同じ数の引数を取る\n     `lambda'フォームに展開されます。そのフォームのボディには次の式が置かれます。\n            (EXPR-OR-SLOT EXPR-OR-SLOT2 ...)\n     但し、各`<>'は対応する仮引数に置き換えられます。\n     もしシンボル`<...>'が与えられていた場合、展開された`lambda'フォームは\n     可変長引数を取る手続きとなり、作成される手続きに与えられたすべての引数が\n     EXPR-OR-SLOTを呼び出すのに使われます(下の4番目の例を参照のこと)。\n\n          (cut cons (+ a 1) <>)  == (lambda (x2) (cons (+ a 1) x2))\n          (cut list 1 <> 3 <> 5) == (lambda (x2 x4) (list 1 x2 3 x4 5))\n          (cut list)             == (lambda () (list))\n          (cut list 1 <> 3 <...>)\n             == (lambda (x2 . xs) (apply list 1 x2 3 xs))\n          (cut <> a b)           == (lambda (f) (f a b))\n\n          ;; Usage\n          (map (cut * 2 <>) '(1 2 3 4))\n          (for-each (cut write <> port) exprs)\n\n     `cute'は`cut'とほぼ同じですが、`expr-or-slot'に与えられた\n     フォームが手続きを作る前に評価される点が異なります。\n\n          (cute cons (+ a 1) <>)\n             == (let ((xa (+ a 1))) (lambda (x2) (cons xa x2)))\n\n     Gaucheはまた、部分適用を行う`pa$'という組み込み手続きを持っています\n     (*Note コンビネータ::参照)。\n\n -- Macro: case-lambda clause ...\n     [SRFI-16] それぞれの CLAUSE は (FORMALS EXPR ...) という形式\n     でなければなりません。ここで、FORMALS は `lambda' の仮引数\n     リストです。\n\n     この式は、評価されると可変数の引数をとり、`lambda' 式から結果として\n     できる手続き同じレキシカルスコープをもつ手続きになります。この手続きが\n     いくつかの引数とともに呼ばれると、FORMALS と一致する引数に対応する\n     最初の CLAUSE が選択されます。この引数の一致というのは、 `lambda'\n     式の FORMALS に対応するものとして指定されるものです。 `formals'\n     の変数は実引数に束縛され、 EXPR ... がその 環境内で評価されます。\n\n     実際の引数がどの CLAUSE の FORMALS にも一致しなければエラーです。\n\n4.4 代入 {{{2\n========\n\n -- Special Form: set! symbol expression\n -- Special Form: set! (proc arg ...) expression\n     [R5RS][SRFI-17]\n     まずEXPRESSIONが評価されます。最初の形式では、SYMBOLへの束縛が\n     EXPRESSIONの結果を指すように変更されます。\n     もしSYMBOLがローカルに束縛されていない場合は、グローバルな変数SYMBOLが\n     存在していなければなりません。そうでなければエラーが報告されます。\n\n     2番目の形式はSRFI-17に定義されている「一般化されたset!」です。\n     これは構文的な装飾であり、実際は以下のように解釈されます。\n          ((setter PROC) ARG ... EXPRESSION)\n     CommonLispの`setf'とは、setter手続きに渡される引数の順序が異なることに注意して下さい。\n\n     例：\n\n          (define x 3)\n          (set! x (list 1 2))  => undefined\n          x                    => (1 2)\n\n          (set! (car x) 5)     => undefined\n          x                    => (5 2)\n\n -- Macro: set!-values (var ...) expr\n     複数の変数を同時に更新します。EXPRは与えられた変数と同じ\n     数だけの値を生成しなけばなりません。各値が対応するVARに\n     セットされます。\n          (define a 0)\n          (define b 1)\n          (set!-values (a b) (values 3 4)) => undefined\n          a => 3\n          b => 4\n          (set!-values (a b) (values b a)) => undefined\n          a => 4\n          b => 3\n\n -- Function: setter proc\n     [SRFI-17] 手続きPROCのsetter手続きを返します。\n     PROCがsetter手続きを持たない場合の動作は未定義です。\n\n     ある関数Fのsetter手続きGとは、もし`(g a b ... v)'のように\n     呼ばれた場合、次の`(f a b\n     ...)'がVを返すようになる手続きのことです。\n\n     ある手続きにsetter手続きを関連付けるには、`setter'自身のsetter手続きを使うことが\n     できます。\n          (set! (setter F) G)\n\n     特定の手続きにsetter手続きを「ロック」することができます。システム既定のsetter手続き、\n     例えば`car'に対する`set-car!'等はロックされていて、上記のような方法で\n     変更することは出来ません。ユーザ定義手続きにsetter手続きをロックするには下記の\n     `getter-with-setter'を使います。\n\n     PROCが手続きでない場合は、`object-apply'ジェネリックファンクションの\n     setterが返されます。これにより、適用可能オブジェクトが一般化された`set!'\n     でもうまく動作します。詳しくは*Note\n     適用可能なオブジェクト::を参照して下さい。\n\n -- Function: has-setter? proc\n     PROCがsetter手続きを持っている場合は`#t'を返します。\n\n -- Function: getter-with-setter get set\n     [SRFI-17] 2つの手続き、GETとSETを取り、新しい手続きを返します。\n     新しい手続きはGETと同じ動作をし、そのsetter手続きはSETにロックされて\n     います。\n\n     この手続きは、SRFI-17によれば、setter手続きのインライン展開を可能にするための\n     ものですが、Gaucheではまだそのような最適化は実装されていません。\n\nGaucheでは、一般化された`set!'と同じセマンティクスを持ついくつかのマクロが定義\nされています。これらはSET!を使った形に展開されます。\n\n -- Macro: push! place item\n     ITEMとPLACEの値をコンスし、その結果を再びPLACEにセットします。\n     PLACEは`set!'と同様に、 変数か(PROC ARG\n     ...)という形式でなければなりません。このマクロの戻り値は\n     未定義です。\n\n          (define x (list 2))\n          (push! x 3) => undefined\n          x => (3 2)\n\n          (push! (cdr x) 4) => undefined\n          x => (3 4 2)\n\n     PLACEがリストの場合、だいたいこんなふうに展開されます。\n\n          (push! (foo x y) item)\n           ==\n           (let ((tfoo foo)\n                 (tx x)\n                 (ty y))\n             ((setter tfoo) tx ty (cons item (tfoo tx ty))))\n\n     註：Common Lispの`push'マクロは引数を逆の順番で取ります。\n     `push!'は他の副作用を持つ形式との互換性を考えてこの順番としました。\n     Perlの`push'関数は`push!'マクロと同じ引数順ですが、\n     ITEMはシーケンスの末尾に追加されます (Perlの`unshift'の方が\n     `push!'の動作に近いです)。\n     Perlのpushオペレータの動作が必要ならQueueが使えます (*Note\n     キュー::参照)。\n\n -- Macro: pop! place\n     PLACEの値を取り出し、その`cdr'をPLACEにセットします。\n     元の値の`car'を返します。\n\n          (define x (list 1 2 3))\n          (pop! x) => 1\n          x => (2 3)\n\n          (define x (vector (list 1 2 3)))\n          x => #((1 2 3))\n          (pop! (vector-ref x 0)) => 1\n          x => #((2 3))\n\n     註：この動作はCommon Lispの`pop'と同じです。\n     Perlの`pop'はシーケンスの末尾から値を取ります。\n     Perlなら`shift'が`pop!'の動作に近いです。\n\n -- Macro: inc! place &optional delta\n -- Macro: dec! place &optional delta\n     PLACEの値を評価します。それは数値にならなければなりません。\n     その値にDELTAが加算(`inc!')もしくは減算(`dec!')され、\n     結果がPLACEに格納されます。DELTAの既定値は1です。\n\n     Common Lispの`incf'と`decf'に当たります。\n\n -- Macro: update! place proc\n     `push!'等のマクロの一般化された形式です。\n     PROCは一つの引数を取り、一つの値を返す手続きでなければなりません。\n     PLACEの値がPROCに渡され、PROCの結果がPLACEに格納されます。\n          (define a (cons 2 3))\n          (update! (car a) (lambda (v) (* v 3))) => undefined\n          a => (6 . 3)\n\n          (update! (cdr a) (cut - <> 3))\n          a => (6 . 0)\n\n4.5 条件式 {{{2\n==========\n\n -- Special Form: if test consequent alternative\n -- Special Form: if test consequent\n     [R5RS]\n     まず`test'を評価し、それが真の値を返したらCONSEQUENTを評価します。\n     そうでなければALTERNATIVEを評価します。もしALTERNATIVEが与えられて\n     いなければ未定義の値を返します。\n\n          (if (number? 3) 'yes 'no) => yes\n          (if (number? #f) 'yes 'no) => no\n\n          (let ((x '(1 . 2)))\n            (if (pair? x)\n                (values (car x) (cdr x))\n                (values #f #f)))\n            => 1 and 2\n\n -- Special Form: cond clause1 clause2 ...\n     [R5RS][SRFI-61]\n     各`clause'節は次のいずれかの形式でなければなりません。\n          (TEST EXPR ...)\n          (TEST => EXPR)\n          (TEST GUARD => EXPR)\n          (else EXPR EXPR2 ...)\n     最後の形式は最後の節のみに許されます。\n\n     最初の節から順にTESTが評価され、それが真の値を返すまで次の節のTESTが\n     評価されます。TESTが真の値を返したら、それが最初の形式であれば\n     その節のEXPRが順に評価され、最後の評価値が戻り値となります。\n     それが2番目の形式であれば、EXPRがまず評価されます。\n     EXPRは引数をひとつ取る手続きを返さねばなりません。\n     続いて、TESTの結果がその手続きに渡され、その手続きの戻り値が`cond'形式の\n     評価値となります。\n\n     3番目の形式はSRFI-61で定義されています。この形式では、TESTは\n     任意の数の値に評価されることができます。それらの値がまず\n     GUARDに渡され、もしGUARDが真の値を返したら、同じ引数がEXPRに\n     適用されて、その戻り値が`cond'形式の評価値となります。\n     GUARDが`#f'を返した場合は次の節へと評価が進みます。 GUARDとEXPR\n     は、TESTが返すのと同数の引数を取れなければいけません。\n\n     もし全てのテストが偽の値を返し、最後の節が4番目の形式(else節)でなければ、未定義の値が返されます。\n\n     最後の節が`else'節で、他の全てのテストが失敗した場合、`else'節のEXPR\n     が順に評価され、その最後の値が`cond'形式の値となります。\n\n          (cond ((> 3 2) 'greater)\n                ((< 3 2) 'less)) => greater\n          (cond ((> 3 3) 'greater)\n                ((< 3 3) 'less)\n                (else 'equal)) => equal\n          (cond ((assv 'b '((a 1) (b 2))) => cadr)\n                (else #f)) => 2\n\n -- Special Form: case key clause1 clause2 ...\n     [R5RS][SRFI-87]\n     KEYは任意の式です。CLAUSEは以下の形式でなければなりません。\n          ((DATUM ...) EXPR EXPR2 ...)\n          ((DATUM ...) => PROC)\n     ここで、各DATUMはSchemeオブジェクトの外部表現であり、全てのDATUMは\n     異なっていなければなりません。最後のCLAUSEには次の形式を持つelse節が許されます。\n          (else EXPR EXPR2 ...)\n          (else => PROC)\n\n     まずKEYが評価され、その結果がそれぞれのDATUMと比較されます。\n     KEYの値と`eqv?'(*Note 等価::参照)を使って一致するDATUM\n     が見つかれば、対応するEXPRが順に評価され、その最後の値が`case'の\n     値となります。`=>'を含む節はSRFI-87で定義されています。これらの節では、\n     KEYの結果がPROCに渡され、その結果が`case'の値となります。\n\n     もし一致するDATUMが見つからない場合、else節が与えられていれば\n     そのEXPRが順に評価され、最後の値が返されます。else節がなければ`case'節\n     の値は未定義です。\n\n          (case (* 2 3)\n            ((2 3 5 7) 'prime)\n            ((1 4 6 8 9) 'composite)) => composite\n\n          (case (car '(c d))\n            ((a) 'a)\n            ((b) 'b)) => undefined\n\n          (case (car '(c d))\n            ((a e i o u) 'vowel)\n            ((w y) 'semivowel)\n            (else 'consonant)) => consonant\n\n          (case 6\n            ((2 4 6 8) => (cut + <> 1))\n            (else => (cut - <> 1))) => 7\n\n          (case 5\n            ((2 4 6 8) => (cut + <> 1))\n            (else => (cut - <> 1))) => 4\n\n -- Special Form: and test ...\n     [R5RS]\n     TEST式が順に評価されます。最初に偽の値を返したところで評価が止まり、\n     偽の値が返されます。残りの式は評価されません。\n     もし全ての式が真の値を返した場合は、最後の式の値が返されます。\n     式が与えれない場合は`#t'が返されます。\n\n          (and (= 2 2) (> 2 1)) => #t\n          (and (= 2 2) (< 2 1)) => #f\n          (and 1 2 'c '(f g))   => (f g)\n          (and)                 => #t\n\n -- Special Form: or test ...\n     [R5RS]\n     TEST式が順に評価されます。最初に真の値を返したところで評価が止まり、\n     その値が返されます。残りの式は評価されません。\n     もし全ての式が偽の値を返した場合は、偽の値が返されます。\n     式が与えれない場合は`#f'が返されます。\n\n          (or (= 2 2) (> 2 1)) => #t\n          (or (= 2 2) (< 2 1)) => #t\n          (or #f #f #f)        => #f\n          (or (memq 'b '(a b c))\n              ("
Stack Trace:
_______________________________________
gosh> 3
gosh> 0
gosh> *** READ-ERROR: Read error at "(stdin)":line 1933: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 1933: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: c
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Special
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Form:
Stack Trace:
_______________________________________
gosh> #<syntax when>
gosh> *** ERROR: unbound variable: test
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: body
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Special
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Form:
Stack Trace:
_______________________________________
gosh> #<syntax unless>
gosh> *** ERROR: unbound variable: test
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: body
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: まずTESTが評価されます。それが真の値
Stack Trace:
_______________________________________
gosh> *** ERROR: invalid application: (unless の場合は偽の値)
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を返した場合、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 引続きBODYが順に評価され、最後のBODYの評価値が返されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: そうでなければ、未定義の値が返されます。
Stack Trace:
_______________________________________
gosh> 4.6
gosh> *** ERROR: unbound variable: 変数束縛
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 2524: dot in wrong context
Stack Trace:
_______________________________________
gosh> (ピリオド)
gosh> *** ERROR: unbound variable: 記号で階層的に区切って構成されます。このようなモジュールが
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 要求されても、現在の実行時環境に存在しない場合には、Gauche
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ピリオド記号をディレクトリ区切りに変換して
Stack Trace:
_______________________________________
gosh> gauche/mop/validator
gosh> のようにモジュール名からパス名に変換します。その後、
gosh> gauche/mop/validator.scm
gosh> をロードパスから探します。
gosh> *** ERROR: unbound variable: これが単にデフォルトの振る舞いであることに注意してください。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 理論上、1つのSchemeソース・ファイルは多数のモジュールを含むことがあります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: あるいは、1つのモジュール実装は多数のファイルにまたがることもありえます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 将来、特別なケースのために、この対応付けをカスタマイズするフックを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 用意するかもしれません。したがって、モジュールおよびライブラリーファイルを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 扱うルーチンを書く場合には、上記のデフォルトルールを盲目的に適用しないで
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ください。Gaucheは
Stack Trace:
_______________________________________
gosh> module-name->path
gosh> と
gosh> path->module-name
gosh> という
gosh> *** ERROR: unbound variable: |2つの対応づけ手続き|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: モジュールイントロスペクション::参照
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を用意しています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |4.11.3|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: モジュールの定義と選択
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 2618: dot in wrong context
Stack Trace:
_______________________________________
gosh> を
gosh> `/
gosh> 'に置換
gosh> *** ERROR: unbound variable: するというものです。例えば
Stack Trace:
_______________________________________
gosh> (use foo.bar.baz)
gosh> は
gosh> *** ERROR: Compile Error: cannot find file "foo/bar/baz.scm" in *load-path* ("/opt/local/share/gauche/site/lib" "/opt/local/share/gauche/0.8.13/lib")
"(stdin)":2620:(require "foo/bar/baz")

Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: no such module: foo.bar.baz
"(stdin)":2621:(import foo.bar.baz)

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: となります。これはあまりScheme風ではありませんが、便利ではあります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 将来、このマッピングルールをカスタマイズする機構が導入されるかもしれません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |4.11.5|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: モジュールの継承
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 3052: unsupported #-syntax: #<
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: class
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <integer>>
Stack Trace:
_______________________________________
gosh> #<class <complex>>
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 3053: unsupported #-syntax: #<
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: class
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <complex>>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |6.2.2|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 数値に関する述語
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 3215: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: N2が負の場合は次の式によって正の場合にマップできます。
Stack Trace:
_______________________________________
gosh> #<subr modulo>
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,N2
"(stdin)":3217:(N1 ,N2)

Stack Trace:
_______________________________________
gosh> #<subr =>
gosh> *** ERROR: unbound variable: |-modulo|
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,|-N2|
"(stdin)":3217:(|-N1| ,|-N2|)

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: したがって、moduloの結果の符号は常にN2の符号と同じになります。
Stack Trace:
_______________________________________
gosh> 1
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 1
gosh> 1
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 1
gosh> -1
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> -1
gosh> 2
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 2
gosh> 1
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 1
gosh> -2
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> -2
gosh> -1
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> -1
gosh> -1
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> -1
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr quotient&remainder>
gosh> *** ERROR: unbound variable: n1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: n2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 整数N1を整数N2で割った商
Stack Trace:
_______________________________________
gosh> *** ERROR: wrong number of arguments for #<subr quotient> (required 2, got 0)
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: および余り
Stack Trace:
_______________________________________
gosh> *** ERROR: wrong number of arguments for #<subr remainder> (required 2, got 0)
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を同時に計算し、2つの値として返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure gcd>
gosh> *** ERROR: unbound variable: n
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure lcm>
gosh> *** ERROR: unbound variable: n
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: R5RS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 与えられた整数の、最大公約数と最小公倍数をそれぞれ返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr numerator>
gosh> *** ERROR: unbound variable: q
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr denominator>
gosh> *** ERROR: unbound variable: q
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: R5RS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 有理数Qの分子と分母をそれぞれ返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr floor>
gosh> *** ERROR: unbound variable: x
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr ceiling>
gosh> *** ERROR: unbound variable: x
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr truncate>
gosh> *** ERROR: unbound variable: x
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr round>
gosh> *** ERROR: unbound variable: x
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: R5RS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 引数Xは実数でなければなりません。
Stack Trace:
_______________________________________
gosh> floor
gosh> と
gosh> ceiling
gosh> はそれぞれ
gosh> *** ERROR: unbound variable: Xを越えない最大の整数と、Xを下回らない最小の整数を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: TRUNCATEはXの小数部をゼロの方向に向かって切捨てた整数を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ROUNDはXに最も近い整数を返します。Xの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 小数部が0.5ぴったりだった場合はROUNDは最も近い偶数を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr floor->exact>
gosh> *** ERROR: unbound variable: x
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr ceiling->exact>
gosh> *** ERROR: unbound variable: x
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: truncate->exacte
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: x
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr round->exact>
gosh> *** ERROR: unbound variable: x
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: これらは、頻出する
Stack Trace:
_______________________________________
gosh> (inexact->exact (floor x))
gosh> 等を簡潔に書くための
gosh> *** ERROR: unbound variable: 手続きです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr clamp>
gosh> *** ERROR: unbound variable: x
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> #<subr min>
gosh> #<subr max>
gosh> *** ERROR: unbound variable: MIN
Stack Trace:
_______________________________________
gosh> #<syntax if>
gosh> *** ERROR: unbound variable: X
Stack Trace:
_______________________________________
gosh> <
gosh> MIN
gosh> *** ERROR: unbound variable: X
Stack Trace:
_______________________________________
gosh> #<syntax if>
gosh> *** ERROR: unbound variable: MIN
Stack Trace:
_______________________________________
gosh> <=
gosh> X
gosh> <=
gosh> MAX
gosh> *** ERROR: unbound variable: MAX
Stack Trace:
_______________________________________
gosh> #<syntax if>
gosh> *** ERROR: unbound variable: MAX
Stack Trace:
_______________________________________
gosh> <
gosh> X
gosh> *** ERROR: unbound variable: を返します。もしMINまたはMAXが省略されるか
Stack Trace:
_______________________________________
gosh> #f
gosh> が与えられたら、
gosh> *** ERROR: unbound variable: それぞれ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |-∞|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: もしくは
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |+∞|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: と解釈されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 与えられた全ての数値が正確な整数の場合に限り正確な整数を返します。
Stack Trace:
_______________________________________
gosh> 1.0
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 1.0
gosh> 0.5
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 0.5
gosh> 0.0
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 0.0
gosh> 0
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 0
gosh> 256
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 256
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure exp>
gosh> *** ERROR: unbound variable: z
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure log>
gosh> *** ERROR: unbound variable: z
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure sin>
gosh> *** ERROR: unbound variable: z
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure cos>
gosh> *** ERROR: unbound variable: z
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure tan>
gosh> *** ERROR: unbound variable: z
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure asin>
gosh> *** ERROR: unbound variable: z
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure acos>
gosh> *** ERROR: unbound variable: z
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure atan>
gosh> *** ERROR: unbound variable: z
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: R5RS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 超越関数です。複素数も扱えます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure atan>
gosh> *** ERROR: unbound variable: y
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: x
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: R5RS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 実数XとYに対して
Stack Trace:
_______________________________________
gosh> atan
gosh> *** ERROR: unbound variable: Y/X
Stack Trace:
_______________________________________
gosh> を返します。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure sinh>
gosh> *** ERROR: unbound variable: z
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure cosh>
gosh> *** ERROR: unbound variable: z
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure tanh>
gosh> *** ERROR: unbound variable: z
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure asinh>
gosh> *** ERROR: unbound variable: z
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure acosh>
gosh> *** ERROR: unbound variable: z
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure atanh>
gosh> *** ERROR: unbound variable: z
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 双曲線関数です。複素数も扱えます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure sqrt>
gosh> *** ERROR: unbound variable: z
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: R5RS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 複素数Zの平方根のひとつを返します。枝刈りの定義はCommon
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Lispと同じです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 実数に対しては正の平方根を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure expt>
gosh> *** ERROR: unbound variable: z1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: z2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: R5RS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 複素数Z1
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Z2に対して、
"(stdin)":3300:,Z2に対して、

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Z1^Z2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Z1のZ2乗
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr fixnum-width>
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr greatest-fixnum>
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr least-fixnum>
gosh> *** ERROR: unbound variable: R6RS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: These
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: procedures
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: return
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: width
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: fixnum
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: W
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,the
"(stdin)":3305:,the

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: greatest
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: integer
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: representable
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: by
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: fixnum
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |2^W|
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,and
"(stdin)":3306:,and

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: least
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: integer
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: representable
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: by
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: fixnum
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |2^W|
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,respectively.
"(stdin)":3307:,respectively.

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: You
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: might
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: want
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: to
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: care
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: fixnum
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: range
Stack Trace:
_______________________________________
gosh> #<syntax when>
gosh> *** ERROR: unbound variable: you
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: are
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: writing
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: performance-critical
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: section.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: These
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: names
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: are
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: defined
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: in
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: R6RS.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Common
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Lisp
Stack Trace:
_______________________________________
gosh> #<syntax and>
gosh> *** ERROR: unbound variable: ChezScheme
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: have
Stack Trace:
_______________________________________
gosh> most-positive-fixnum
gosh> and
gosh> most-negative-fixnum
gosh> *** READ-ERROR: Read error at "(stdin)":line 3313: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |6.2.5|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 数値の変換
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 3799: unsupported #-syntax: #<
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: error>
Stack Trace:
_______________________________________
gosh> #f
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> #f
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Macro:
Stack Trace:
_______________________________________
gosh> #<macro get-keyword*>
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: kv-list
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: fallback
Stack Trace:
_______________________________________
gosh> get-keyword
gosh> と同様ですが、KV-LIST
gosh> *** ERROR: unbound variable: が
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: KEY
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 含まない場合にのみ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: FALLBACK
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が評価されることだけが違います。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr delete-keyword>
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: kv-list
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr delete-keyword!>
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: kv-list
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: KV-LIST
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: から
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: KEY
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: に
Stack Trace:
_______________________________________
gosh> eq?
gosh> であるキーをもつキーと値を
gosh> *** ERROR: unbound variable: 削除します。
Stack Trace:
_______________________________________
gosh> delete-keyword
gosh> は
gosh> *** ERROR: unbound variable: KV-LIST
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を変更しません。しかし、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 返されたリストは共通の末尾部分を共有します。
Stack Trace:
_______________________________________
gosh> delete-keyword!
gosh> は新しくアロケートされることはありません。
gosh> *** ERROR: unbound variable: そして、破壊的に
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: KV-LIST
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を変更する_可能性があります_。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 最初のキーがマッチした場合元のリストは変更されないこともありえますが、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 返り値のリストを使わなければいけません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: KEY
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: にマッチするキーがない場合
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: KV-LIST
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が返ります。
Stack Trace:
_______________________________________
gosh> (:x 1 :z 3)
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** ERROR: invalid application: (:x 1 :z 3)
Stack Trace:
_______________________________________
gosh> 6.7
gosh> *** ERROR: unbound variable: Identifier
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 3839: Unknown character name: #\charname
Stack Trace:
_______________________________________
gosh> (R5RS)
gosh> *** ERROR: unbound variable: リテラルの文字オブジェクトを表現します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: リーダーは
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 3843: Unknown character name: #\'に出会うと、まず次の文字を読み込みます。それが文字
Stack Trace:
_______________________________________
gosh> ()
gosh> ()
gosh> ()
gosh> *** READ-ERROR: Read error at "(stdin)":line 4110: Bad '\x' escape sequence in a string literal: \x
Stack Trace:
_______________________________________
gosh> |...|
gosh> *** READ-ERROR: Read error at "(stdin)":line 4154: Bad '\x' escape sequence in a string literal: \x
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |\\|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: This
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: is
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: long
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: message
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |\\|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: in
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: literal
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: string.
Stack Trace:
_______________________________________
gosh> ")\n\n          *message*\n            => "
gosh> *** ERROR: unbound variable: This
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: is
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: long
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: message
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: in
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: literal
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: string.
Stack Trace:
_______________________________________
gosh> "\n\n     `message'\n     の後の空白に注意してください。`in'の前の空白は読み込みルーチンによって\n     無視されてしまうので、空白を入れたければ`message'と続くバックスラッシュの間に\n     入れる必要があります。もし文字列中に実際に改行文字を入れ、さらにその後の\n     文字列をインデントさせたい場合は次のようにすると良いでしょう:\n\n          (define *message/newline* "
gosh> *** ERROR: unbound variable: |\\|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: This
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: is
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: long
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: message
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,|\\|
"(stdin)":4168:,|\\|

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |\\n|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: with
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: line
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: break.
Stack Trace:
_______________________________________
gosh> ")\n\n -- Reader syntax: `#*"
gosh> |...|
gosh> *** READ-ERROR: Read error at "(stdin)":line 4201: Bad '\x' escape sequence in a string literal: \x
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: xxxxx
Stack Trace:
_______________________________________
gosh> "\n          (make-string 5 #ふ) => "
gosh> *** ERROR: unbound variable: ふふふふふ
Stack Trace:
_______________________________________
gosh> "\n\n     `make-string'で必要な長さの文字列をアロケートして、`string-set!'\n     で順番に埋めて行くアルゴリズムは、Gaucheでは_極めて_非効率であることに\n     注意してください。そのようなアルゴリズムは、文字列の内部表現とアロケーションメカニズムに\n     関して不必要な仮定を置いており、Gaucheはその仮定とは合致しません。\n     文字列の順次作成に適しているのは文字列ポートです (*Note\n     文字列ポート::参照)。それが使えない場合、\n     文字のリストを作成し、`list->string'で変換する方がまだ`make-string'と\n     `string-set!'を使うより良いでしょう。\n\n -- Function: make-byte-string k &optional byte\n     大きさKの不完全な文字列を作成して返します。\n     BYTEが与えられた場合は、その下位1バイトで文字列の各バイトを初期化します。\n     BYTEは正確な整数でなければなりません。\n\n -- Function: string char ...\n     [R5RS] 文字CHAR ... から構成された文字列を返します。\n\n -- Generic Function: x->string obj\n     文字列への強制型変換手続きです。 OBJの文字列表現を返します。\n     デフォルトのメソッドでは、文字列はそのまま返され、数値は`number->string'で、\n     シンボルは`symbol->string'で変換され、その他のオブジェクトは`display'表現\n     が使われます。\n\n     他のクラスはこのメソッドを定義することにより、独自の変換関数を提供することができます。\n\n6.10.4 文字列の補間 {{{3\n-------------------\n\n「文字列の補間(string interpolation)」という用語は、\nPerlやPythonなど様々なスクリプト言語で、文字列リテラル内に式を埋め込んでおき\n実行時に式を評価した値をそのリテラル内に埋め込む機能を指します。\n\nSchemeはそのような機能を定義していませんが、Gaucheではリーダーマクロを使って\n文字列の補間を実装しました。\n\n -- Reader syntax: `#`'STRING-LITERAL\n     文字列に評価されます。STRING-LITERAL内に、`,EXPR'\n     というシーケンス(ここでEXPRは有効なScheme式の外部表現)が\n     現われたら、EXPRが評価されてその結果がもとの位置に埋め込まれます。\n     結果の文字列化には`x->string'が使われます(*Note\n     文字列の作成::参照)。\n\n     コンマと続く式とは、空白文字等を入れずに隣接していなければなりません。\n     そうでない場合は置換されません。\n\n     二つの連続するコンマは一つのリテラルのコンマ文字に置き換えられます。\n     これによって、コンマと非空白文字の連続をSTRING-LITERALに入れることができます。\n\n     それ以外のSTRING-LITERAL内の文字シーケンスはそのままコピーされます。\n\n     EXPRに単独の変数を使う場合で、それに続く文字列と変数名を区切りたい\n     場合は、`|'文字を使ったシンボルエスケープ構文が使えます。下の例の最後の\n     2つを見て下さい。\n\n          #`"
gosh> *** ERROR: unbound variable: This
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: is
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Gauche
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,version
"(stdin)":4258:,version

Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,(gauche-version)
"(stdin)":4258:,(gauche-version)

Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 4258: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "This is Gauche, version 0.8.13."
gosh> "Date: 2009/05/03"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "Date: 2002/02/18"
gosh> "xxx AAA BBB zzz"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "xxx AAA BBB zzz"
gosh> "123,456,789"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "123,456,789"
gosh> "R5RS"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "R5RS"
gosh> "foobar."
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "foobar"
gosh> *** ERROR: unbound variable: 実は、リーダーはこの構文をマクロ呼び出しへと変換し、それが最終的には
Stack Trace:
_______________________________________
gosh> string-append
gosh> への呼び出しへと変換されます。
gosh> "This is Gauche, version 0.8.13."
gosh> *** ERROR: unbound variable: ==
Stack Trace:
_______________________________________
gosh> "This is Gauche, version 0.8.13."
gosh> *** ERROR: unbound variable: _この構文を採用した理由:_
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 他のスクリプト言語では、
Stack Trace:
_______________________________________
gosh> `$expr
gosh> 'や
gosh> *** READ-ERROR: Read error at "(stdin)":line 4287: unsupported #-syntax: #{
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 4287: extra close parenthesis
Stack Trace:
_______________________________________
gosh> 'が良く使われています。
gosh> *** ERROR: unbound variable: 準クオート
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 準クオート::参照
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: との類似性からこの構文を採用しました。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 変数名の区切りを明確にするのに
Stack Trace:
_______________________________________
gosh> |'を使う必要があるのは少々奇妙ですが、\x0a慣れたSchemeプログラマならコンマ構文を読むのは他の言語から借りた構文よりも\x0a楽だと思います。\x0a\x0aSchemeは他のスクリプト言語より一般的により多くの文字を変数名に使うことが出来ることに注意して下さい。\x0a結果として、変数の値を文字列に挿入する際、ほとんどの場合において変数名を`|
gosh> で区切る
gosh> *** ERROR: unbound variable: 必要があるでしょう。例えば、Perlでは
Stack Trace:
_______________________________________
gosh> "$year/$month/$day\n$hour:$minutes:$seconds"
gosh> と書けたものが、Gaucheでは
gosh> (string-append "" (x->string year) "/" (x->string month) "/" (x->string day) " " (x->string hour) ":" (x->string minutes) ":" (x->string seconds) "")
gosh> と書かねばなりません。
gosh> *** ERROR: unbound variable: 混乱を避けるためには、この構文内では常に直接の変数参照は
Stack Trace:
_______________________________________
gosh> |'で区切るようにしておくのが良いかもしれません。\x0a\x0a6.10.5 文字列のアクセスと変更 {{{3\x0a-----------------------------\x0a\x0a -- Function: string-length string\x0a     [R5RS] 文字列STRINGの長さ(文字数)を返します。\x0a     STRINGは不完全な文字列であっても構いません。\x0a\x0a -- Function: string-size string\x0a     文字列STRINGの大きさを返します。文字列の大きさは、\x0a     STRINGが占めるメモリ上のバイト数で、これは文字列の内部エンコーディングに\x0a     依存します。同じ文字列であっても内部エンコーディングが違えば違う大きさになる場合も\x0a     あります。\x0a\x0a     不完全な文字列では、文字列の長さと大きさは常に一致します。\x0a\x0a -- Function: string-ref cstring k &optional fallback\x0a     [R5RS+] 完全な文字列CSTRINGのK番目の文字を返します。\x0a     不完全な文字列を渡すのはエラーです。\x0a\x0a     Kが負数であったりCSTRINGの長さと同じかそれ以上であった場合には\x0a     エラーが報告されます。但し、引数FALLBACKが与えられている場合にはエラーを\x0a     報告せずFALLBACKが返されます。これはGaucheの拡張です。\x0a\x0a -- Function: string-byte-ref string k\x0a     (多分、不完全な)文字列STRINGのK番目のバイトを返します。\x0a     戻り値は、0から255の範囲の整数です。Kは0以上、 `(string-size\x0a     STRING)'より小でなければなりません。\x0a\x0a -- Function: string-set! string k char\x0a     [R5RS] STRINGのK番目の文字をCHARで置き換えます。\x0a     Kは0以上、`(string-length STRING)'より小でなければ\x0a     なりません。戻り値は未定義です。\x0a\x0a     STRINGが不完全文字列の場合、CHARの下位8ビットの整数値は、\x0a     STRINGのK番目のバイトをセットするために使われます。\x0a\x0a     パフォーマンス上の考慮点について、`make-string'の説明を参照して下さい。\x0a\x0a -- Function: string-byte-set! string k byte\x0a     STRINGのK番目のバイトを整数BYTEで置き換えます。\x0a     BYTEは0から255の範囲(255を含む)でなければなりません。\x0a     Kは0以上、`(string-size STRING)'より小である必要があります。\x0a     STRINGが完全文字列の場合、この操作により不完全文字列になります。\x0a     戻り値は未定義です。\x0a\x0a6.10.6 文字列の比較 {{{3\x0a-------------------\x0a\x0a -- Function: string=? string1 string2\x0a -- Function: string-ci`='? string1 string2\x0a     [R5RS]\x0a\x0a -- Function: string`<'? string1 string2\x0a -- Function: string`<='? string1 string2\x0a -- Function: string`>'? string1 string2\x0a -- Function: string`>='? string1 string2\x0a -- Function: string-ci`<'? string1 string2\x0a -- Function: string-ci`<='? string1 string2\x0a -- Function: string-ci`>'? string1 string2\x0a -- Function: string-ci`>='? string1 string2\x0a     [R5RS]\x0a\x0a6.10.7 文字列を扱うその他の手続き {{{3\x0a---------------------------------\x0a\x0a -- Function: substring string start end\x0a     [R5RS] STRINGのSTART番目の文字(これを含む)から、END番目の文\x0a     字(これを含まない)までの部分文字列を返します。引数STARTおよび\x0a     ENDは以下を満さなければなりません。 `0 <= START < N'、 `0 <= END\x0a     <= N'、 `START <= END'。ただし、Nは与えられた文字列の長 さです。\x0a\x0a     STARTがゼロでかつENDがNの場合には、STRINGのコ ピーが返ります。\x0a\x0a     実は後述する拡張された`string-copy'は`substring'のスーパーセッ\x0a     トになっています。この手続きの役割は主にR5RSとの互換性のためです。\x0a     *Note\x0a     シーケンスフレームワーク::のジェネリック版`subseq'も参照してください。\x0a\x0a -- Function: string-append string ...\x0a     [R5RS] STRING ...を連結した内容を含む文字列を新しくアロケートして返\x0a     します。\x0a\x0a     *Note 文字列の反転と追加::の`string-concatenate'も参照\x0a     してください。\x0a\x0a -- Function: string->list string &optional start end\x0a -- Function: list->string list\x0a     [R5RS+][SRFI-13]\x0a     文字列を文字のリストへ、またはその逆の変換をします。\x0a\x0a     `string->list'にはオプショナル引数として開始、終了位置のインデッ\x0a     クスを渡せます。これはSRFI-13で規定されています。\x0a\x0a     LIST->STRINGではLISTの要素はすべて文字でなければなりません。\x0a     そうでなければ、エラーシグナルがあがります。文字列や文字がまざったリス\x0a     トから文字列を構成したい場合には*Note 怠惰なテキスト構築::にある\x0a     `tree->string'が使えます。\x0a\x0a -- Function: string-copy string &optional start end\x0a     [R5RS+][SRFI-13]\x0a     STRINGのコピーを返します。STARTおよび/あるいはENDの\x0a     位置インデックスを渡すと元の文字列の部分文字列を取り出せます。\x0a     (したがって`string-copy'は事実上`substring'のスーパーセット です)。\x0a\x0a     START引数のみを与えた場合には、部分文字列はSTART番目の文字\x0a     (これを含む)からSTRINGの最後までで、それが返ります。\x0a     STARTとENDの両方を与えたときは、部分文字列はSTART番\x0a     目の文字(これを含む)から、END番目の文字(これを含まない)までで、\x0a     それが返ります。STARTとENDが満すべき条件については\x0a     前述の`substring'の項を見てください。\x0a\x0a -- Function: string-fill! string char &optional start end\x0a     [R5RS+][SRFI-13] STRING を CHAR で埋めます。 オプションの START と\x0a     END は、影響を受ける領域を 制限します。\x0a          (string-fill! "orange" #X)\x0a            => "XXXXXX"\x0a          (string-fill! "orange" #X 2 4)\x0a            => "orXXge"\x0a\x0a -- Function: string-join strs &optional delim grammer\x0a     [SRFI-13] リスト STRS 中にある文字列を、文字列 DELIM を'糊'\x0a     として連結します。\x0a\x0a     引数 GRAMMER は、文字列がどのように連結されるかを指定する\x0a     シンボルで、以下のうちの一つです。\x0a    `infix'\x0a          それぞれの文字列の間に DELIM を使います。このモードが\x0a          デフォルトです。STRS が空文字列かヌル文字列を含むリスト\x0a          である場合は、曖昧に(適当に)動作します。\x0a               (string-join '("apple" "mango" "banana") ", ")\x0a                 => "apple, mango, banana"\x0a               (string-join '() ":")\x0a                 => ""\x0a               (string-join '("") ":")\x0a                 => ""\x0a\x0a    `strict-infix'\x0a          `infix' のように動作しますが、STRS には空リストは\x0a          許されません。したがって、曖昧さはありません。\x0a\x0a    `prefix'\x0a          DELIM をそれぞれの文字列の前に補います。\x0a               (string-join '("usr" "local" "bin") "/" 'prefix)\x0a                 => "/usr/local/bin"\x0a               (string-join '() "/" 'prefix)\x0a                 => ""\x0a               (string-join '("") "/" 'prefix)\x0a                 => "/"\x0a\x0a    `suffix'\x0a          DELIM をそれぞれの文字列の後ろに補います。\x0a               (string-join '("a" "b" "c") "&" 'suffix)\x0a                 => "a&b&c&"\x0a               (string-join '() "&" 'suffix)\x0a                 => ""\x0a               (string-join '("") "&" 'suffix)\x0a                 => "&"\x0a\x0a\x0a -- Function: string-scan string item &optional return\x0a     STRING にある ITEM (文字列あるいは文字)を探します。 引数 RETURN\x0a     は、STRING 中に ITEM が見つかった\x0a     場合にどの値が返されるかを指定します。それは以下のシンボルのうちの\x0a     一つでなければなりません。\x0a\x0a    `index'\x0a          ITEM が見つかった場合はSTRING 内でのインデックス、\x0a          そうでなければ `#f'\x0a          を返します。これがデフォルトの振る舞いです。\x0a               (string-scan "abracadabra" "ada") => 5\x0a               (string-scan "abracadabra" #c) => 4\x0a               (string-scan "abracadabra" "aba") => #f\x0a\x0a    `before'\x0a          ITEM よりも前にある STRING の部分文字列、あるいは ITEM\x0a          が見つからなければ `#f' を返します。\x0a               (string-scan "abracadabra" "ada" 'before) => "abrac"\x0a               (string-scan "abracadabra" #c 'before) => "abra"\x0a\x0a    `after'\x0a          ITEM より後ろにある STRING の部分文字列、あるいは ITEM\x0a          が見つからなければ `#f' を返します。\x0a               (string-scan "abracadabra" "ada" 'after) => "bra"\x0a               (string-scan "abracadabra" #c 'after) => "adabra"\x0a\x0a    `before*'\x0a          ITEM の前にある STRING の部分文字列と後ろにある STRING\x0a          の部分文字列を返します。ITEM が見つからない場合は、 `(values\x0a          #f #f)' を返します。\x0a               (string-scan "abracadabra" "ada" 'before*)\x0a                 => "abrac" and "adabra"\x0a               (string-scan "abracadabra" #c 'before*)\x0a                 => "abra" and "cadabra"\x0a\x0a    `after*'\x0a          STRING のうち、ITEM の終端までの部分文字列とその残りを\x0a          返します。ITEM が見つからなかった場合は、`(values #f #f)'\x0a          を返します。\x0a               (string-scan "abracadabra" "ada" 'after*)\x0a                 => "abracada" and "bra"\x0a               (string-scan "abracadabra" #c 'after*)\x0a                 => "abrac" and "adabra"\x0a\x0a    `both'\x0a          STRING のうち、ITEM の前と ITEM の後ろの\x0a          部分文字列を返します。ITEM が見つからない場合、 `(values #f\x0a          #f)' を返します。\x0a               (string-scan "abracadabra" "ada" 'both)\x0a                 => "abrac" and "bra"\x0a               (string-scan "abracadabra" #c 'both)\x0a                 => "abra" and "adabra"\x0a\x0a -- Function: string-split string splitter\x0a     STRING を SPLITTER で分割し、文字列のリストを返します。 SPLITTER\x0a     には、文字、文字セット、文字列、正規表現、手続きが 使えます。\x0a\x0a     SPLITTER が文字の場合、その文字がデリミタとして使われます。\x0a\x0a     SPLITTER が文字セットの場合は、その文字セットに含まれる文字の\x0a     連続がデリミタとして使われます。\x0a\x0a     SPLITTER に手続きが与えられた場合、STRING にある各文字に\x0a     対してその手続きが呼ばれ、SPLITTER が真の値を返すような連続した\x0a     文字群がデリミタとして使われます。\x0a\x0a          (string-split "/aa/bb//cc" #/)    => ("" "aa" "bb" "" "cc")\x0a          (string-split "/aa/bb//cc" "/")    => ("" "aa" "bb" "" "cc")\x0a          (string-split "/aa/bb//cc" "//")   => ("/aa/bb" "cc")\x0a          (string-split "/aa/bb//cc" #[/])   => ("" "aa" "bb" "cc")\x0a          (string-split "/aa/bb//cc" #//+/) => ("" "aa" "bb" "cc")\x0a          (string-split "/aa/bb//cc" #[w])  => ("/" "/" "//" "")\x0a          (string-split "/aa/bb//cc" char-alphabetic?) => ("/" "/" "//" "")\x0a\x0a          ;; some boundary cases\x0a          (string-split "abc" #/) => ("abc")\x0a          (string-split ""    #/) => ("")\x0a\x0a     `string-tokenize' (*Note 他の文字列操作::) も参照して下さい。\x0a\x0a6.10.8 不完全文字列 {{{3\x0a-------------------\x0a\x0aGaucheの内部エンコーディングで正当なマルチバイト文字で構成されていない\x0aようなバイト列を含む文字列は「不完全文字列」となります。\x0a\x0a不完全文字列が生成される状況はいくつかあります。たとえば、バイナリデー\x0aタを文字列として読み込んだとき、マルチバイト文字の途中で切れた文字列を\x0a読み込んだとき、別の不完全文字列が連結された場合などです。\x0a\x0a不完全文字列は例外的な状況であるとみなすべきです。これまではバイト列処\x0a理を使っていましたが、現在はu8vector (*Note\x0aユニフォームベクタ::参照)を使うこ\x0aとができますので、将来のリリースでは削除する計画です。\x0a\x0a万が一、不完全文字列に出会ってしまったら以下の手続を使って完全文字列に\x0a変換することができます。\x0a\x0a -- Function: string-incomplete->complete str &optional handling\x0a     不完全文字列STRの内容を再解釈して、あらたに完全文字列を返す。\x0a     HANDLING引数でSTR中の不正なバイト列の扱いかたを指定します。\x0a    `#f'\x0a          STRが不正なバイト列を含んでいる場合、変換を諦めて`#f'を返し\x0a          ます。これがデフォルトのふるまいです。\x0a\x0a    `:omit'\x0a          不正なバイト列を捨てます。常に完全文字列を返します。\x0a\x0a    1文字\x0a          不正なバイト列中の各バイトを与えた文字で置き換えます。常に完全文字列を\x0a          返します。\x0a     STRが完全文字列なら、そのコピーが返されます。\x0a\x0a6.11 正規表現 {{{2\x0a=============\x0a\x0aGaucheはPOSIXの拡張正規表現にほぼ上位互換な正規表現エンジンを\x0a組込みで持っています。また、Perl 5の正規表現からいくつかの\x0a拡張機能を採り入れています。\x0a\x0a -- Builtin Class: <regexp>\x0a     正規表現オブジェクトのクラスです。`string->regexp'を使って実行時に\x0a     作成できます。また、Gaucheはリテラルの正規表現を表す構文を持っており、\x0a     ロード時に作成することもできます。\x0a\x0a     Gaucheの正規表現エンジンはマルチバイト文字列に対応しています。\x0a\x0a -- Builtin Class: <regmatch>\x0a     正規表現マッチオブジェクトのクラスです。正規表現エンジン`rxmatch'は、\x0a     一致した場合にこのオブジェクトを返します。部分一致の情報を含めた\x0a     全てのマッチに関する情報がこのオブジェクトに含まれています。\x0a\x0a     一致した部分文字列やそのインデックスのリストではなく\x0a     マッチオブジェクトを返すことの利点は効率です。\x0a     regmatchオブジェクトはマッチの内部状態を保持しており、\x0a     要求された時にはじめて該当する部分文字列やインデックスを計算します。\x0a     これは特にマルチバイト文字列に有効です。マルチバイト文字列\x0a     へのインデックスアクセスは遅いからです。\x0a\x0a -- Reader Syntax: `#/regexp-spec/'\x0a -- Reader Syntax: `#/regexp-spec/i'\x0a     リテラルの正規表現オブジェクトを表記します。読まれた際に`<regexp>'の\x0a     インスタンスとなります。\x0a\x0a     末尾に文字`i'が与えられた場合は、マッチ時に大文字小文字を区別しない\x0a     正規表現オブジェクトとなります。(現在のバージョンでは、大文字小文字の\x0a     同一視はASCII文字のみに対して行われます。それ以外の文字は通常の方法でマッチします)。\x0a\x0a     `string->regexp'に対してこの構文を使う利点は、\x0a     正規表現のコンパイルが一度しか行われない点です。この構文は、\x0a     内部ループの中でも、正規表現のコンパイルのオーバヘッドを気にせずに\x0a     使うことができます。動的に正規表現を作成したい場合のみ`string->regexp'を\x0a     使って下さい。\x0a\x0a   Gaucheの組み込み正規表現構文はPOSIX拡張正規表現に準じたものに、\x0aPerlの拡張の一部を採り入れたものです。\x0a\x0a   ここに示す構文は表面的な構文にすぎないことに注意して下さい。\x0aGaucheの正規表現コンパイラは抽象構文木を扱うようになっており、\x0a将来はSREのような別の構文もサポートされる予定です。\x0a\x0a`re*'\x0a     reの0回以上の繰り返しにマッチします。\x0a\x0a`re+'\x0a     reの1回以上の繰り返しにマッチします。\x0a\x0a`re?'\x0a     reの0回または1回の出現にマッチします。\x0a\x0a`re{n}'\x0a`re{n,}'\x0a`re{n,m}'\x0a     回数に範囲のある繰り返しです。\x0a     `re{n}'はreのn回の繰り返しにマッチします。\x0a     `re{n,}'はreのn回以上の繰り返しにマッチします。\x0a     `re{n,m}'はreのn回以上、m回以下の 繰り返しにマッチします。但しN <=\x0a     Mとします。\x0a\x0a`re*?'\x0a`re+?'\x0a`re??'\x0a`re{n,}?'\x0a`re{n,m}?'\x0a     上記の繰り返し構造とほぼ同じですが、これらの構文は「non-greedy」または\x0a     「lazy」と呼ばれるマッチ戦略を用います。すなわち、まずreがマッチする\x0a     最小の回数を試し、それが失敗したら順に繰り返しの回数を増やしてゆきます。\x0a     次の例を比べてみてください：\x0a          (rxmatch-substring (#/<.*>/ "<tag1><tag2><tag3>") 0)\x0a            => "<tag1><tag2><tag3>"\x0a\x0a          (rxmatch-substring (#/<.*?>/ "<tag1><tag2><tag3>") 0)\x0a            => "<tag1>"\x0a\x0a`(re...)'\x0a     捕捉とクラスタリング。括弧でくくられた正規表現の列がグループとして\x0a     扱われ、またそれにマッチした文字列はサブマッチとして保存されます。\x0a\x0a`(?:re...)'\x0a     捕捉無しクラスタリング。`re ...'はグループとして\x0a     扱われますが、サブマッチとして保存されません。\x0a\x0a`(?<name>re...)'\x0a     名前つきの捕捉とクラスタリング。`(re...)'と同様ですが、\x0a     マッチした文字列に名前nameがつけられます。マッチした文字列には\x0a     インデックスの数字と名前のどちらでも参照できます。\x0a\x0a     同じ名前が複数回正規表現内に出現した場合、どの名前付き捕捉にマッチした\x0a     部分文字列が返されるかは不定です。\x0a\x0a`(?i:re...)'\x0a`(?-i:re...)'\x0a     大文字小文字の区別の制御。\x0a     `(?i:re...)'はre...が大文字小文字にかかわらず\x0a     マッチするようにします。 `(?-i:re...)'はその逆です。\x0a\x0a     Perlの正規表現では'?'と':'の間に他のいくつかのフラグを使うことが\x0a     できますが、Gaucheでは今のところこのフラグのみをサポートしています。\x0a\x0a`pattern1|
gosh> *** ERROR: unbound variable: pattern2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...'\x0a     パターンのいずれかにマッチします。\x0a\x0a`n'\x0a     バックリファレンス。nは整数です。\x0a     n番目(1から数える)の補捉カッコに補捉された文字列と一致する場合に、nが\x0a     マッチします。補足カッコがネストしている場合、開きカッコの順番で数えます。\x0a     n番目のカッコが繰り返しの中にあり、複数回マッチ\x0a     している場合は、最後にマッチした文字列との比較が行われます。\x0a\x0a`k<name>'\x0a     名前によるバックリファレンス。\x0a     名前nameを持つ補捉カッコで補捉された文字列と一致する場合に、\x0a     k<name>がマッチします。参照しているカッコが繰り返しの中にあり、\x0a     複数回マッチしている場合は、最後にマッチした文字列との比較が行わ\x0a     れます。同じ名前nameを持つ補捉カッコが複数ある場合には、\x0a     それらのカッコの最後にマッチした文字列のいずれかと一致する場合、\x0a     マッチが成功します。\x0a\x0a`.'\x0a     任意の1文字にマッチします。改行文字にもマッチします。\x0a\x0a`[char-set-spec]'\x0a     char-set-specで指定される文字セット内の文字にマッチします。\x0a     char-set-specについては*Note 文字集合::を参照して下さい。\x0a\x0a`s, d, w'\x0a     それぞれ空白文字(`#[[:space:]]')、 数字(`#[[:digit:]]')、\x0a     単語を構成する文字(`#[[:alpha:][:digit:]_]')にマッチします。\x0a\x0a     文字セット内でも、その外でも使えます。\x0a\x0a`S, D, W'\x0a     それぞれ`s'、`d'、`w'で指定される文字セットの補集合の\x0a     文字にマッチします。\x0a\x0a`^, $'\x0a     それぞれ、パターンの最初または最後に指定された場合、\x0a     文字列の最初か最後にマッチします。\x0a\x0a`b, B'\x0a     `b'は単語の境界の空文字列にマッチします。 `B'はその逆です。\x0a\x0a`;'\x0a`"'\x0a`#'\x0a     これらはそれぞれ`;'、`"'、および`#'と同じです。\x0a     Emacs等、Scheme構文を理解するエディタを混乱させないために使うことができます。\x0a\x0a`(?=pattern)'\x0a`(?!pattern)'\x0a     肯定および否定の先読み。\x0a     patternが文字列の現在の位置にマッチする(あるいはマッチ\x0a     しない)ときにマッチが成功しますが、現在の位置は変更しない\x0a     ので、後に続く正規表現は現在と同じ位置から適用されます。\x0a\x0a     例えば、次の表現は、電話番号のうち日本の番号("81"から始まるもの)\x0a     を除く文字列にマッチします。\x0a          +(?!81)d{9,}\x0a\x0a`(?<=pattern)'\x0a`(?<!pattern)'\x0a     肯定の後読みおよび否定の後読み。\x0a     現在の位置の左側にpatternにマッチする文字列がある場合に\x0a     マッチが成功(あるいは失敗)します。先読みと同様、現在の位置は\x0a     変更しません。\x0a\x0a     内部的にこの表現は、patternを逆転させたうえで、現在の位置\x0a     から左に向かってマッチを進めることで実現されています。したがって、\x0a     patternには任意のものにマッチする表現を含めることができますが、\x0a     マッチの順番や長さが重要な場合(例えば2通りにマッチしうる捕捉の\x0a     カッコ)などは、左から右に現在位置が進むときとは異なる場所に\x0a     マッチするかもしれません。\x0a\x0a`(?>pattern)'\x0a     アトミックなクラスタリング。patternがいったんマッチすると、その後\x0a     patternの中でバックトラックを行いません。\x0a\x0a`re*+'\x0a`re++'\x0a`re?+'\x0a     それぞれ(?>re*)、(?>re+)、(?>re?)と同じです。\x0a\x0a\x0a -- Function: string->regexp string &keyword case-fold\x0a     文字列STRINGを正規表現とみなして、`<regexp>'のインスタンスを\x0a     作成して返します。\x0a\x0a     キーワード引数CASE-FOLDに真の値が与えられた場合、作成される正規表現は\x0a     大文字小文字を区別しないものとなります。\x0a     (大文字小文字を区別しない正規表現に関しては上の説明を参照して下さい)。\x0a\x0a -- Function: regexp? OBJ\x0a     OBJが正規表現オブジェクトなら真の値を返します。\x0a\x0a -- Function: regexp->string REGEXP\x0a     正規表現REGEXPを記述する元になった文字列を返します。\x0a     返される文字列は変更不可な文字列です。\x0a\x0a -- Function: rxmatch regexp string\x0a     正規表現オブジェクトREGEXPに一致するものを文字列STRINGから\x0a     探します。一致が見付かった場合は`<regmatch>'オブジェクトを返し、\x0a     見付からなかった場合は`#f'を返します。\x0a\x0a     他のScheme処理系ではこれは\x0a     `match'、`regexp-search'、`string-match'など\x0a     様々な名で呼ばれています。\x0a\x0a -- Generic application: REGEXP STRING\x0a     正規表現オブジェクトは直接文字列に対して適用することもできます。\x0a     これは`(rxmatch REGEXP STRING)'と同じ動作をしますが、\x0a     表記が短くて済みます。この機能は*Note 適用可能なオブジェクト::\x0a     で述べているメカニズムを 使って実装されています。\x0a\x0a -- Function: rxmatch-start match &optional (i 0)\x0a -- Function: rxmatch-end match &optional (i 0)\x0a -- Function: rxmatch-substring match &optional (i 0)\x0a     `rxmatch'が返すマッチオブジェクトMATCHから情報を取り出します。\x0a     Iが省略されるか0の場合、これらの手続きはそれぞれ一致した\x0a     文字列の開始インデックス、終了インデックス、および一致した部分文字列を\x0a     返します。Iに正の整数が与えられた場合は、I番目のサブマッチ\x0a     に関する情報を返します。Iにシンボルが与えられた場合は、名前\x0a     Iを持つサブマッチの情報を返します。同じ名前Iを持つ複数の\x0a     サブマッチがある場合には、成功したサブマッチの情報を返します。\x0a     Iにそれ以外の値を与えるのはエラーです。\x0a\x0a     簡便のために、MATCHに`#f'を渡すことも許されています。\x0a     その場合、これらの手続きは`#f'を返します。\x0a\x0a     これらの手続きはScshで`match:start'、`match:end'、\x0a     `match:substring'と呼ばれているものと等価です。\x0a\x0a -- Function: rxmatch-num-matches match\x0a     MATCHの持つマッチの数を返します。この数には\x0a     「マッチ全体」も含まれるので、`<regmatch>'オブジェクトに対しては\x0a     常に正の整数が返ることになります。また、値を持たないマッチもカウントされます\x0a     (下の例を参照)。\x0a\x0a     簡便のために、MATCHに`#f'を渡すこともできます。\x0a     その場合は0が返ります。\x0a\x0a          (rxmatch-num-matches (rxmatch #/abc/ "abc"))\x0a            => 1\x0a\x0a          (rxmatch-num-matches (rxmatch #/(a(.))|
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 4823: bad dot syntax
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 4823: extra close parenthesis
Stack Trace:
_______________________________________
gosh> #<subr />
gosh> "ba"
gosh> *** READ-ERROR: Read error at "(stdin)":line 4823: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 4823: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 5
gosh> 0
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 0
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr rxmatch-after>
gosh> *** ERROR: unbound variable: match
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: i
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr rxmatch-before>
gosh> *** ERROR: unbound variable: match
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: i
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: マッチオブジェクトMATCHの前および後の文字列を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 正の整数がIに与えられた場合はi番目のサブマッチの前および後の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列を返します。シンボルが与えられた場合は、その名前を持つ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: サブマッチの前後の文字列を返します。
Stack Trace:
_______________________________________
gosh> match
gosh> "..."
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "..."
gosh> ".14..."
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> ".14..."
gosh> "pi="
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "pi="
gosh> "pi=3."
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "pi=3."
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure rxmatch->string>
gosh> *** ERROR: unbound variable: regexp
Stack Trace:
_______________________________________
gosh> #<subr string>
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: selector
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: A
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: convenience
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: procedure
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: to
Stack Trace:
_______________________________________
gosh> #<<regmatch> 0x60c680>
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> #<subr string>
gosh> *** ERROR: unbound variable: to
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: given
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: regexp
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,then
"(stdin)":4846:,then

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: returns
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: matched
Stack Trace:
_______________________________________
gosh> #<subr substring>
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,or
"(stdin)":4846:,or

Stack Trace:
_______________________________________
gosh> #f
gosh> if
gosh> *** ERROR: unbound variable: it
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: doesn
Stack Trace:
_______________________________________
gosh> t
gosh> *** ERROR: unbound variable: match.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: If
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: no
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SELECTOR
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: is
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: given
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,it
"(stdin)":4848:,it

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: is
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: same
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: as
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: this:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: REGEXP
Stack Trace:
_______________________________________
  0  (rxmatch REGEXP STRING)
        At line 4849 of "(stdin)"
gosh> *** ERROR: unbound variable: If
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: an
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: integer
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: is
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: given
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: as
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: selector
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,it
"(stdin)":4851:,it

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: returns
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: subtring
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: numbered
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: submatch.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: If
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: symbol
Stack Trace:
_______________________________________
gosh> after
gosh> or
gosh> before
gosh> is
gosh> *** ERROR: unbound variable: given
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,it
"(stdin)":4854:,it

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: returns
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> #<subr substring>
gosh> *** ERROR: unbound variable: after
Stack Trace:
_______________________________________
gosh> #<syntax or>
gosh> *** ERROR: unbound variable: before
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: match.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: You
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: can
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: give
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: these
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: symbols
Stack Trace:
_______________________________________
gosh> #<syntax and>
gosh> *** ERROR: unbound variable: an
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: integer
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: to
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: extract
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> #<subr substring>
gosh> *** ERROR: unbound variable: before
Stack Trace:
_______________________________________
gosh> #<syntax or>
gosh> *** ERROR: unbound variable: after
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: numbered
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: submatch.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: gosh>
Stack Trace:
_______________________________________
gosh> "314"
gosh> "314"
gosh> *** ERROR: unbound variable: gosh>
Stack Trace:
_______________________________________
gosh> "example.com"
gosh> "example.com"
gosh> *** ERROR: unbound variable: gosh>
Stack Trace:
_______________________________________
gosh> "foo@"
gosh> "foo@"
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Generic
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: application:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: REGMATCH
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: INDEX
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Generic
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: application:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: REGMATCH
Stack Trace:
_______________________________________
gosh> 'before
gosh> &optional
gosh> *** ERROR: unbound variable: INDEX
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Generic
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: application:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: REGMATCH
Stack Trace:
_______________________________________
gosh> 'after
gosh> &optional
gosh> *** ERROR: unbound variable: INDEX
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: マッチオブジェクトは直接整数のインデックスもしくはシンボルに対して適用することが
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: できます。整数に適用したときは
Stack Trace:
_______________________________________
gosh> (rxmatch-substring REGMATCH INDEX)
gosh> 、
gosh> *** ERROR: unbound variable: シンボル
Stack Trace:
_______________________________________
gosh> before
gosh> のときは
gosh> (rxmatch-before REGMATCH)
gosh> 、シンボル
gosh> after
gosh> のときは
gosh> (rxmatch-after REGMATCH)
gosh> 、そのほかのシンボルのときは
gosh> (rxmatch-substring REGMATCH SYMBOL)
gosh> と同じ動作をします。
gosh> *** ERROR: unbound variable: 表記が短くて済みます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: この機能は*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 適用可能なオブジェクト::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: で述べているメカニズムを使って実装されています。
Stack Trace:
_______________________________________
gosh> match
gosh> "3.14"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "3.14"
gosh> "3"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "3"
gosh> "14"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "14"
gosh> "..."
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "..."
gosh> ".14..."
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> ".14..."
gosh> "pi="
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "pi="
gosh> "pi=3."
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "pi=3."
gosh> match
gosh> "3"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "3"
gosh> "14"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "14"
gosh> "3"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "3"
gosh> "14"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "14"
gosh> ".14..."
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> ".14..."
gosh> "pi=3."
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "pi=3."
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure regexp-replace>
gosh> *** ERROR: unbound variable: regexp
Stack Trace:
_______________________________________
gosh> #<subr string>
gosh> *** ERROR: unbound variable: substitution
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure regexp-replace-all>
gosh> *** ERROR: unbound variable: regexp
Stack Trace:
_______________________________________
gosh> #<subr string>
gosh> *** ERROR: unbound variable: substitution
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: STRING中で
Stack Trace:
_______________________________________
gosh> regexp
gosh> にマッチした部分をSUBSTITUTIONで
gosh> *** ERROR: unbound variable: 置き換えます。
Stack Trace:
_______________________________________
gosh> regexp-replace
gosh> は最初にマッチした部分のみを置き換え、
gosh> regexp-replace-all
gosh> は全てのマッチを置き換えます。
gosh> *** ERROR: unbound variable: SUBSTITUTIONは文字列か手続きです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列の場合、バックスラッシュに続く数値、もしくは
Stack Trace:
_______________________________________
gosh> |\\k<NAME>|
gosh> という形式でサブマッチ文字列を参照できます
gosh> |\\0|
gosh> はマッチ文字列全体を参照します。文字列リテラルにバックスラッシュを
gosh> *** ERROR: unbound variable: 埋め込む場合は二つのバックスラッシュが必要であることに注意して下さい。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: バックスラッシュそのものをSUBSTITUTION中で使いたい場合は
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 二つのバックスラッシュを重ねます
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列リテラルの場合は4つのバックスラッシュが
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 必要になります。
Stack Trace:
_______________________________________
gosh> "abc...ghi"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "abc...ghi"
gosh> "abc|def|ghi"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "abc|def|ghi"
gosh> "abc|\\0|ghi"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "abc|\\0|ghi"
gosh> "ab|def|hi"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "ab|def|hi"
gosh> "ab|def|hi"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "ab|def|hi"
gosh> *** ERROR: unbound variable: SUBSTITUTIONが手続きである場合、STRING中の各マッチについて、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: マッチオブジェクトを引数としてその手続きが呼ばれます。その手続きが返す
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 値を
Stack Trace:
_______________________________________
gosh> display
gosh> で表現したものが置換文字列として使われます。
gosh> "abfedhi"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "abfedhi"
gosh> *** ERROR: unbound variable: 註:
Stack Trace:
_______________________________________
gosh> regexp-replace-all
gosh> は文字列でマッチした部分の後ろの部分に
gosh> *** ERROR: unbound variable: ついて再帰的に自分自身を適用します。従って、REGEXPが
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列先頭のアサーション
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 4941: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を含んでいても、それはSTRINGの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 先頭だけにマッチするとは限りません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure (regexp-replace-driver regexp-replace-driver)>
gosh> #<subr string>
gosh> *** ERROR: unbound variable: rx1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: sub1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: rx2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: sub2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure (regexp-replace-driver regexp-replace-driver)>
gosh> #<subr string>
gosh> *** ERROR: unbound variable: rx1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: sub1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: rx2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: sub2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: まず、
Stack Trace:
_______________________________________
gosh> regexp-replace
gosh> あるいは
gosh> regexp-replace-all
gosh> を
gosh> *** ERROR: unbound variable: 正規表現
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: RX1、置換
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SUB1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: で
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: STRING
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: に適用し、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: その結果にさらに
Stack Trace:
_______________________________________
gosh> regexp-replace
gosh> あるいは
gosh> regexp-replace-all
gosh> を正規表現
gosh> *** ERROR: unbound variable: RX2、置換
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SUB2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: で
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 適用し、以下同様です。これらの関数はひとつの文字列上で複数回置換を行う
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ときに便利です。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure regexp-quote>
gosh> #<subr string>
gosh> *** ERROR: unbound variable: STRING中で、正規表現において特別な意味を持つ文字を全てエスケープした
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列を返します。
Stack Trace:
_______________________________________
gosh> "\\[2002/10/12\\] touched foo\\.h and \\*\\.c"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "\\[2002/10/12\\] touched foo\\.h and \\*\\.c"
gosh> *** ERROR: unbound variable: 以下のマクロにおいて、MATCH-EXPRはマッチオブジェクトか
Stack Trace:
_______________________________________
gosh> #f
gosh> を生成する式でなければなりません。通常それは
gosh> rxmatch
gosh> を呼ぶ式になりますが、それだけに限られるわけではありません。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Macro:
Stack Trace:
_______________________________________
gosh> #<macro rxmatch-let>
gosh> *** ERROR: unbound variable: match-expr
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: form
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: MATCH-EXPRを評価し、それがマッチオブジェクトを返したら、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: マッチした文字列をVAR
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...に束縛し、FORMを評価します。|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 最初のVARはマッチした文字列全体に束縛され、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 以降の変数はサブマッチ文字列に束縛されます。実際のサブマッチ文字列が
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 与えられた変数より少なかった場合は、余った変数は
Stack Trace:
_______________________________________
gosh> #f
gosh> に束縛されます。
gosh> *** ERROR: unbound variable: 特定のマッチ文字列を受け取る必要が無いときは、その場所の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 変数の変わりに
Stack Trace:
_______________________________________
gosh> #f
gosh> を置いておくこともできます。
gosh> ("23:59:58" "23" "59" "58")
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** ERROR: invalid application: ("23:59:58" "23" "59" "58")
Stack Trace:
_______________________________________
gosh> ("23" "59")
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** ERROR: invalid application: ("23" "59")
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: このマクロはscshの
Stack Trace:
_______________________________________
gosh> let-match
gosh> に相当します。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Macro:
Stack Trace:
_______________________________________
gosh> #<macro rxmatch-if>
gosh> *** ERROR: unbound variable: match-expr
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: then-form
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: else-form
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: MATCH-EXPRを評価し、それがマッチオブジェクトを返したら
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: マッチした文字列を変数VAR
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...に束縛してTHEN-FORMを|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 評価します。マッチオブジェクトが返されなければ束縛は行われず、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ELSE-FORMが評価されます。変数VARをマッチ文字列に
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 束縛するルールは
Stack Trace:
_______________________________________
gosh> rxmatch-let
gosh> と同じです。
gosh> "time is 11:22"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "time is 11:22"
gosh> "unknown time"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "unknown time"
gosh> *** ERROR: unbound variable: このマクロはscshの
Stack Trace:
_______________________________________
gosh> if-match
gosh> に相当します。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Macro:
Stack Trace:
_______________________________________
gosh> #<macro rxmatch-cond>
gosh> *** ERROR: unbound variable: clause
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: CLAUSEの条件を順に評価してゆき、条件を満たすものが現れたら
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: そのCLAUSEの残りのフォームを評価し、最後のフォームの値を
Stack Trace:
_______________________________________
gosh> rxmatch-cond
gosh> の値とします。CLAUSEは以下のいずれかの
gosh> *** ERROR: unbound variable: 形式でなければなりません。
Stack Trace:
_______________________________________
gosh> (MATCH-EXPR (VAR |...|) FORM |...|)
gosh> MATCH-EXPRを評価し、それがマッチオブジェクトを返した場合は
gosh> *** ERROR: unbound variable: マッチ文字列を変数VAR
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...に束縛した上で|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: FORM
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...を評価します。|
Stack Trace:
_______________________________________
gosh> (test EXPR FORM |...|)
gosh> EXPRを評価し、それが真の値を返した場合はFORM
gosh> *** ERROR: unbound variable: |...を評価します。|
Stack Trace:
_______________________________________
gosh> (test EXPR => PROC)
gosh> EXPRを評価し、それが真の値を返した場合は
gosh> *** ERROR: unbound variable: それを唯一の引数として手続きPROCを呼びます。
Stack Trace:
_______________________________________
gosh> (else FORM |...|)
gosh> このCLAUSEは、もし与えられたとすれば最後のCLAUSEでなければ
gosh> *** ERROR: unbound variable: なりません。全てのCLAUSEが失敗した場合に、FORM
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...が|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 評価されます。
Stack Trace:
_______________________________________
gosh> else
gosh> CLAUSEが与えられず、かつ全てのCLAUSEが
gosh> *** ERROR: unbound variable: 失敗した場合の戻り値は未定義です。
Stack Trace:
_______________________________________
gosh> parse-date
gosh> (2001 2 3)
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** ERROR: invalid application: (2001 2 3)
Stack Trace:
_______________________________________
gosh> (1999 12 25)
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** ERROR: invalid application: (1999 12 25)
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: このマクロはscshの
Stack Trace:
_______________________________________
gosh> match-cond
gosh> に相当します。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Macro:
Stack Trace:
_______________________________________
gosh> #<macro rxmatch-case>
gosh> *** ERROR: unbound variable: string-expr
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: clause
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: STRING-EXPRがまず評価され、続いてCLAUSEが順に検査されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: CLAUSEは以下のいずれかの形式でなければなりません。
Stack Trace:
_______________________________________
gosh> (RE (VAR |...|) FORM |...|)
gosh> REはリテラル正規表現オブジェクトでなければなりません
gosh> *** ERROR: unbound variable: 正規表現::参照
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。STRING-EXPRの結果が文字列であり
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: REにマッチした場合は、マッチ文字列が変数VAR
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...に|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 束縛され、FORMが評価されます。最後のFORMの値が
Stack Trace:
_______________________________________
gosh> rxmatch-case
gosh> の値となります。
gosh> *** ERROR: unbound variable: STRING-EXPRの結果の文字列がREにマッチしないか、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: STRING-EXPRの結果が文字列以外であった場合は次のCLAUSEへと
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 処理が進みます。
Stack Trace:
_______________________________________
gosh> (test PROC FORM |...|)
gosh> 手続きPROCがSTRING-EXPRの結果を引数として呼ばれます。
gosh> *** ERROR: unbound variable: それが真の値を返した場合はFORMが順に評価され、最後のFORMの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 値が
Stack Trace:
_______________________________________
gosh> rxmatch-case
gosh> の値として返されます。
gosh> *** ERROR: unbound variable: PROCが
Stack Trace:
_______________________________________
gosh> #f
gosh> を返した場合は次のCLAUSEへと
gosh> *** ERROR: unbound variable: 処理が進みます。
Stack Trace:
_______________________________________
gosh> (test PROC => PROC2)
gosh> 手続きPROCがSTRING-EXPRの結果を引数として呼ばれます。
gosh> *** ERROR: unbound variable: それが真の値を返した場合は、その値を引数としてPROC2が呼ばれ、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: その返り値が
Stack Trace:
_______________________________________
gosh> rxmatch-case
gosh> の値として返されます。
gosh> *** ERROR: unbound variable: PROCが
Stack Trace:
_______________________________________
gosh> #f
gosh> を返した場合は次のCLAUSEへと
gosh> *** ERROR: unbound variable: 処理が進みます。
Stack Trace:
_______________________________________
gosh> (else FORM |...|)
gosh> このフォームは、与えられる場合は最後のCLAUSEでなければなりません。
gosh> *** ERROR: unbound variable: 他の全てのCLAUSEが失敗した場合に、FORMが順に評価され、最後のFORMの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 値が
Stack Trace:
_______________________________________
gosh> rxmatch-case
gosh> の値として返されます。
gosh> else
gosh> CLAUSEが与えられず、かつ全てのCLAUSEが
gosh> *** ERROR: unbound variable: 失敗した場合の戻り値は未定義です。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 上の
Stack Trace:
_______________________________________
gosh> parse-date
gosh> の例は
gosh> rxmatch-case
gosh> を使うとより単純になります。
gosh> parse-date2
gosh> 6.12
gosh> *** ERROR: unbound variable: ベクタ
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 5355: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure hash-table-for-each>
gosh> *** ERROR: unbound variable: ht
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure hash-table-map>
gosh> *** ERROR: unbound variable: ht
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ハッシュテーブルHT内の全てのエントリについて、各エントリのキーと値を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |2つの引数として手続きPROCを呼びます。|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure hash-table-fold>
gosh> *** ERROR: unbound variable: ht
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: kons
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: knil
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ハッシュテーブルHT内の全てのエントリについてKONSを呼びます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: KONSには3つの引数が渡されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 各エントリのキーと値、および一つ前のKONSの返り値です。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 最初のKONSの呼び出しの時には、第3引数にKNILが渡されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 最後のKONSの返り値が
Stack Trace:
_______________________________________
gosh> hash-table-fold
gosh> の返り値となります。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr hash-table-keys>
gosh> *** ERROR: unbound variable: ht
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr hash-table-values>
gosh> *** ERROR: unbound variable: ht
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: それぞれ、ハッシュテーブルHT内の全てのキーまたは値をリストにして返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: その他のリストライブラリ::も参照して下さい。
Stack Trace:
_______________________________________
gosh> hash-table->alist
gosh> と
gosh> alist->hash-table
gosh> が定義されています。
gosh> 6.14
gosh> *** ERROR: unbound variable: ツリーマップ
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 5495: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: The
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: criteria
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> "closest"
gosh> *** ERROR: unbound variable: differ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: slightly
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: among
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: these
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: procedures
Stack Trace:
_______________________________________
gosh> tree-map-floor
gosh> finds
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: maximum
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: which
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: is
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: no
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: greater
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: than
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROBE
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: than
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROBE
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: strictly
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: less
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: than
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROBE
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: minimum
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: which
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: is
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: strictly
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: greater
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: than
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROBE.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr tree-map-floor-key>
gosh> *** ERROR: unbound variable: tree-map
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: probe
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OPTIONAL
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: fallback-key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr tree-map-ceiling-key>
gosh> *** ERROR: unbound variable: tree-map
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: probe
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OPTIONAL
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: fallback-key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr tree-map-predecessor-key>
gosh> *** ERROR: unbound variable: tree-map
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: probe
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OPTIONAL
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: fallback-key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr tree-map-successor-key>
gosh> *** ERROR: unbound variable: tree-map
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: probe
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OPTIONAL
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: fallback-key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Like
Stack Trace:
_______________________________________
gosh> tree-map-floor
gosh> etc.
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,but
"(stdin)":5509:,but

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: only
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: returns
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: found
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: entry
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: FALLBACK-KEY
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 5512: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr tree-map-floor-value>
gosh> *** ERROR: unbound variable: tree-map
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: probe
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OPTIONAL
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: fallback-value
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr tree-map-ceiling-value>
gosh> *** ERROR: unbound variable: tree-map
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: probe
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OPTIONAL
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: fallback-value
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr tree-map-predecessor-value>
gosh> *** ERROR: unbound variable: tree-map
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: probe
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OPTIONAL
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: fallback-value
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr tree-map-successor-value>
gosh> *** ERROR: unbound variable: tree-map
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: probe
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OPTIONAL
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: fallback-value
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Like
Stack Trace:
_______________________________________
gosh> tree-map-floor
gosh> etc.
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,but
"(stdin)":5521:,but

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: only
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: returns
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: value
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: found
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: entry
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: FALLBACK-VALUE
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 5524: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure tree-map-keys>
gosh> *** ERROR: unbound variable: tree-map
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure tree-map-values>
gosh> *** ERROR: unbound variable: tree-map
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: それぞれ、TREE-MAP内の全てのキーまたは値をリストにして返しま
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: す。返されるリストの要素はキーの昇順に並んでいます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure tree-map->alist>
gosh> *** ERROR: unbound variable: tree-map
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: TREE-MAP含まれる要素を連想リストにして返します。返される連
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 想リストのキーは昇順に並んでいます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure alist->tree-map>
gosh> *** ERROR: unbound variable: alist
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key=?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key<?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: KEY=?
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,KEY<?
"(stdin)":5535:,KEY<?

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: によって新たなtreemapを作成し、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 連想リストALISTに含まれる要素を追加した上で返します。
Stack Trace:
_______________________________________
gosh> 6.15
gosh> *** ERROR: unbound variable: Weak
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ポインタ
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 5554: unsupported #-syntax: #<
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: undef>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: gosh>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: v
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: proper list required for function application or macro use: (1 . 1)
"(stdin)":5556:(1 . 1)

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: gosh>
Stack Trace:
_______________________________________
gosh> #<undef>
gosh> *** READ-ERROR: Read error at "(stdin)":line 5558: unsupported #-syntax: #<
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: undef>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: gosh>
Stack Trace:
_______________________________________
gosh> #<undef>
gosh> *** READ-ERROR: Read error at "(stdin)":line 5560: unsupported #-syntax: #<
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: undef>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: gosh>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: v
Stack Trace:
_______________________________________
gosh> #f
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Builtin
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Class:
Stack Trace:
_______________________________________
gosh> #<class <weak-vector>>
gosh> *** ERROR: unbound variable: Weak
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ベクタのクラスです。
Stack Trace:
_______________________________________
gosh> <sequence>
gosh> と
gosh> <collection>
gosh> を継承しているので、
gosh> gauche.collection
gosh> (*Note コレクションフレームワーク::参照)
gosh> *** ERROR: unbound variable: と
Stack Trace:
_______________________________________
gosh> gauche.sequence
gosh> (*Note シーケンスフレームワーク::参照)
gosh> *** ERROR: unbound variable: も使えます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: coerce-to
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: weak
Stack Trace:
_______________________________________
gosh> #<subr vector>
gosh> *** ERROR: unbound variable: with
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: four
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: elements
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr make-weak-vector>
gosh> *** ERROR: unbound variable: size
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 大きさSIZEのweak
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ベクタを作成して返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr weak-vector-length>
gosh> *** ERROR: unbound variable: wvec
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: weak
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ベクタ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: WVECの大きさを返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr weak-vector-ref>
gosh> *** ERROR: unbound variable: wvec
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: k
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optioal
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: fallback
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: weak
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ベクタ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: WVECのK番目の要素を返します。
Stack Trace:
_______________________________________
gosh> weak-vector-ref
gosh> はKが負の値であったりベクタの長さより
gosh> *** ERROR: unbound variable: 大きかったりした場合はエラーを通知します。但し、省略可能な引数FALLBACK
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が与えられている場合はその値が返されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 該当する要素が既にガベージコレクトされていた場合、FALLBACKが
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 与えられていればそれが、そうでなければ
Stack Trace:
_______________________________________
gosh> #f
gosh> が返されます。
gosh> gauche.sequence
gosh> モジュールをロードしていれば、
gosh> *** ERROR: unbound variable: メソッド
Stack Trace:
_______________________________________
gosh> ref
gosh> も同じ目的で使えます。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr weak-vector-set!>
gosh> *** ERROR: unbound variable: wvec
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: k
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: obj
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: weak
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ベクタ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: WVECのK番目の要素をOBJに変更します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Kが負数であったりベクタの長さより大きい場合はエラーとなります。
Stack Trace:
_______________________________________
gosh> 6.16
gosh> *** ERROR: unbound variable: 制御
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 5895: unsupported #-syntax: #<
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: arity-at-least
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |0>|
Stack Trace:
_______________________________________
gosh> (#<arity-at-least 1>)
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 5896: unsupported #-syntax: #<
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: arity-at-least
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |1>|
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 5896: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure arity-at-least?>
gosh> *** ERROR: unbound variable: OBJ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OBJがarity-at-leastオブジェクトなら、真を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure arity-at-least-value>
gosh> *** ERROR: unbound variable: ARITY-AT-LEAST
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: arity-at-leastオブジェクトが表す必須引数の数を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure procedure-arity-includes?>
gosh> *** ERROR: unbound variable: PROC
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: K
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 手続きPROCが引数Kを取れる場合、
Stack Trace:
_______________________________________
gosh> #t
gosh> を返します。
gosh> *** ERROR: unbound variable: そうでなければ
Stack Trace:
_______________________________________
gosh> #f
gosh> を返します。
gosh> *** ERROR: unbound variable: |6.16.2|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 適用可能なオブジェクト
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 5996: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: APIはPLT
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Schemeから取りました。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr dynamic-wind>
gosh> *** ERROR: unbound variable: before
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: thunk
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: after
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: R5RS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: BEFORE、THUNKおよびAFTER
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は引数を取らない手続きです。
Stack Trace:
_______________________________________
gosh> dynamic-wind
gosh> はまずBEFOREを呼び出し、続いてTHUNKを呼び出し、
gosh> *** ERROR: unbound variable: 続いてAFTERを呼び出します。そしてTHUNKが返した値を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: もし
Stack Trace:
_______________________________________
gosh> dynamic-wind
gosh> のダイナミックスコープの外で捕捉された継続が
gosh> *** ERROR: unbound variable: THUNKの中で呼ばれることにより制御がTHUNKから飛び出した場合、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: THUNKの中でエラーが起こった場合などが考えられます
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: AFTERが呼ばれます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: もし、THUNKの中で捕捉された継続がDYNAMIC-WINDのダイナミックスコープの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 外で呼ばれることにより制御がTHUNKの中へ飛び込んだ場合、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: BEFOREが呼ばれます。
Stack Trace:
_______________________________________
gosh> (connect talk1 disconnect connect talk2 disconnect)
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: talk1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |6.16.4|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 多値
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 6198: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: _注意事項:_
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 一般的には、投げられたコンディションが特定の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: タイプであるかをチェックするのに
Stack Trace:
_______________________________________
gosh> is-a?
gosh> は使えません。
gosh> *** ERROR: unbound variable: コンディションが合成されたものである可能性があるからです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 合成されたコンディションについての
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 詳細は
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: コンディション::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を参照してください。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: もし、CLAUSE
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のどのテストも満されず、かつ
Stack Trace:
_______________________________________
gosh> else
gosh> 節があたえられて
gosh> *** ERROR: unbound variable: いなければ、その例外は
Stack Trace:
_______________________________________
gosh> guard
gosh> から「抜け」ます。すなわち、
gosh> guard
gosh> の外側のレベルあるいはトップレベルで処理されることになります。たとえば、
gosh> *** ERROR: unbound variable: 以下の
Stack Trace:
_______________________________________
gosh> guard
gosh> フォームでは、
gosh> <read-error>
gosh> と
gosh> <system-error>
gosh> としか処理できず、もし、本体が他のタイプのコンディション
gosh> *** ERROR: unbound variable: を投げてきたら、その外側のレベルで処理しなければなりません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: body
Stack Trace:
_______________________________________
gosh> guard
gosh> および他の低レベルの例外処理の構成についての詳細は
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 例外の処理::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を参照してください。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 自分のコードから例外を通知する
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |..............................|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 例外を通知する一般的な方法は
Stack Trace:
_______________________________________
gosh> raise
gosh> 手続きを使うことです。
gosh> *** ERROR: unbound variable: CONDITION
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: CONDITIONにはどんなオブジェクトでも渡すことができます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: それをどのように解釈するかはひとえに例外ハンドラにかかってます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: もし、コンディションとして整数があがってくるというのが判っていれば、
Stack Trace:
_______________________________________
gosh> guard
gosh> で以下のように捕捉することができます。
gosh> raised
gosh> *** ERROR: unbound variable: とはいうものの、
Stack Trace:
_______________________________________
gosh> <condition>
gosh> あるいはそのサブクラスのインスタンスを
gosh> *** ERROR: unbound variable: 使うのが好ましいというのが通例です。
Stack Trace:
_______________________________________
gosh> condition
gosh> マクロはコンディション
gosh> *** ERROR: unbound variable: オブジェクトを作成するのに使えます。以下の例は、いくつかのスロット値をもち
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: それらを発生させるコンディションの作りかたを示したものです。
Stack Trace:
_______________________________________
gosh> *** ERROR: An error occurred.
Stack Trace:
_______________________________________
gosh> *** SYSTEM-ERROR: A system error occurred.
Stack Trace:
_______________________________________
gosh> condition
gosh> マクロおよび、どのようなコンディションクラスが用意
gosh> *** ERROR: unbound variable: されているかの詳細については
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: コンディション::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を参照してください。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 最も一般的なコンディションのタイプはエラーコンディションなので、
Stack Trace:
_______________________________________
gosh> error
gosh> および
gosh> errorf
gosh> という便利な手続きが
gosh> *** ERROR: unbound variable: 用意されています。これらはメッセージ付きのエラーコンディションを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 生成し、それを発生させます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: obj
Stack Trace:
_______________________________________
  0  (integer? obj)
        At line 6261 of "(stdin)"
gosh> *** ERROR: unbound variable: x
Stack Trace:
_______________________________________
  0  (equal? x y)
        At line 6265 of "(stdin)"
gosh> *** ERROR: unbound variable: _注意事項:_
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: いくつかの言語での例外を投げる機構、たとえば、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Cl++やJavaの
Stack Trace:
_______________________________________
gosh> throw
gosh> はその継続を破棄します。これとは違い
gosh> *** ERROR: unbound variable: Schemeの
Stack Trace:
_______________________________________
gosh> raise
gosh> はその呼び出し元へ戻ることができます。もし、
gosh> raise
gosh> で元へもどらないで欲しいのなら、簡便な方法としては、
gosh> *** ERROR: unbound variable: 常にエラーコンディションの一つをわたるようにするというのがあります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: そうすると
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Gauche
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: では
Stack Trace:
_______________________________________
gosh> raise
gosh> は戻らないことを保証します。
gosh> raise
gosh> の詳細については、*Note
gosh> *** ERROR: unbound variable: 例外の通知::を参照してください。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 独自のコンディションを定義する
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |..............................|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 独自のコンディションクラスを定義することが可能で、そうすることで、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: アプリケーション固有の情報を例外が発生した点からハンドラへ渡すことが
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: できます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Gauche
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のフレームワーク
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-35
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: に適合させるためには、新しく定義する
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: コンディションクラスは組み込みの
Stack Trace:
_______________________________________
gosh> <condition>
gosh> クラスあるいは
gosh> *** ERROR: unbound variable: その子孫を継承し、また、メタクラス
Stack Trace:
_______________________________________
gosh> <condition-meta>
gosh> のインスタンスであることが望まれます。
gosh> *** ERROR: unbound variable: 可搬性を増すと同時に上の慣例を確実にするための方法のひとつは、
Stack Trace:
_______________________________________
gosh> define-condition-type
gosh> マクロを使うことです。これは、
gosh> SRFI-35
gosh> で定義されています。
gosh> myapp-error?
gosh> *** ERROR: unbound variable: これは、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Gauche内のクラス
Stack Trace:
_______________________________________
gosh> <myapp-err>
gosh> を定義するもので、
gosh> *** ERROR: unbound variable: このクラスには
Stack Trace:
_______________________________________
gosh> myapp-error?
gosh> という述語とアクセサのあるスロット
gosh> *** ERROR: unbound variable: があります。こうすれば、以下のようなコードで新しいコンディション
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 型が使えます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFIとの互換性が重要でないなら、Gaucheの拡張された
Stack Trace:
_______________________________________
gosh> error
gosh> 手続きを
gosh> *** ERROR: unbound variable: 使うと
Stack Trace:
_______________________________________
gosh> <error>
gosh> のサブタイプであるコンディションを投げるコードを
gosh> *** ERROR: unbound variable: より簡潔に書くことができます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: something-went-wrong
Stack Trace:
_______________________________________
  0  (something-went-wrong)
        At line 6321 of "(stdin)"
gosh> *** ERROR: unbound variable: Gauche
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のオブジェクトシステムでコンディション型がどのように実装されているかは
Stack Trace:
_______________________________________
gosh> define-condition-type
gosh> マクロの解説を参照してください。
gosh> *** ERROR: unbound variable: |6.17.2|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 例外の通知
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 8085: unsupported #-syntax: #<
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: port
Stack Trace:
_______________________________________
gosh> "foo.scm"
gosh> #<subr >>
gosh> *** READ-ERROR: Read error at "(stdin)":line 8085: dot in wrong context
Stack Trace:
_______________________________________
gosh> 7
gosh> *** READ-ERROR: Read error at "(stdin)":line 8085: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 8085: unsupported #-syntax: #<
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: port
Stack Trace:
_______________________________________
gosh> "bar.scm"
gosh> #<subr >>
gosh> *** READ-ERROR: Read error at "(stdin)":line 8085: dot in wrong context
Stack Trace:
_______________________________________
gosh> 18
gosh> *** READ-ERROR: Read error at "(stdin)":line 8085: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 8085: extra close parenthesis
Stack Trace:
_______________________________________
gosh> current-load-next
gosh> 現在のファイルがロードされた時点での、ファイルサーチパスの残りを返します。
gosh> *** ERROR: unbound variable: 例えば
Stack Trace:
_______________________________________
gosh> *load-path*
gosh> が
gosh> ("." "../lib" "/home/gauche/lib" "/share/gauche/lib")
gosh> で、
gosh> *** ERROR: unbound variable: あなたが
Stack Trace:
_______________________________________
gosh> foo.scm
gosh> をロードしたところ、それが
gosh> |../lib/|
gosh> 中に見つかったと
gosh> *** ERROR: unbound variable: しましょう。このとき、
Stack Trace:
_______________________________________
gosh> foo.scm
gosh> 中で
gosh> current-load-next
gosh> を呼べば
gosh> *** ERROR: invalid application: ("/home/gauche/lib" "/share/gauche/lib")
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が返されます。
Stack Trace:
_______________________________________
gosh> load
gosh> されていない状態で呼ばれた時は、これらの手続きはそれぞれ
gosh> #f
gosh> 、
gosh> ()
gosh> 、
gosh> ()
gosh> を返します。
gosh> *** ERROR: unbound variable: |6.20.2|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ダイナミックライブラリのロード
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 8197: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を指定します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列である場合にはライブラリの部分パス
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 8198: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 指定します。これはライブラリサーチパス以下で検索されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure library-fold>
gosh> *** ERROR: unbound variable: pattern
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: seed
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &keyword
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: paths
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: strict?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: allow-duplicates?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ライブラリ/モジュールファイルに対する基本イテレータ。この手続きは
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PATTERN
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: にマッチする
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Scheme
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のプログラムファイルを検索します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 検索は
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PATHS
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 8206: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: にリストされたディレクトリ以下でおこなわれます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: マッチしたファイル毎に、PROC
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が、そのマッチしたモジュール名あるいは
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ライブラリ名、そのプログラムファイルのフルパス、状態値、の3つの引数を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ともなって呼びだされます。SEEDは、初期状態値として使われ、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROC
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が返す値は次の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROC
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の呼出し時に状態値として使われます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 最後の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROC
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: から返された値は
Stack Trace:
_______________________________________
gosh> library-fold
gosh> の値として返ります。
gosh> *** ERROR: unbound variable: PATTERN
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: がシンボルでかつ、キーワード引数
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: STRICT?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が
Stack Trace:
_______________________________________
gosh> #t
gosh> (デフォルト値)
gosh> *** ERROR: unbound variable: であれば、この手続きは
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: あたえられたモジュール名のパターンにマッチするようにみえるファイル名に
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: たいして
Stack Trace:
_______________________________________
gosh> library-has-module?
gosh> を適用して、
gosh> *** ERROR: unbound variable: 本当にそのモジュールを実装しているファイルを見付けます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 大量のモジュールにマッチさせようとすると、時間がかる可能性があります。
Stack Trace:
_______________________________________
gosh> #f
gosh> を
gosh> *** ERROR: unbound variable: STRICT?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: に渡すことで、余分なチェックを回避できます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PATTERN
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が文字列だった場合、照合はファイル名に対してのみ行われ、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: STRICT?は無視されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: デフォルトでは、PATH
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 中の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PATTERN
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: にマッチする同じ名前をもつ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |2つ以上のファイルがあるばあい、PATH|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: に最初に出現したものだけが
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 採用されます。そのライブラリに対して、
Stack Trace:
_______________________________________
gosh> require
gosh> あるいは
gosh> use
gosh> を用いたをつかった場合に得られるのはこのファイルです。
gosh> *** ERROR: unbound variable: すべてのマッチしたファイルについて反復したければ、ALLOW-DUPLICATES?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: キーワード引数に
Stack Trace:
_______________________________________
gosh> #t
gosh> を渡します。
gosh> ((srfi-1 . "/opt/local/share/gauche/0.8.13/lib/srfi-1.scm"))
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: proper list required for function application or macro use: (srfi-1 . "../lib/srfi-1.scm")
"(stdin)":8230:((srfi-1 . "../lib/srfi-1.scm"))

Stack Trace:
_______________________________________
gosh> (("srfi-1" . "/opt/local/share/gauche/0.8.13/lib/srfi-1.scm"))
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: proper list required for function application or macro use: ("srfi-1" . "../lib/srfi-1.scm")
"(stdin)":8233:(("srfi-1" . "../lib/srfi-1.scm"))

Stack Trace:
_______________________________________
gosh> ((srfi-1 . "/opt/local/share/gauche/0.8.13/lib/srfi-1.scm"))
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: proper list required for function application or macro use: (srfi-1 . "/usr/share/gauche/0.7.1/lib/srfi-1.scm")
"(stdin)":8238:((srfi-1 . "/usr/share/gauche/0.7.1/ ...

Stack Trace:
_______________________________________
gosh> ()
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> ()
gosh> ()
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: proper list required for function application or macro use: ("srfi-19/read-tai" . "../lib/srfi-19/read-tai.scm")
"(stdin)":8247:(("srfi-19/read-tai" . "../lib/srfi- ...

Stack Trace:
_______________________________________
gosh> ((dbm.ndbm . "/opt/local/share/gauche/0.8.13/lib/dbm/ndbm.scm") (dbm.gdbm . "/opt/local/share/gauche/0.8.13/lib/dbm/gdbm.scm") (dbm.fsdbm . "/opt/local/share/gauche/0.8.13/lib/dbm/fsdbm.scm"))
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: proper list required for function application or macro use: (dbm.cdb . "/usr/share/gauche/0.7.4.2/lib/dbm/cdb.scm")
"(stdin)":8252:((dbm.cdb . "/usr/share/gauche/0.7.4 ...

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure library-map>
gosh> *** ERROR: unbound variable: pattern
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &keyword
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: paths
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: allow-duplicates?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: strict?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure library-for-each>
gosh> *** ERROR: unbound variable: pattern
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &keyword
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: paths
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: allow-duplicates?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: strict?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: マッチしたライブラリ/モジュール上のイテレータの
Stack Trace:
_______________________________________
gosh> map
gosh> 版および
gosh> for-each
gosh> 版。照合操作とキーワード引数の詳細については上述の
gosh> library-fold
gosh> を参照してください。
gosh> *** ERROR: unbound variable: PROCは、マッチしたモジュール/ファイル名と、そのファイルの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: フルパスの
Stack Trace:
_______________________________________
gosh> 2
gosh> *** ERROR: unbound variable: つの引数をうけとります。
Stack Trace:
_______________________________________
gosh> library-for-each
gosh> は
gosh> *** ERROR: unbound variable: 結果を捨てます。
Stack Trace:
_______________________________________
gosh> ((srfi-4 "/opt/local/share/gauche/0.8.13/lib/srfi-4.scm"))
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: srfi-4
Stack Trace:
_______________________________________
  0  (srfi-4 "/usr/share/gauche/0.7.1/lib/srfi-4.scm")
        At line 8271 of "(stdin)"
gosh> (dbm.fsdbm dbm.gdbm dbm.ndbm)
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: dbm.ndbm
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure library-exists?>
gosh> *** ERROR: unbound variable: mod/path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &keyword
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: paths
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: force-search?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: strict?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: MOD/PATH
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: で指定されたライブラリあるいはモジュールを検索し、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: もしあれば、真値を返します。キーワード引数
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PATHS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: および
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: STRICT?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は
Stack Trace:
_______________________________________
gosh> library-fold
gosh> のそれと同じ意味です。
gosh> *** ERROR: unbound variable: 上述のイテレータ手続きとはちがい、この手続きは呼び出しの過程で
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 最初に既にロードされているライブラリおよびモジュールをチェックします。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: もしそのときに
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: MOD/PATH
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を見つけたら、真値を返し、ファイル
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: システムを見にいくことはありません。キーワード引数
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: FORCE-SEARCH?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: に
Stack Trace:
_______________________________________
gosh> #t
gosh> を渡せば、すでにロードされいるライブラリおよびモジュール
gosh> *** ERROR: unbound variable: のチェックはスキップされます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure library-has-module?>
gosh> *** ERROR: unbound variable: path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: module
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PATH
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: で指定したファイルが存在し、かつ、
Stack Trace:
_______________________________________
gosh> module
gosh> で名指しされた
gosh> *** ERROR: unbound variable: モジュールが実装されている場合でその場合に限り、
Stack Trace:
_______________________________________
gosh> #t
gosh> を返します。
gosh> *** ERROR: unbound variable: PATH
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は実際のファイル名でなければなりません。
Stack Trace:
_______________________________________
gosh> #f
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> #t
gosh> *** ERROR: unbound variable: この手続きは典型的なソースコードの配置を仮定して、与えられたファイルが
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: そのモジュールを実装しているかどうかを決定します。すなわち、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: まずそのコードのフォームを読み、与えられたモジュールを定義している
Stack Trace:
_______________________________________
gosh> define-module
gosh> フォームかどうかを見ます。
gosh> 6.21
gosh> *** ERROR: unbound variable: 比較とソート
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 8352: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: もあれば、新しいSchemeオブジェクトを導入して
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 抽象化を行っているものもあります。Gaucheでは、既存のAPIのどれかを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: そのまま真似るのではなく、2つのレイヤを提供することにしました。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: この章で述べられる低レベルレイヤは、OSのインタフェースに似せたものを実装します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: その上に、既存のシステムと互換性のある高レベルのインタフェースが実装されます。
Stack Trace:
_______________________________________
gosh> sys-
gosh> NAMEという名前を持つ手続きは、多くの場合、
gosh> *** ERROR: unbound variable: システムコールNAMEに対応しています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 可能な限り、インタフェースが似るようにしました。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: なお、Gaucheはシステムコールがシグナルによって割り込まれた場合、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: システムコールをリスタートします。詳しくは*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: シグナル::を参照して下さい。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Cによるシステムプログラミングに慣れている方は、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: CとSchemeの関数の対応::も参考にして下さい。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Cの標準ライブラリとGaucheの手続きとの対応が示してあります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |6.22.1|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: プログラムの終了
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 8544: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 8544: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を除く文字にマッチします。入力文字列のコンポーネントがピリオドではじま
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: るような文字列の場合にはマッチしません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 先頭以外の場所では、0個以上の文字の列にマッチします。
Stack Trace:
_______________________________________
gosh> **
gosh> コンポーネントが
gosh> **
gosh> だけの場合、これは
gosh> *
gosh> にマッチする0個以上の
gosh> *** ERROR: unbound variable: コンポーネントにマッチします。例えば
Stack Trace:
_______________________________________
gosh> src/**/*.h
gosh> は
gosh> *** ERROR: unbound variable: 次のようなパターン全てにマッチします。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: src/*.h
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: src/*/*.h
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: src/*/*/*.h
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: src/*/*/*/*.h
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> ?
gosh> コンポーネントの先頭にあらわれた場合、ピリオド
gosh> *** READ-ERROR: Read error at "(stdin)":line 8561: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 8561: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 以外の一文字に
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: マッチします。先頭以外の場所では任意の一文字にマッチします。
Stack Trace:
_______________________________________
gosh> (chars)
gosh> 文字の集合を指定します。その集合に含まれる文字のどれかにマッチします。
gosh> *** ERROR: unbound variable: charsの構文はGaucheの文字集合を表す構文と同じです
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字集合::参照
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。伝統的なグロブとの互換性のために、
Stack Trace:
_______________________________________
gosh> !
gosh> 文字をつかって、補集合で文字集合を表わすこともできるようになっています。
gosh> *** ERROR: unbound variable: すなわち、
Stack Trace:
_______________________________________
gosh> (!abc)
gosh> は
gosh> (^abc)
gosh> と同じです。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure glob-fold>
gosh> *** ERROR: unbound variable: pattern
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: seed
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &keyword
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: separator
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: folder
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: これはグロブ関数の低レベル版です。実際GLOBは以下のように書いたの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: と同じです。
Stack Trace:
_______________________________________
gosh> glob
gosh> *** ERROR: unbound variable: PATTERN、SEPARATORおよびLISTERの意味を前述のものと同
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: じです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PATTERNにパス名ごとに
Stack Trace:
_______________________________________
gosh> glob-fold
gosh> はPROCをパス名とシー
gosh> *** ERROR: unbound variable: ド値で呼びます。最初のシード値はSEEDで、PROCが返す値は次の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: シード値になります。最後のPROCの呼び出し結果は
Stack Trace:
_______________________________________
gosh> glob-fold
gosh> の
gosh> *** ERROR: unbound variable: 結果となります。マッチするパス名が存在しないときは、PROCは呼ばれ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ずに、SEEDが返ります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure make-glob-fs-fold>
gosh> *** ERROR: unbound variable: &keyword
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: root-path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: current-path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: これは
Stack Trace:
_______________________________________
gosh> glob-fold
gosh> や
gosh> glob
gosh> のFOLDERキーワード引数に
gosh> *** ERROR: unbound variable: 渡せる形の手続きを作るユーティリティ手続きです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 引数を渡さなければ、
Stack Trace:
_______________________________________
gosh> glob-fold
gosh> や
gosh> glob
gosh> がデフォルトで使うのと
gosh> *** ERROR: unbound variable: 同じ手続きが返ります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: キーワード引数ROOT-PATHおよびCURRENT-PATHはそれぞれ、
Stack Trace:
_______________________________________
gosh> glob-fold
gosh> が探索を開始するディレクトリを指定します。
gosh> *** ERROR: unbound variable: gosh>
Stack Trace:
_______________________________________
gosh> ()
gosh> *** ERROR: invalid application: ("/tmp/x.scm" "/tmp/y.scm")
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: gosh>
Stack Trace:
_______________________________________
gosh> ()
gosh> *** ERROR: invalid application: ("/tmp/x.scm" "/tmp/y.scm")
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: gosh>
Stack Trace:
_______________________________________
gosh> ()
gosh> *** ERROR: invalid application: ("/tmp/x.scm" "/tmp/y.scm")
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: パスがディレクトリかどうかチェックする方法は、*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ファイルの状態::を参照してください。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |6.22.3.2|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ディレクトリ操作
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |.........................|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-remove>
gosh> *** ERROR: unbound variable: filename
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: POSIX
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: FILENAMEがファイルであればそれを消去します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: システムによってはFILENAMEが空のディレクトリであっても動作しますが、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 移植性を気にする場合はその動作に依存しない方が良いでしょう。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-rename>
gosh> *** ERROR: unbound variable: old
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: new
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: POSIX
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ファイルOLDをNEWにリネームします。新しい名前は
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 古い名前と異なるディレクトリにあってもかまいませんが、両者は同じデバイス上に
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: なければなりません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-tmpnam>
gosh> *** ERROR: unbound variable: POSIX
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ユニークなファイル名を作成して返します。この関数はPOSIXに含まれていますが、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: セキュリティ上の問題が指摘されており、使わない方が良いとされています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 可能なら下にあげる
Stack Trace:
_______________________________________
gosh> sys-mkstemp
gosh> を使って下さい。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-mkstemp>
gosh> *** ERROR: unbound variable: template
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ユニークな名前を持つファイルを作成してオープンし、オープンされたポートとファイル名の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 二つの値を返します。ファイルは排他的に作成されるため、レースコンディションは起こりません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: TMPNAMEはファイル名のプレフィックスに使われます。Unixのmkstempと違って、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: パディングキャラクタをつける必要はありません。ファイルは書き込み用としてオープンされ、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: パーミッションは600にセットされます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-link>
gosh> *** ERROR: unbound variable: existing
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: new
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: POSIX
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 既存のファイルEXISTINGに対し、NEWという名のハードリンクを作成します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-unlink>
gosh> *** ERROR: unbound variable: pathname
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: POSIX
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PATHNAMEで示されるファイルを消去します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PATHNAMEはディレクトリであってはなりません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: もし消去に成功したら
Stack Trace:
_______________________________________
gosh> #t
gosh> が、PATHNAMEが存在しなければ
gosh> #f
gosh> が返されます。
gosh> *** ERROR: unbound variable: 他の場合はエラーが通知されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-symlink>
gosh> *** ERROR: unbound variable: existing
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: new
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: EXISTINGを指すNEWという名のシンボリックを作成します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: シンボリックリンクをサポートしないシステムでは、この手続きは定義されません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-readlink>
gosh> *** ERROR: unbound variable: path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PATHで示されるファイルがシンボリックリンクならば、それが指すパスを返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: もしPATHが存在しなかったり、シンボリックリンクでなければ、エラーが通知されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: シンボリックリンクをサポートしないシステムでは、この手続きは定義されません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-mkdir>
gosh> *** ERROR: unbound variable: pathname
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: mode
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: POSIX
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ディレクトリPATHNAMEをモードMODEで作成します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: MODEはさらにumaskでマスクされることに注意して下さい；下の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PATHNAMEの親ディレクトリは存在して、プロセスが書き込めるようになっていなければ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: なりません。中間のディレクトリも一度に作成するには、
Stack Trace:
_______________________________________
gosh> file.util
gosh> の
gosh> make-directory*
gosh> が使えます
gosh> *** ERROR: unbound variable: ディレクトリユーティリティ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-rmdir>
gosh> *** ERROR: unbound variable: pathname
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: POSIX
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ディレクトリPATHNAMEを消去します。ディレクトリは空でなければなりません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ディレクトリの内容も一緒に消去するには、
Stack Trace:
_______________________________________
gosh> file.util
gosh> の
gosh> remove-directory*
gosh> が使えます
gosh> *** ERROR: unbound variable: ディレクトリユーティリティ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-umask>
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: mode
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: POSIX
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: umaskをMODEにセットします。変更される前のumaskを返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: MODEが省略されるか
Stack Trace:
_______________________________________
gosh> #f
gosh> が渡された場合、
gosh> *** ERROR: unbound variable: 現在のumaskを変更せずにその値を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: umaskについては
Stack Trace:
_______________________________________
gosh> man
gosh> *** ERROR: unbound variable: umask
Stack Trace:
_______________________________________
gosh> を参照してください。
gosh> *** ERROR: unbound variable: |6.22.3.3|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: パス名
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...............|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 高レベルのAPIに関しては*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: パスネームユーティリティ::も参照して下さい。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-normalize-pathname>
gosh> *** ERROR: unbound variable: pathname
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &keyword
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: absolute
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: expand
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: canonicalize
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 与えられたキーワード引数によってPATHNAMEを以下のように変換します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: キーワード引数は同時に複数指定できます。
Stack Trace:
_______________________________________
gosh> absolute
gosh> このキーワード引数に真の値が与えられて、PATHNAMEが絶対パスでない場合、
gosh> *** ERROR: unbound variable: PATHNAMEの前にプロセスのワーキングディレクトリを足して絶対パスにします。
Stack Trace:
_______________________________________
gosh> expand
gosh> このキーワード引数に真の値が与えられて、PATHNAMEが
gosh> `~
gosh> 'で始まっていた
gosh> *** ERROR: unbound variable: 場合、以下のように展開されます。
Stack Trace:
_______________________________________
gosh> #<subr *>
gosh> *** ERROR: unbound variable: PATHNAMEが
Stack Trace:
_______________________________________
gosh> "`~'"
gosh> *** ERROR: unbound variable: のみであるか、または
Stack Trace:
_______________________________________
gosh> "`~/'"
gosh> *** ERROR: unbound variable: で始まっている
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 場合、文字
Stack Trace:
_______________________________________
gosh> "`~'"
gosh> *** ERROR: unbound variable: が現在のプロセスのユーザのホームディレクトリに置き換えられます。
Stack Trace:
_______________________________________
gosh> #<subr *>
gosh> *** ERROR: unbound variable: 上記以外の場合、
Stack Trace:
_______________________________________
gosh> `~
gosh> '以降、
gosh> `/
gosh> 'かPATHNAMEの終端までの文字列
gosh> *** ERROR: unbound variable: がユーザ名とみなされ、そのユーザのホームディレクトリに置換されます。もし該当するユーザが
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: いなければエラーとなります。
Stack Trace:
_______________________________________
gosh> canonicalize
gosh> パス名から
gosh> "`.'"
gosh> *** ERROR: unbound variable: や
Stack Trace:
_______________________________________
gosh> "`..'"
gosh> *** ERROR: unbound variable: を除き、単純化します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: この操作は実際のファイルシステムを参照せずに行われます。元のパス名がディレクトリへの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: シンボリックリンクを含んでいた場合、単純化されたパス名は正しくないかもしれません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-basename>
gosh> *** ERROR: unbound variable: pathname
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-dirname>
gosh> *** ERROR: unbound variable: pathname
Stack Trace:
_______________________________________
gosh> sys-basename
gosh> は与えられたパスのベース名、すなわち最後のコンポーネントを返します。
gosh> sys-dirname
gosh> は与えられたパスのディレクトリ名、すなわち最後のコンポーネント以外の
gosh> *** ERROR: unbound variable: コンポーネントを返します。PATHNAMEの末尾が
Stack Trace:
_______________________________________
gosh> `/
gosh> 'である場合、その文字は
gosh> *** ERROR: unbound variable: 無視されます。
Stack Trace:
_______________________________________
gosh> "bar.z"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "bar.z"
gosh> "coo.scm"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "coo.scm"
gosh> "y"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "y"
gosh> "foo/bar"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "foo/bar"
gosh> "."
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "."
gosh> "x"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "x"
gosh> *** ERROR: unbound variable: この手続きはPATHNAMEが存在するかどうかはチェックしません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 特殊なケース：
Stack Trace:
_______________________________________
gosh> ""
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> ""
gosh> "."
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "."
gosh> ""
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> ""
gosh> "/"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "/"
gosh> *** ERROR: unbound variable: 註：このふるまいはPerlの
Stack Trace:
_______________________________________
gosh> basename
gosh> および
gosh> dirname
gosh> と同様です。
gosh> *** ERROR: unbound variable: システムによっては、コマンドの
Stack Trace:
_______________________________________
gosh> basename
gosh> は
gosh> "/"
gosh> に対して
gosh> "/"
gosh> を、
gosh> "."
gosh> に対して
gosh> "."
gosh> を返すものがあります。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-realpath>
gosh> *** ERROR: unbound variable: pathname
Stack Trace:
_______________________________________
gosh> sys-realpath
gosh> は
gosh> "`.'"
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,"`..'"
"(stdin)":8728:,"`..'"

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: およびシンボリックリン
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: クを含まないPATHNAMEの絶対パスを返します。システムがrealpath
Stack Trace:
_______________________________________
gosh> *** ERROR: invalid application: (3)
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: をサポートしていない場合はエラーが通知されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |6.22.3.4|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ファイルの状態
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |.......................|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 高レベルのAPIに関しては*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ファイル属性ユーティリティ::も参照して下さい。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure file-exists?>
gosh> *** ERROR: unbound variable: path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure file-is-regular?>
gosh> *** ERROR: unbound variable: path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure file-is-directory?>
gosh> *** ERROR: unbound variable: path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: それぞれ、PATHが存在するか、存在してそれがレギュラーファイルであるか、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 存在してそれがディレクトリであれば
Stack Trace:
_______________________________________
gosh> #t
gosh> を返します。
gosh> *** ERROR: unbound variable: これらの手続きは便利であり、STkとの互換性もあるので定義されていますが、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 実体は下に説明されている低レベル手続きの上に作成されています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Builtin
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Class:
Stack Trace:
_______________________________________
gosh> #<class <sys-stat>>
gosh> *** ERROR: unbound variable: ファイルシステム内のエントリの属性を表す、
Stack Trace:
_______________________________________
gosh> struct
gosh> *** ERROR: unbound variable: stat
Stack Trace:
_______________________________________
gosh> のラッパー
gosh> *** ERROR: unbound variable: オブジェクトです。以下に示す読みだし専用のスロットを持ちます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Instance
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <sys-stat>:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: type
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ファイルのタイプを示すシンボルです。
Stack Trace:
_______________________________________
gosh> regular
gosh> 通常のファイル
gosh> directory
gosh> ディレクトリ
gosh> character
gosh> キャラクタデバイス
gosh> block
gosh> ブロックデバイス
gosh> fifo
gosh> FIFO
gosh> symlink
gosh> シンボリックリンク
gosh> socket
gosh> ソケット
gosh> *** ERROR: unbound variable: 以上のどれにも当てはまらない場合は
Stack Trace:
_______________________________________
gosh> #f
gosh> が返されます。
gosh> *** ERROR: unbound variable: 注：いくつかのオペレーティングシステムでは
Stack Trace:
_______________________________________
gosh> socket
gosh> ファイルタイプを
gosh> fifo
gosh> と区別せず、どちらに対しても
gosh> fifo
gosh> を返します。
gosh> *** ERROR: unbound variable: ポータブルなプログラムを書くときは注意して下さい。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Instance
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <sys-stat>:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: perm
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: パーミッションビットマスク。
Stack Trace:
_______________________________________
gosh> "mode"
gosh> *** ERROR: unbound variable: スロットの下位9ビットと同じですが、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 便利なので独立したスロットとして提供されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Instance
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <sys-stat>:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: mode
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Instance
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <sys-stat>:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ino
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Instance
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <sys-stat>:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: dev
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Instance
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <sys-stat>:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: rdev
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Instance
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <sys-stat>:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: nlink
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Instance
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <sys-stat>:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uid
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Instance
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <sys-stat>:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: gid
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Instance
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <sys-stat>:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: size
Stack Trace:
_______________________________________
gosh> struct
gosh> *** ERROR: unbound variable: stat
Stack Trace:
_______________________________________
gosh> の該当するフィールドの値。正確な整数です。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Instance
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <sys-stat>:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: atime
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Instance
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <sys-stat>:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: mtime
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Instance
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <sys-stat>:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ctime
Stack Trace:
_______________________________________
gosh> struct
gosh> *** ERROR: unbound variable: stat
Stack Trace:
_______________________________________
gosh> の該当するフィールドの値を、Unix
gosh> *** ERROR: unbound variable: Epochからの秒数で。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-stat>
gosh> *** ERROR: unbound variable: path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-fstat>
gosh> *** ERROR: unbound variable: port-or-fd
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: POSIX
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 与えられたパス名PATH、またはポートかファイルディスクリプタ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PORT-OR-FDで示されるファイルの情報を
Stack Trace:
_______________________________________
gosh> <sys-stat>
gosh> オブジェクトで
gosh> *** ERROR: unbound variable: 返します。
Stack Trace:
_______________________________________
gosh> sys-stat
gosh> は、PATHがシンボリックリンクであった場合は
gosh> *** ERROR: unbound variable: リンクの指す先のファイルに関する情報を返します。
Stack Trace:
_______________________________________
gosh> sys-fstat
gosh> は、PORT-OR-FDがファイルに関係ないポートであった
gosh> *** ERROR: unbound variable: 場合は
Stack Trace:
_______________________________________
gosh> #f
gosh> を返します。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-lstat>
gosh> *** ERROR: unbound variable: path
Stack Trace:
_______________________________________
gosh> sys-stat
gosh> と同じですが、PATHがシンボリックリンクであった
gosh> *** ERROR: unbound variable: 場合はリンクそのものの情報を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: gosh>
Stack Trace:
_______________________________________
gosh> *** SYSTEM-ERROR: stat failed for gauche.h: No such file or directory
Stack Trace:
_______________________________________
  0  (sys-stat "gauche.h")
        At line 8802 of "(stdin)"
gosh> *** READ-ERROR: Read error at "(stdin)":line 8803: unsupported #-syntax: #<
Stack Trace:
_______________________________________
gosh> #<class <sys-stat>>
gosh> *** ERROR: unbound variable: |0x815af70>|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: is
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: an
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: instance
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: class
Stack Trace:
_______________________________________
gosh> #<class <sys-stat>>
gosh> *** ERROR: unbound variable: slots:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: type
Stack Trace:
_______________________________________
gosh> :
gosh> *** ERROR: unbound variable: regular
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: perm
Stack Trace:
_______________________________________
gosh> :
gosh> 420
gosh> *** ERROR: unbound variable: mode
Stack Trace:
_______________________________________
gosh> :
gosh> 33188
gosh> *** ERROR: unbound variable: ino
Stack Trace:
_______________________________________
gosh> :
gosh> 845140
gosh> *** ERROR: unbound variable: dev
Stack Trace:
_______________________________________
gosh> :
gosh> 774
gosh> *** ERROR: unbound variable: rdev
Stack Trace:
_______________________________________
gosh> :
gosh> 0
gosh> *** ERROR: unbound variable: nlink
Stack Trace:
_______________________________________
gosh> :
gosh> 1
gosh> *** ERROR: unbound variable: uid
Stack Trace:
_______________________________________
gosh> :
gosh> 400
gosh> *** ERROR: unbound variable: gid
Stack Trace:
_______________________________________
gosh> :
gosh> 100
gosh> *** ERROR: unbound variable: size
Stack Trace:
_______________________________________
gosh> :
gosh> 79549
gosh> *** ERROR: unbound variable: atime
Stack Trace:
_______________________________________
gosh> :
gosh> 1020155914
gosh> *** ERROR: unbound variable: mtime
Stack Trace:
_______________________________________
gosh> :
gosh> 1020152005
gosh> *** ERROR: unbound variable: ctime
Stack Trace:
_______________________________________
gosh> :
gosh> 1020152005
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure sys-stat->mode>
gosh> *** ERROR: unbound variable: stat
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure sys-stat->ino>
gosh> *** ERROR: unbound variable: stat
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure sys-stat->dev>
gosh> *** ERROR: unbound variable: stat
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure sys-stat->rdev>
gosh> *** ERROR: unbound variable: stat
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure sys-stat->nlink>
gosh> *** ERROR: unbound variable: stat
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure sys-stat->size>
gosh> *** ERROR: unbound variable: stat
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure sys-stat->uid>
gosh> *** ERROR: unbound variable: stat
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure sys-stat->gid>
gosh> *** ERROR: unbound variable: stat
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure sys-stat->atime>
gosh> *** ERROR: unbound variable: stat
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure sys-stat->mtime>
gosh> *** ERROR: unbound variable: stat
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure sys-stat->ctime>
gosh> *** ERROR: unbound variable: stat
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure sys-stat->file-type>
gosh> *** ERROR: unbound variable: stat
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Deprecated*.
Stack Trace:
_______________________________________
gosh> <sys-stat>
gosh> オブジェクトの情報にアクセスするには
gosh> slot-ref
gosh> を
gosh> *** ERROR: unbound variable: 使って下さい。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-access>
gosh> *** ERROR: unbound variable: pathname
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: amode
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: POSIX
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PATHNAMEへのアクセスが
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: MODEに示されるモードで許可されているかどうかを示す真偽値を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: この手続きは、suid/sgidプログラムで使われるとエラーとなります
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 下記註参照
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: MODEは以下に示す定数のコンビネーション
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: logical
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: です。
Stack Trace:
_______________________________________
gosh> R_OK
gosh> PATHNAMEをカレントユーザが読み出し可能かどうか
gosh> W_OK
gosh> PATHNAMEへカレントユーザが書き込み可能かどうか
gosh> X_OK
gosh> PATHNAMEをカレントユーザが実行可能かどうか
gosh> *** ERROR: unbound variable: ディレクトリの場合はサーチ可能かどうか
Stack Trace:
_______________________________________
gosh> F_OK
gosh> PATHNAMEのパーミッションフラグにかかわらず、PATHNAMEが
gosh> *** ERROR: unbound variable: 存在するかどうか
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 但しPATHNAMEがあるディレクトリの読みだし許可は必要
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: _註:_
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: access
Stack Trace:
_______________________________________
gosh> *** ERROR: invalid application: (2)
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は、suid/sgidプログラム中で
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 実ユーザの権限を確かめるために使われた場合、セキュリティホールと
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: なります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-chmod>
gosh> *** ERROR: unbound variable: path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: mode
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-fchmod>
gosh> *** ERROR: unbound variable: port-or-fd
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: mode
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 名前PATHを持つ、もしくはPORT-OR-FDで指定される
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ファイルのパーミッションビットをMODEに変更します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: MODEは小さな正の正確な整数で、POSIXスタイルのパーミッションビットマスク
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: でなければなりません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-chown>
gosh> *** ERROR: unbound variable: path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: owner-id
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: group-id
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ファイルPATHのオーナーとグループをOWNER-IDとGRUOP-ID
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: で示されるものに変更します。OWNER-IDとGRUOP-IDは正確な整数で
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: なければなりません。どちらかに-1が渡された場合は、対応する情報は変更されません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-utime>
gosh> *** ERROR: unbound variable: path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: atime
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: mtime
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ファイルのアクセスタイムと変更タイムをATIMEとMTIMEが示す
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 値にセットします。ATIMEとMTIMEが省略された場合は現在の時刻が
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 使われます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ファイル操作::の
Stack Trace:
_______________________________________
gosh> touch-file
gosh> も参照して下さい。
gosh> *** ERROR: unbound variable: |6.22.3.5|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 他のファイル操作
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |.........................|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-chdir>
gosh> *** ERROR: unbound variable: dir
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: POSIX
Stack Trace:
_______________________________________
gosh> chdir
gosh> *** ERROR: invalid application: (2)
Stack Trace:
_______________________________________
gosh> へのインタフェースです。
gosh> current-directory
gosh> (*Note ディレクトリユーティリティ::)
gosh> *** ERROR: unbound variable: も参照して下さい。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-pipe>
gosh> *** ERROR: unbound variable: &keyword
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: buffering
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: POSIX
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: パイプを作り、ポートを2つ返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 最初に返されるポートは入力ポートで、2番目に返されるポートは出力ポートです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 出力ポートへ書き出したデータは、入力ポートから読み込めます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: BUFFERINGは
Stack Trace:
_______________________________________
gosh> :full
gosh> 、
gosh> :line
gosh> 、
gosh> :none
gosh> のいずれかで、
gosh> *** ERROR: unbound variable: パイプ上に開かれたポートのバッファリングモードを指定します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: バッファリングモードの詳細については、*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ファイルポート::を参照して下さい。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 通常のケースでは、デフォルトのモードで間に合うでしょう。
Stack Trace:
_______________________________________
gosh> "abc"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "abc"
gosh> *** ERROR: unbound variable: 注意:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 戻り値はバージョン0.3.15から変更されています。それまでは、
Stack Trace:
_______________________________________
gosh> sys-pipe
gosh> は2つのポートのリストを返します。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-mkfifo>
gosh> *** ERROR: unbound variable: path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: mode
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: POSIX
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 名前がPATHでモードがMODEのFIFO
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 名前付きパイプ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 作ります。MODEはファイルのモードを表す正の正確整数でなければ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: なりません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-isatty>
gosh> *** ERROR: unbound variable: port-or-fd
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: POSIX
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PORT-OR-FDはポートか整数のファイルディスクリプタです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ポートがコンソールに接続されていれば
Stack Trace:
_______________________________________
gosh> #t
gosh> を、そうでなければ
gosh> #f
gosh> を
gosh> *** ERROR: unbound variable: 返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-ttyname>
gosh> *** ERROR: unbound variable: port-or-fd
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: POSIX
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PORT-OR-FDはポートか整数のファイルディスクリプタです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ポートに接続された端末の名前か、ポートが端末に接続されていなければ
Stack Trace:
_______________________________________
gosh> #f
gosh> を返します。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-truncate>
gosh> *** ERROR: unbound variable: path
Stack Trace:
_______________________________________
gosh> #<subr length>
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr sys-ftruncate>
gosh> *** ERROR: unbound variable: port-or-fd
Stack Trace:
_______________________________________
gosh> #<subr length>
gosh> *** ERROR: unbound variable: POSIX
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PATHあるいはPORT-OR-FDによって指定される通常ファイルの長さを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: LENGTHにします。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ファイルがLENGTHより長かった場合、余分なデータは捨てられます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ファイルがLENGTHより短かった場合、残りの部分にはゼロが詰められます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |6.22.4|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Unixのグループとユーザ
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 9126: unsupported #-syntax: #<
Stack Trace:
_______________________________________
gosh> #<closure sys-sigset>
gosh> ()
gosh> #<subr >>
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure sys-sigset>
gosh> *** ERROR: unbound variable: signal
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SIGNAL
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...をメンバーとする|
Stack Trace:
_______________________________________
gosh> <sys-sigset>
gosh> の
gosh> *** ERROR: unbound variable: インスタンスを作成して返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 各SIGNALにはシグナル番号、他の
Stack Trace:
_______________________________________
gosh> <sys-sigset>
gosh> オブジェクト、あるいは
gosh> #t
gosh> を渡すことができます。
gosh> #t
gosh> を渡した場合は全てのシグナルが
gosh> *** ERROR: unbound variable: 対象となります。
Stack Trace:
_______________________________________
gosh> #<sys-sigset [HUP|INT]>
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 9135: unsupported #-syntax: #<
Stack Trace:
_______________________________________
gosh> #<closure sys-sigset>
gosh> *** READ-ERROR: Read error at "(stdin)":line 12051: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: があります。たとえ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ばよく知られたRFC2822のメッセージフォーマットを処理するには
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: RFC822メッセージ形式::を見てください。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 表形式のデータを交換するのにもっとも便利な方法は表の一行をプレーンテキ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ストの一行に対応させることです。そしてカラムは特定の文字で区切ります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: たとえば、コンマで区切ります。これらの解析と書き出し用の基本手続につい
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ては*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: CSVテーブル::を見てください。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 今どきのビジネスユーザはXMLを欲しがるというのですか。いいでしょう。まぁ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 彼らが欲しいのは尖った括弧のえらい冗長なS式なんですから、XMLをS式と
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: して読み込んで、自家籠中の
Stack Trace:
_______________________________________
gosh> #<subr car>
gosh> *** ERROR: unbound variable: とか
Stack Trace:
_______________________________________
gosh> #<subr cdr>
gosh> *** ERROR: unbound variable: とか
Stack Trace:
_______________________________________
gosh> #<subr map>
gosh> *** ERROR: unbound variable: でちょちょいと処理し
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: てえらい冗長な尖った括弧で書き出せばいいですよね。
Stack Trace:
_______________________________________
gosh> sxml.ssax
gosh> モジュール
gosh> *** ERROR: unbound variable: 関数的なXMLパーザ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: はSAX
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: XMLパーザ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の実装です。これを使えば、おてがるにXMLをパーズしたり処理したり、ある
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: いはまた、SXML
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: S式XML
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: に変換することもできます。SXPath
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: S式
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を使ってSXMLクエリを発行することもでき
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ます。SXMLシリアライザを使えば、すべての種類のXMLやHTMLをはきだすこと
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: もできます
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SXMLからXMLとXHTMLのシリアライゼーション::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: さまざまなファイルフォーマットを処理するルーチンを
Stack Trace:
_______________________________________
gosh> file.*
gosh> という
gosh> *** ERROR: unbound variable: モジュールで使えるようにしようという計画はあるのですが、まだなにも準備
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: できていません。ひとつ自分で書いてやろうという人がいたら是非おねがいし
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: たいので、おしらせ下さい。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |8.1.4|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ライブラリディレクトリ
Stack Trace:
_______________________________________
gosh> #<subr ->
gosh> *** ERROR: unbound variable: ファイル
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 12141: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: と同様、バイト入出力のプリミティブ
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 12142: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: も含んでいます
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: データの読み込み::、*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 中間層としては、
Stack Trace:
_______________________________________
gosh> binary.io
gosh> (*Note バイナリI/O::)
gosh> *** ERROR: unbound variable: モジュールには
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: オプションでエンディアンを指定できる特定のデータを取得するルーチンがあ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: そして最上層としては、
Stack Trace:
_______________________________________
gosh> binary.pack
gosh> (*Note バイナリデータのパック::)
gosh> *** ERROR: unbound variable: モジュールがあって、構造をもつバイナリデータのパック、アンパックを可能
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: にしています。Perlでいう
Stack Trace:
_______________________________________
gosh> pack
gosh> /
gosh> unpack
gosh> です。
gosh> *** ERROR: unbound variable: ビット操作
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |..........|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Gaucheコアはビットシフトおよびマスク操作を提供しています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ビット演算::を見てください。
Stack Trace:
_______________________________________
gosh> 8.2
gosh> *** ERROR: unbound variable: ライブラリの命名規則
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 12280: unknown #,-key: <array>
Stack Trace:
_______________________________________
gosh> 配列はこの形式で書き出されます。
gosh> *** ERROR: unbound variable: 配列が例えば
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SHAPEは偶数個の整数のリストで、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |2N番目の整数がN次元目のインデックスの下限を、2N+1番目の|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 整数がN次元目のインデックスの上限
Stack Trace:
_______________________________________
gosh> *** ERROR: invalid application: (1)
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を表します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: その後に、配列の要素がrow-majorの順で書き出されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: この構文が読み込まれると、もとの配列と
Stack Trace:
_______________________________________
gosh> equal?
gosh> である配列が作成されます。
gosh> *** READ-ERROR: Read error at "(stdin)":line 12294: unknown #,-key: <array>
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 12297: unknown #,-key: <array>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: obj
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-25
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |OBJが配列であれば#Tが、そうでなければ#Fが返されます。|
Stack Trace:
_______________________________________
gosh> (is-a? obj <array-base>)
gosh> と等価です。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: make-array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: shape
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: init
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-25
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ShapeがSHAPEである配列を作成します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SHAPEは
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: x
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の配列で、
Stack Trace:
_______________________________________
gosh> 0
gosh> #<subr <=>
gosh> *** ERROR: unbound variable: K
Stack Trace:
_______________________________________
gosh> #<subr <>
gosh> *** ERROR: unbound variable: D
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: なる各Kに対して要素
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: K
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 要素
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: K
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 以下でなければなりません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: INITが与えられた場合は、配列の各要素がINITで初期化されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: INITが与えられなかった場合の配列の要素の初期値は不定です。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: shape
Stack Trace:
_______________________________________
  0  (shape 0 2 0 2 0 2)
        At line 12310 of "(stdin)"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 12311: unknown #,-key: <array>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: make-u8array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: shape
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: init
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: make-s8array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: shape
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: init
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: make-f32array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: shape
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: init
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: make-f64array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: shape
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: init
Stack Trace:
_______________________________________
gosh> make-array
gosh> と似ていますが、均一な数値配列を返します。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: shape
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: bound
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-25
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 偶数個の正確な整数を引数に取り、配列のshapeとして使える2次元の配列を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: shape
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 12326: unknown #,-key: <array>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: shape
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 12329: unknown #,-key: <array>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: shape
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: init
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-25
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ShapeがSHAPEであるような配列を作成し、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: その要素をINIT
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...で初期化します。|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: shape
Stack Trace:
_______________________________________
  0  (shape 0 2 1 3)
        At line 12335 of "(stdin)"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 12336: unknown #,-key: <array>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-rank
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-25
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 配列ARRAYの次元数を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: shape
Stack Trace:
_______________________________________
  0  (shape 0 2 0 2 0 2)
        At line 12341 of "(stdin)"
  1  (make-array (shape 0 2 0 2 0 2))
        At line 12341 of "(stdin)"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 3
gosh> *** ERROR: unbound variable: shape
Stack Trace:
_______________________________________
  0  (shape)
        At line 12342 of "(stdin)"
  1  (make-array (shape))
        At line 12342 of "(stdin)"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 0
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-shape
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 配列ARRAYのshapeを表す配列を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-start
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: dim
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-end
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: dim
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-length
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: dim
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-25+
Stack Trace:
_______________________________________
gosh> array-start
gosh> は配列ARRAYのDIM番目の次元の
gosh> *** ERROR: unbound variable: インデックスの下限を返します。
Stack Trace:
_______________________________________
gosh> array-end
gosh> は上限+1を、そして
gosh> array-length
gosh> は両者の差を返します。
gosh> array-start
gosh> と
gosh> array-end
gosh> はSRFI-25で定義されています。
gosh> *** ERROR: unbound variable: shape
Stack Trace:
_______________________________________
  0  (shape 1 5 0 2)
        At line 12355 of "(stdin)"
  1  (make-array (shape 1 5 0 2))
        At line 12355 of "(stdin)"
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 1
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 5
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 4
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 0
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 2
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 2
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-size
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 配列ARRAYの全要素数を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: shape
Stack Trace:
_______________________________________
  0  (shape 5 9 1 3)
        At line 12367 of "(stdin)"
  1  (make-array (shape 5 9 1 3))
        At line 12367 of "(stdin)"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 8
gosh> *** ERROR: unbound variable: shape
Stack Trace:
_______________________________________
  0  (shape)
        At line 12368 of "(stdin)"
  1  (make-array (shape))
        At line 12368 of "(stdin)"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 1
gosh> *** ERROR: unbound variable: shape
Stack Trace:
_______________________________________
  0  (shape 0 0 0 2)
        At line 12369 of "(stdin)"
  1  (make-array (shape 0 0 0 2))
        At line 12369 of "(stdin)"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 0
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-ref
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: k
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-ref
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: index
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-25
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 配列ARRAYの要素を取り出します。最初の形式では、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 要素は整数のインデックスK
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...で指定されます。|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |2番目の形式では、要素はベクタまたは1次元配列のインデックスオブジェクトINDEX|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: で指定されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-set!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: k
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: value
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-set!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: index
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: value
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-25
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 配列ARRAYの要素にVALUEをセットします。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 最初の形式では、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 要素は整数のインデックスK
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...で指定されます。|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |2番目の形式では、要素はベクタまたは1次元配列のインデックスオブジェクトINDEX|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: で指定されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: share-array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: shape
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-25
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ShapeがSHAPEであり、与えられた配列ARRAYとバッキングストレージを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 共有する新しい配列を作成して返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROCは、新しい配列へのインデックスを古い配列へのインデックスへ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: マップする手続きです。新しい配列の次元数をN、古い配列の次元数をMと
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: した時、PROCはN個の引数を取りM個の値を返す手続きでなければ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: なりません。さらに、各マッピングはaffineマッピング、すなわち、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 出力は入力の線形合成
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: プラス定数
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: でなければなりません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 最適化を行います。新しい配列にアクセスする度にPROCが呼ばれるというわけでは
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-for-each-index
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: index
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: shape-for-each
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: shape
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: index
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: tabulate-array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: shape
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: index
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-retabulate!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: shape
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: index
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-retabulate!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: index
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-map!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: shape
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array0
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-map!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array0
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-map
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: shape
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array0
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-map
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array0
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array->vector
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array->list
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-concatenate
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: b
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: dimension
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-transpose
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: dim1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: dim2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-rotate-90
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: dim1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: dim2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-flip
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: dimension
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-flip!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: dimension
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: identity-array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: dimension
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: class
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-inverse
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: determinant
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: determinant!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-mul
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: b
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-expt
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pow
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-div-left
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: b
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-div-right
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: b
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-add-elements
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-or-scalar
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-add-elements!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-or-scalar
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-sub-elements
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-or-scalar
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-sub-elements!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-or-scalar
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-mul-elements
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-or-scalar
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-mul-elements!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-or-scalar
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-div-elements
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-or-scalar
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-div-elements!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: array-or-scalar
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> 9.2
gosh> gauche.charconv
gosh> -
gosh> *** ERROR: unbound variable: 文字コード変換
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 12812: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: これらの操作は、_コレクション_とそのサブクラスである
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: _シーケンス_に対して動作します。コレクションは、その要素を全て
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 訪れる方法が用意されているようなオブジェクトの集合です。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: シーケンスは、要素間に全順序関係が定義されておりインデックスで要素を取り出すことが
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: できるようなコレクションです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 次にあげるGaucheの組み込みオブジェクトはシーケンスあるいはコレクションとして動作します。
Stack Trace:
_______________________________________
gosh> <list>
gosh> シーケンス
gosh> <vector>
gosh> シーケンス
gosh> <string>
gosh> 文字のシーケンス
gosh> <hash-table>
gosh> コレクション。各要素はキーと値のペア。
gosh> <s8vector>
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,<u8vector>
"(stdin)":12832:,<u8vector>

Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,|...|
"(stdin)":12832:,|...|

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <f64vector>
Stack Trace:
_______________________________________
gosh> シーケンス。メソッドは
gosh> srfi-4
gosh> モジュール内で定義されます。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 単一型のベクタ::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: シーケンスフレームワーク::も参照してください。シーケンス特有のメソッドが
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 追加されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: オブジェクトの集合を返すようなメソッド、すなわち
Stack Trace:
_______________________________________
gosh> map
gosh> 、
gosh> filter
gosh> 、
gosh> remove
gosh> および
gosh> partition
gosh> は、
gosh> *** ERROR: unbound variable: リストを返します。対応する
Stack Trace:
_______________________________________
gosh> "-to"
gosh> *** ERROR: unbound variable: がつくメソッド
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 12843: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: はコレクションクラスも引数に取り、そのクラスのコレクションを返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |9.3.1|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: コレクションに対するマッピング
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 12941: bad dot syntax
Stack Trace:
_______________________________________
gosh> #<subr >>
gosh> #(5 7 9)
gosh> *** ERROR: unbound variable: map-to
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "DEF"
gosh> *** ERROR: unbound variable: map-to
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> #(#f #t #f)
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Generic
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: map-accum
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: seed
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: coll1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: coll2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 状態値を持ち回りながらPROCのコレクションの各要素への呼び出しを集めます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROCは次のように呼ばれます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ELT1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ここでELT1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ELT2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...は|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: COLL1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: COLL2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...の各要素です。|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROCは2つの値を返さねばなりません。最初の値が
Stack Trace:
_______________________________________
gosh> map
gosh> のように
gosh> *** ERROR: unbound variable: リストへと集められます。2つ目の値は次のPROCの呼び出しのSEED
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: として使われます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: いずれかのコレクションの要素を使い切った時点で、
Stack Trace:
_______________________________________
gosh> map-accum
gosh> は
gosh> *** ERROR: unbound variable: |2つの値を返します。最初の値はPROCの最初の戻り値をリストにしたもの、|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |2番目の値はPROCの最後の呼び出しの2番目の戻り値です。|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: もし与えられたコレクションがシーケンスであった場合は、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROCはシーケンスの順序通りに適用されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: この手続きはHaskellの
Stack Trace:
_______________________________________
gosh> mapAccumL
gosh> と似ています。但し、
gosh> proc
gosh> の引数と戻り値の順が逆転していることに注意して下さい。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Generic
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: function:
Stack Trace:
_______________________________________
gosh> #<subr for-each>
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: coll
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: coll2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 組み込み手続き
Stack Trace:
_______________________________________
gosh> for-each
gosh> (*Note 手続き::参照)
gosh> *** ERROR: unbound variable: を拡張します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: コレクションCOLLの各要素に手続きPROCを適用します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROCの結果は捨てられます。
Stack Trace:
_______________________________________
gosh> for-each
gosh> の結果は未定義です。
gosh> *** ERROR: unbound variable: COLLがシーケンスでもある場合、要素はシーケンスの順にPROCに渡されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: そうでなければ繰り返しの順序は未定義です。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 複数のコレクションが与えられた場合、PROCは各コレクションからの要素を引数として
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 呼び出されます。
Stack Trace:
_______________________________________
gosh> for-each
gosh> はひとつでもコレクションの最後に到達したら終了します。
gosh> *** ERROR: unbound variable: 複数のコレクションを渡すのは、コレクションの全てがシーケンスでないとあまり意味がないでしょう。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Generic
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure fold$>
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Generic
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure fold$>
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: knil
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Generic
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure map$>
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Generic
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<closure for-each$>
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> fold
gosh> 、
gosh> map
gosh> 、
gosh> for-each
gosh> の部分評価版です。
gosh> *** ERROR: unbound variable: _Discussion:_
Stack Trace:
_______________________________________
gosh> map
gosh> がリスト以外に対して適用されたとき、どういう
gosh> *** ERROR: unbound variable: コレクション型を返すべきでしょう。
Stack Trace:
_______________________________________
gosh> (map * '#(1 2) '#(3 4))
gosh> がベクタを返し、
gosh> (map char-upcase "abc")
gosh> が文字列を返すようにするほうが「自然」でしょうか。
gosh> *** ERROR: unbound variable: そのようなインタフェースは単純な場合には動作するように思えますが、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 一般的な拡張は困難です。文字列とベクタが同時に渡されたらどうします?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 更に、コレクションクラスによっては繰り返しインタフェースは持っていても
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ビルダーインタフェースを持っていない場合があり、結果をそのコレクションクラスとして
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 返せない場合もあります
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: といった用法を考えてみて下さい
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。また、Schemeプログラマは
Stack Trace:
_______________________________________
gosh> map
gosh> が
gosh> *** ERROR: unbound variable: リストを返すという事実に慣れ親しんでおり、既存のコードもMAPの戻り値を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: リストを受け取る手続きに渡すことがよく行われています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: そこで、結果の型を明示的に指定する
Stack Trace:
_______________________________________
gosh> map-to
gosh> という別のメソッドを定義しました。
gosh> *** ERROR: unbound variable: 結果の型を渡すのは、CommonLispの
Stack Trace:
_______________________________________
gosh> map
gosh> 関数にならっていますが、
gosh> *** ERROR: unbound variable: Gaucheではクラスメタオブジェクトを渡すようにしたため、メソッドディスパッチを使って
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 拡張することが容易です。
Stack Trace:
_______________________________________
gosh> "-to"
gosh> *** ERROR: unbound variable: のつくメソッドは結果のコレクションのクラスを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 取るというインタフェースはコレクションフレームワーク中で統一的に使われています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |9.3.2|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: コレクションからの選択と探索
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 13363: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: seed
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: DICTの各要素に対してPROCを呼びシード値を次に渡します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROCは引数を3つとります。エントリーのキー、エントリーの値、それ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: にシード値です。最初のシード値はSEEDです。PROCからの返り値
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は次のPROCの呼び出しでシード値として使われます。最後のPROC
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の呼び出しの結果がDICT-FOLDの返り値として返されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: DICTが
Stack Trace:
_______________________________________
gosh> <ordered-dictionary>
gosh> であれば、PROCは以下のよ
gosh> *** ERROR: unbound variable: うな結合で呼ばれます。ここで、キーはK0
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 最小
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: からKN
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 最大
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ま
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: でで、それに対応する値がV0からVNまでであるとします。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Kn
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Generic
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: dict-fold-right
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 13375: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: seed
Stack Trace:
_______________________________________
gosh> dict-fold
gosh> と同じですが、PROCを適用する結合の順が以下のよう
gosh> *** ERROR: unbound variable: に逆になります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: K0
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: このジェネリック関数は
Stack Trace:
_______________________________________
gosh> <ordered-dictionary>
gosh> 上にのみ定義されてい
gosh> *** ERROR: unbound variable: ます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Generic
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: dict-for-each
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 13384: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ディクショナリDICTの各エントリーのキーと値に対してPROCを呼
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: びます。順序付きディクショナリに対してはPROCがキーの昇順に呼ばれ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ることが保証されています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Generic
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: dict-map
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 13389: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ディクショナリDICTの各エントリーのキーと値に対してPROCを呼
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: び、結果をリストにまとめて返します。順序付きディクショナリに対しては結
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 果が最初のキーの順にならびます
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: とを保証するものではありません
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Generic
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: dict-keys
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 13395: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Generic
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: dict-values
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 13396: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: それぞれDICT内にあるすべてのキーのリスト、すべての値のリストを返
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: します。順序付きディクショナリについてはリストの要素はキーの昇順になら
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: んでいます。
Stack Trace:
_______________________________________
gosh> 9.6
gosh> gauche.fcntl
gosh> -
gosh> *** ERROR: unbound variable: 低レベルファイル操作
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 13445: dot in wrong context
Stack Trace:
_______________________________________
gosh> #<subr *>
gosh> O_APPEND
gosh> でマスクしたとき、追記が許されているかどうか。
gosh> #<subr *>
gosh> O_NONBLOCK
gosh> でマスクしたとき、I/O
gosh> *** ERROR: unbound variable: が非ブロックモードかブロックモードか。
Stack Trace:
_______________________________________
gosh> #<subr *>
gosh> O_NOCTTY
gosh> でマスクしたとき、端末制御を切離しているかどうか。
gosh> *** ERROR: unbound variable: システムが、そのシステム特有のフラグを定義していることがあります。
Stack Trace:
_______________________________________
gosh> F_SETFL
gosh> PORT-OR-FDで指定したオープンされたファイルのフラグを設定します。
gosh> *** ERROR: unbound variable: 上に列挙されたフラグのうち、
Stack Trace:
_______________________________________
gosh> O_NONBLOCK
gosh> と
gosh> O_APPEND
gosh> だけが
gosh> *** ERROR: unbound variable: 変更可能です。
Stack Trace:
_______________________________________
gosh> F_GETFD
gosh> /
gosh> F_SETFD
gosh> はファイルディスクリプタそのものに結びついた
gosh> *** ERROR: unbound variable: フラグについてであり、一方、
Stack Trace:
_______________________________________
gosh> F_GETFL
gosh> /
gosh> F_SETFL
gosh> はオープンされた
gosh> *** ERROR: unbound variable: ファイルそのものに結びついているフラグについての操作であることに注意して
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ください。この違いは、2つ以上のファイルディスクリプタが同じオープンされた
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ファイルを指しているような場合にあらわれます。
Stack Trace:
_______________________________________
gosh> F_DUPFD
gosh> PORT-OR-FDで参照しているのと同じファイルを指す新しいファイル
gosh> *** ERROR: unbound variable: ディスクリプタを生成します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ARGで整数を与えなければなりません。この数は割り当てられる
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ファイルディスクリプタの最小値を指定します。
Stack Trace:
_______________________________________
gosh> F_GETLK
gosh> |3つめの引数を与えなければなりません。これは、以下に述べる|
gosh> <sys-flock>
gosh> オブジェクトのインスタンスでなければなりません。ARGで指定された
gosh> *** ERROR: unbound variable: ロック情報を検索し、それにしかるべく変更します。
Stack Trace:
_______________________________________
gosh> F_SETLK
gosh> `F_SETLKW
gosh> |3つめの引数を与えなければなりません。これは、以下に述べる|
gosh> <sys-flock>
gosh> オブジェクトのインスタンスでなければなりません。ARGにしたがって、
gosh> *** ERROR: unbound variable: アドバイザリロックを設定します。ロックの取得に成功すれば、
Stack Trace:
_______________________________________
gosh> #t
gosh> が
gosh> *** ERROR: unbound variable: 返ります。もし、別のプロセスがロックをもっていて要求したものと衝突した
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 場合には
Stack Trace:
_______________________________________
gosh> F_SETLK
gosh> のときは
gosh> #f
gosh> を返します。一方、
gosh> F_SETLKW
gosh> のときはロックが利用可能になるまで待ちます。
gosh> F_GETOWN
gosh> 当該ファイルディスクリプタ上のイベント用シグナル、SIGIO
gosh> *** ERROR: unbound variable: および
Stack Trace:
_______________________________________
gosh> 16
gosh> *** ERROR: unbound variable: を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 受けとることになるプロセスのプロセスIDあるいはプロセスグループを返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: プロセスグループは負の値で表示されます。このフラグはシステムにこのような
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 機能がある場合にのみ利用可能です
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: や
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> F_SETOWN
gosh> 当該ファイルディスクリプタ上のイベント用シグナル、SIGIO
gosh> *** ERROR: unbound variable: および
Stack Trace:
_______________________________________
gosh> 16
gosh> *** ERROR: unbound variable: を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 受けとることになるプロセスのプロセスIDあるいはプロセスグループを設定します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: プロセスグループは負の値で表示されます。このフラグはシステムにこのような
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 機能がある場合にのみ利用可能です
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: や
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 詳細については、お使いのシステムの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: fcntl
Stack Trace:
_______________________________________
gosh> *** ERROR: invalid application: (2)
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のマニュアルページをチェック
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: してください。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: これ以外の値を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OPERATION
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: で指定しようとするとエラーになります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Builtin
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Class:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <sys-flock>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: POSIX
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のアドバイザリレコードロックを表わす構造体です。アドバイザリレコードロック
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: というのは、適切なロックをもたないプロセスが対象ファイルを操作しても
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: システムは関知しない、ということです。すべてのプロセスが、共有される可能性
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のあるファイルを操作する前にロックを
Stack Trace:
_______________________________________
gosh> fcntl
gosh> を使って検査することが
gosh> *** ERROR: unbound variable: 期待されています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Instance
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <sys-flock>:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: type
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ロックのタイプを表す整数です。利用可能な値として以下の変数があらかじめ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 定義されています。
Stack Trace:
_______________________________________
gosh> F_RDLCK
gosh> 読み込みのロック
gosh> F_WRLCK
gosh> 書き込みのロック
gosh> F_UNLCK
gosh> `F_SETLK
gosh> によるロックを除去するか、あるいはレコードが
gosh> F_GETLK
gosh> でロックされていないことを示す。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Instance
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <sys-flock>:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: whence
Stack Trace:
_______________________________________
gosh> start
gosh> の計測が開始される位置を示す。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Instance
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <sys-flock>:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: start
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ロックされる領域の開始位置オフセット
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Instance
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <sys-flock>:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: len
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ロックされるバイト数。ゼロは「EOFまで」という意味。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Instance
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <sys-flock>:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pid
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 当該のロックをもっている整数のプロセスID。
Stack Trace:
_______________________________________
gosh> F_GETLK
gosh> でのみ使用。
gosh> 9.7
gosh> gauche.hook
gosh> -
gosh> *** ERROR: unbound variable: フック
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 13783: dot in wrong context
Stack Trace:
_______________________________________
gosh> 5.0
gosh> *** ERROR: unbound variable: プロンプタ手続きを使って、プロンプトを
Stack Trace:
_______________________________________
gosh> output-port
gosh> に印字したのち、
gosh> output-port
gosh> をフラッシュする。
gosh> 6.0
gosh> *** ERROR: unbound variable: |2から繰り返す。|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: listener-show-prompt
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <listener>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: リスナーの出力ポートにプロンプトを表示します。表示にはリスナーの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: プロンプタ手続きを使います。通常この手続きは最初のプロンプトを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 印字するために使います。たとえば、クライアントがリスナーソケットに
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 接続してきたときです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: complete-sexp?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: str
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: もし、STRが完結したＳ式を含んでいれば
Stack Trace:
_______________________________________
gosh> #t
gosh> を返します。
gosh> *** ERROR: unbound variable: このユーティリティ手続きは、他の目的にも有用なので、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 他の手続きといっしょにエクスポートしてあります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: この手続きは構文のチェックをするだけで、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 登録されていないSRFI-10のタグを含むなど
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 誤りのある式を判別するわけでは
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ないことに注意してください。この手続きは入力が
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 13803: unsupported #-syntax: #<
Stack Trace:
_______________________________________
gosh> '文字の
gosh> *** ERROR: unbound variable: シーケンスを含むと、エラーを発生させます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: エラー処理
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 14234: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: わたすこともできます。PROTO
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の値は、
Stack Trace:
_______________________________________
gosh> tcp
gosh> あるいは
gosh> udp
gosh> のどちらかのシンボルになります。デフォルトでは、
gosh> tcp
gosh> です。
gosh> *** ERROR: unbound variable: この手続きは常にソケットアドレスのリストを返します。もし、HOST
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 検索に失敗した場合には、空リストが返ります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: アドレスと文字列との変換
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |........................|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: inet-string->address
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: address
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列で表現されたインターネットアドレスADDRESSを整数のアドレス
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: に変換します。ADDRESSのパーズが成功した場合には値を2つ返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ひとつは整数で表現されたアドレスの値、もうひとつは認識されたプロトコル
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 14248: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ならIPv4アドレス、
Stack Trace:
_______________________________________
gosh> 10
gosh> *** READ-ERROR: Read error at "(stdin)":line 14249: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ならIPv6アドレス
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 14249: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: です。ADDRESSのパーズに失敗した
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ら、
Stack Trace:
_______________________________________
gosh> #f
gosh> と
gosh> #f
gosh> との2つが返ります。
gosh> *** ERROR: unbound variable: inet-string->address
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 3232235777
gosh> #<syntax and>
gosh> 2
gosh> *** ERROR: unbound variable: inet-string->address
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 1
gosh> #<syntax and>
gosh> 10
gosh> *** ERROR: unbound variable: inet-string->address
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 3232235777
gosh> #<syntax and>
gosh> 10
gosh> *** ERROR: unbound variable: inet-string->address
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 340116213421465348979261631549233168385
gosh> #<syntax and>
gosh> 10
gosh> *** ERROR: unbound variable: inet-string->address
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 3232235777
gosh> #<syntax and>
gosh> 10
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: inet-string->address!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: address
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: buf
Stack Trace:
_______________________________________
gosh> inet-string->address
gosh> と同じですが、整数値を返すかわりに、与えら
gosh> *** ERROR: unbound variable: れたu8vectorであるBUFをパーズしたアドレスで埋めるところが違いま
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: す。inetアドレスの整数表現はbignumと同じやりかたです。この関数を使えば
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: bignumを生成しなくてすみます。与えられたu8vectorBUFは変更可能で
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: なければなりません。変換に成功した場合はプロトコルが、失敗した場合は
Stack Trace:
_______________________________________
gosh> #f
gosh> が返ります。
gosh> *** ERROR: unbound variable: 呼び出し側は格納に十分なバッファを用意しなければなりません。BUF
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が必要な分より大きい場合には結果は先頭から詰められ、ベクタの他の部分は
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: そのままになります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: make-u8vector
Stack Trace:
_______________________________________
  0  (make-u8vector 16 0)
        At line 14275 of "(stdin)"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** ERROR: invalid application: (2 #u8(192 168 1 1 0 0 0 0 0 0 0 0 0 0 0 0))
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: inet-address->string
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: address
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: protocol
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 与えれれたADDRESSをプロトコルPROTOCOLの文字列表現に変換し
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ます。プロトコルとしては
Stack Trace:
_______________________________________
gosh> 2
gosh> *** READ-ERROR: Read error at "(stdin)":line 14282: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: または
Stack Trace:
_______________________________________
gosh> 10
gosh> *** READ-ERROR: Read error at "(stdin)":line 14283: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が指定可能です。ADDRESSとしては整数または
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: u8vectorが使えます。u8vectorをつかった場合には必要な部分だけが読み込ま
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: れます。したがって、必要な長さ以上あるベクタでもかまいません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: AF_INET
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "192.168.1.1"
gosh> *** ERROR: unbound variable: AF_INET
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "192.168.1.1"
gosh> *** ERROR: unbound variable: AF_INET6
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "::c0a8:101"
gosh> *** ERROR: unbound variable: |9.13.2|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 高レベルネットワーク手続き
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 14385: unsupported #-syntax: #<
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: socket
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: listen
Stack Trace:
_______________________________________
gosh> #<subr >>
gosh> *** ERROR: unbound variable: make-server-socket
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 14387: unsupported #-syntax: #<
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: socket
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: listen
Stack Trace:
_______________________________________
gosh> #<subr >>
gosh> *** ERROR: unbound variable: make-server-socket
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 14389: unsupported #-syntax: #<
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: socket
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: listen
Stack Trace:
_______________________________________
gosh> #<subr >>
gosh> *** ERROR: unbound variable: make-server-socket
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 14391: unsupported #-syntax: #<
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: socket
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: listen
Stack Trace:
_______________________________________
gosh> #<subr >>
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: make-server-sockets
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: host
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: port
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &keyword
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: reuse-addr?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: sock-init
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: HOST
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が持つすべての利用可能なネットワークインタフェース上の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PORT
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: で接続を待つソケットを生成し、それらのリストを返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PORT
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: には数字のポート番号のほか、
Stack Trace:
_______________________________________
gosh> "`http'"
gosh> *** ERROR: unbound variable: などの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: サービス名も指定できます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: この手続きは、ホストが複数のプロトコルスタック
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: IPv4とIPv6など
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 持つ場合に特に便利です。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: キーワード引数の意味は
Stack Trace:
_______________________________________
gosh> make-server-socket
gosh> のと同じです。
gosh> *** ERROR: unbound variable: 上記の手続きによって返されたソケットオブジェクトに対して、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 以下のようなアクセサがあります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: socket-address
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: socket
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ソケットSOCKETのソケットアドレスを返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ソケットにアドレスがまだバインドされていない場合は
Stack Trace:
_______________________________________
gosh> #f
gosh> が返ります。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: socket-input-port
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: socket
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &keyword
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 14412: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: socket-output-port
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: socket
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &keyword
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 14413: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: それぞれ、SOCKETからデータを読みだす入力ポート、および
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SOCKETにデータを書き出す出力ポートを返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: キーワード引数BUFFERINGはポートのバッファリングモードを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 指定します。バッファリングモードの説明は*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ファイルポート::にあります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: socket-close
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: socket
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ソケットSOCKETをクローズします。SOCKETの入出力ポートも
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: クローズされます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 注意:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: リリース
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |0.7.2|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: より、この手続きは接続をシャットダウンしないように
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: なりました。その理由は、SOCKET
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: fork
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: した別プロセスから参照され
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ている可能性があり、既存の接続を妨害することなくクローズしたい場合がある
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: からです。
Stack Trace:
_______________________________________
gosh> socket-shutdown
gosh> を呼べば接続を明示的にシャットダウンできます。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: call-with-client-socket
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: socket
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SOCKETは接続されたクライアントソケットでなければなりません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROCがソケットから読み出す入力ポートと、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ソケットに書き出す出力ポートを引数として呼ばれます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROCが正常終了するか、エラーを投げた場合にソケットはクローズされます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: これは高レベルソケット手続きを使った、非常に単純なhttpクライアントです。
Stack Trace:
_______________________________________
gosh> #<undef>
gosh> usage
gosh> parse-url
gosh> get
gosh> main
gosh> *** ERROR: unbound variable: |9.13.3|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 低レベルソケットインタフェース
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 14602: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は
Stack Trace:
_______________________________________
gosh> #t
gosh> であっても許されます。
gosh> *** ERROR: unbound variable: この特殊な場合として、ADDRS引数にただ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ADDRS引数に渡されたソケットアドレスの中身は何でも構いません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 送信者のアドレスファミリーに一致するソケットアドレスインスタンスがADDRS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 中にあった場合、
Stack Trace:
_______________________________________
gosh> socket-recvfrom!
gosh> はそのインスタンスに直接
gosh> *** ERROR: unbound variable: 送信者のアドレスを書き込みます。受信し得る全てのアドレスファミリのソケットアドレスを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: リストで渡しておけば、
Stack Trace:
_______________________________________
gosh> socket-recvfrom!
gosh> が
gosh> *** ERROR: unbound variable: 成功時には
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: メモリアロケーションを行わないことが保証されます。これは
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 速度が重要となるタイトなループ内で
Stack Trace:
_______________________________________
gosh> socket-recvfrom!
gosh> を呼ぶ場合に
gosh> *** ERROR: unbound variable: 重要です。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 送信者のアドレスファミリに一致するソケットアドレスがあたえられなかった場合、
Stack Trace:
_______________________________________
gosh> socket-recvfrom!
gosh> の振舞いはADDRSのリスト終端の値によります。
gosh> *** ERROR: unbound variable: ADDRSが
Stack Trace:
_______________________________________
gosh> ()
gosh> で終端されていた場合
gosh> *** ERROR: unbound variable: あった場合
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 、送信者のアドレスは捨てられ、
Stack Trace:
_______________________________________
gosh> socket-recvfrom!
gosh> は
gosh> *** ERROR: unbound variable: 二番めの値として
Stack Trace:
_______________________________________
gosh> #f
gosh> を返します。ADDRSが
gosh> #t
gosh> で終端
gosh> *** ERROR: unbound variable: されていた場合、
Stack Trace:
_______________________________________
gosh> socket-recvfrom!
gosh> は新たなソケットアドレス
gosh> *** ERROR: unbound variable: インスタンスを作成して返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 簡単な場合として次の二つがあります：ADDRSに
Stack Trace:
_______________________________________
gosh> ()
gosh> が渡された場合、
gosh> *** ERROR: unbound variable: 送信者のアドレスは常に捨てられます。SOCKETがコネクトされていれば
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 送信者のアドレスは既にわかっているので、そういう場合に便利でしょう。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 一方ADDRSに
Stack Trace:
_______________________________________
gosh> #t
gosh> を渡せば、常に新しいソケットアドレスが
gosh> *** ERROR: unbound variable: アロケートされて返されます。メモリアロケーションについて気にしなくても
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 良い場合は便利でしょう。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: オプション引数
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: FLAGS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は整数定数
Stack Trace:
_______________________________________
gosh> MSG_*
gosh> のビット毎のORで
gosh> *** ERROR: unbound variable: 指定できます。詳しくはシステムの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: man
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ページ
Stack Trace:
_______________________________________
gosh> recvfrom
gosh> *** ERROR: invalid application: (2)
Stack Trace:
_______________________________________
gosh> を見て下さい。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr socket-recv>
gosh> *** ERROR: unbound variable: socket
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: bytes
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: flags
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr socket-recvfrom>
gosh> *** ERROR: unbound variable: socket
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: bytes
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: flags
Stack Trace:
_______________________________________
gosh> socket-recv!
gosh> や
gosh> socket-recvfrom!
gosh> と似ていますが、
gosh> *** ERROR: unbound variable: 受け取ったメッセージを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 不完全かもしれない
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列として返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: BYTESは受信する上限のバイト数を指定します。
Stack Trace:
_______________________________________
gosh> socket-recvfrom
gosh> はそれに加えて、送信者のアドレスのために
gosh> *** ERROR: unbound variable: 常に新たなソケットアドレスオブジェクトを生成します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: これらの手続きの使用はお薦めしません。というのは、バイナリメッセージを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 不完全な文字列の形で扱うことになりがちだからです。文字列で
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: バイナリメッセージを取り扱うことは多くの落とし穴を作ります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: バイナリデータを扱う場合はユニフォームベクタ
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 14643: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を使うべきでしょう。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: これらの手続きが文字列を返すのは単に歴史的な理由によります
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 32
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 4
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 8
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 1
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 2
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 16
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 64
gosh> socket-send
gosh> 、
gosh> socket-sendto
gosh> 、
gosh> socket-recv
gosh> および
gosh> socket-recvfrom
gosh> の
gosh> *** ERROR: unbound variable: FLAG
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: として使う定義済み整数定数。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: これらの定数のいくつかは、基盤のＯＳが提供していなければ未定義に
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: なっています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 以下に解説する
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: getsockopt/setsockopt
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: インタフェースを使えば、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ソケットやプロトコルをさらに制御することができます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr socket-setsockopt>
gosh> *** ERROR: unbound variable: socket
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: level
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: option
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: value
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr socket-getsockopt>
gosh> *** ERROR: unbound variable: socket
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: level
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: option
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: rsize
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: これらは、setsockopt
Stack Trace:
_______________________________________
gosh> ()
gosh> *** ERROR: unbound variable: および
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: getsockopt
Stack Trace:
_______________________________________
gosh> ()
gosh> *** ERROR: unbound variable: を呼ぶための
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: インタフェースです。このインタフェースが少々ぎこちないのは、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 低レベルの呼び出しすべてにアクセスできるようにしているためです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SOCKET
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: および
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OPTION
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は、処理する対象の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: プロトコルスタックのレベルおよびオプションを指定する
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 正確な整数です。以下にリストアップしたシステム定数に束縛された
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 変数があります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ソケットオプションを設定するには、VALUE
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: に正確な整数を渡す方法と
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列を渡す方法があります。それが、整数なら、その値は、C
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> int
gosh> として
gosh> *** ERROR: unbound variable: setsockopt
Stack Trace:
_______________________________________
gosh> *** ERROR: invalid application: (2)
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: に渡されます。文字列なら、バイト列が
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: そのまま渡されます。どの型の値が要求されるかは、オプションに依存します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Gauche
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 側では渡された値が
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: setsockopt
Stack Trace:
_______________________________________
gosh> *** ERROR: invalid application: (2)
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: で期待された型であるかどうかは
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 知ることができません。正しい値が渡されるかどうかはプログラマの責任です。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ソケットオプションを知るには、結果として期待する最大の長さを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: RSIZE
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を使って教える必要があります。Gauche
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 側は返されるそれぞれのオプションの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 合計を知らないからです。
Stack Trace:
_______________________________________
gosh> socket-getsockopt
gosh> はオプションの値をバイト列として返します。
gosh> *** ERROR: unbound variable: オプションの値が整数だと、わかっているなら
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: RSIZE
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: に0を渡すこと
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ができます。その場合
Stack Trace:
_______________________________________
gosh> socket-getsockopt
gosh> は正確な整数として値を返します。
gosh> *** ERROR: unbound variable: 関数名に関する註:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: これらの関数の名前を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: socket-
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |get}opt あるいは\x0a     socket-{set|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |-option|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: にしようかとも思いましたが、結局、命名の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 一貫性をとることにしました。それで、
Stack Trace:
_______________________________________
gosh> "sock"
gosh> *** ERROR: unbound variable: が重複しています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 以下のような定義済みの変数が用意されています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: すべてのプラットフォームで利用できるわけではないものも含まれている
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ことに注意してください。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: これらの値の正確な使用は、お使いのシステムの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: man
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ページ
Stack Trace:
_______________________________________
gosh> socket
gosh> *** ERROR: invalid application: (7)
Stack Trace:
_______________________________________
gosh> 、
gosh> tcp
gosh> *** ERROR: invalid application: (7)
Stack Trace:
_______________________________________
gosh> あるいは
gosh> ip
gosh> *** ERROR: invalid application: (7)
Stack Trace:
_______________________________________
gosh> を参照してください。
gosh> "level"
gosh> *** ERROR: unbound variable: 引数
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 65535
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SOL_TCP
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SOL_IP
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: これらの変数は、それぞれ、
Stack Trace:
_______________________________________
gosh> SOL_SOCKET
gosh> 、
gosh> SOL_TCP
gosh> および
gosh> SOL_IP
gosh> に束縛されています。
gosh> "option"
gosh> *** ERROR: unbound variable: 引数
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 8
gosh> *** ERROR: unbound variable: 整数が期待されています。0でなければ、コネクション指向ソケットに
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: キープアライブ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: keep-alive
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: メッセージを送ることができます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 256
gosh> *** ERROR: unbound variable: 整数が期待されています。0でなければ、帯域外データは直接
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 受信データストリームに乗ります。さもなければ、帯域外データは、受信中に
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: MSG_OOBフラグが設定されてたときにのみ渡されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 4
gosh> *** ERROR: unbound variable: 整数が期待されています。0ではない場合、
Stack Trace:
_______________________________________
gosh> socket-bind
gosh> は、
gosh> *** ERROR: unbound variable: ローカル・アドレスが、アクティブソケットにリッスンされていない
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 場合にかぎり、そのアドレスを再利用することを許可されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 4104
gosh> *** ERROR: unbound variable: ソケットの型
Stack Trace:
_______________________________________
gosh> *** ERROR: invalid application: (sock_stream など)
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を整数として取得します。
Stack Trace:
_______________________________________
gosh> socket-getsockopt
gosh> でのみ使用可能です。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 32
gosh> *** ERROR: unbound variable: 整数が期待されています。0でなければ、データグラムソケットは
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ブロードキャストパケットを送受信することを許されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SO_PRIORITY
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 整数が期待されています。このソケットで送信されるすべてのパケットに
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ついてプロトコル定義の優先順位を指定します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 4103
gosh> *** ERROR: unbound variable: 保留状態のソケットエラー
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 整数値
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を取得し、それをクリアします。
Stack Trace:
_______________________________________
gosh> socket-getsockopt
gosh> でのみ使用可能です。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr inet-checksum>
gosh> *** ERROR: unbound variable: packet
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: size
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ユニフォームベクタで与えられるPACKETのインターネットチェックサム
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: RFC1071
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の1の補数を計算して返します。PACKETの最初のSIZEバイトのみが
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 計算の対象となります。返される値はネットワークバイトオーダ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ビッグエンディアン
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: です。PACKETより大きな値をSIZEに指定するとエラーとなります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 註:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 使われているアルゴリズムは、PACKETがそれほど大きくないこと
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |64K|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 仮定しています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |9.13.4|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Netdbインタフェース
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 14893: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: もしくは32bit
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 14893: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の整数を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ネットワークバイト順
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 14893: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: とホストバイト順
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 14894: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の間で
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 相互変換するユーティリティ関数です。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: netdbインタフェースのScheme
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: APIは必要な箇所ではこれらの関数を内部的に
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 呼んでいるので、Cでプログラミングしている時ほどこれらの関数を必要とする
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ことはないでしょう。ただ、バイナリデータパケットを構築したり解析したり
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: する際は便利かもしれません。バイナリデータの扱いについては
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: バイナリデータのパック::も参照して下さい。
Stack Trace:
_______________________________________
gosh> 9.14
gosh> gauche.parameter
gosh> -
gosh> *** ERROR: unbound variable: パラメータ
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 15161: bad dot syntax
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: rest
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 15161: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 15161: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: body
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: このマクロは
Stack Trace:
_______________________________________
gosh> parse-options
gosh> のラッパーで、
gosh> *** ERROR: unbound variable: より通常のScheme構文に近い形式を提供します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 例えば、簡単なスクリプトが次のように書けるでしょう。
Stack Trace:
_______________________________________
gosh> main
gosh> show-help
gosh> *** ERROR: unbound variable: BIND-SPECは次のいずれかの形式でなければなりません。
Stack Trace:
_______________________________________
gosh> 1.0
gosh> *** ERROR: unbound variable: OPTION-SPEC
Stack Trace:
_______________________________________
gosh> 2.0
gosh> *** ERROR: unbound variable: OPTION-SPEC
Stack Trace:
_______________________________________
gosh> 3.0
gosh> *** ERROR: unbound variable: OPTION-SPEC
Stack Trace:
_______________________________________
gosh> 4.0
gosh> *** ERROR: unbound variable: OPTION-SPEC
Stack Trace:
_______________________________________
gosh> 5.0
gosh> *** ERROR: unbound variable: FORMALS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: コマンドライン引数のリストがARGSに渡されると、それが
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OPTION-SPECに基づいてパーズされます。該当するオプションが見付かれば、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 変数VARが次に述べる値に束縛されます：
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: BIND-SPECの形式が上の1.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: または2.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の場合：
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: a1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OPTION-SPECが引数を要求しない場合は、
Stack Trace:
_______________________________________
gosh> #t
gosh> 。
gosh> *** ERROR: unbound variable: a2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OPTION-SPECがひとつの引数を要求する場合は、その引数の値。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: a3
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OPTION-SPECがそれ以上の引数を要求する場合は、引数の値のリスト。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: b
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: BIND-SPECの形式が上の3.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: または4.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の場合、CALLBACKを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 引数の値を伴って呼び出し、その戻り値。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 特別な場合として、VARを
Stack Trace:
_______________________________________
gosh> #f
gosh> とすることもできます。
gosh> *** ERROR: unbound variable: その場合、値は無視されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: CALLBACKでの副作用だけに関心がある場合に使えるでしょう。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 対応するオプションがARGSに与えられなかった場合、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: VARはDEFAULTが与えられていればその値に、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: そうでなければ
Stack Trace:
_______________________________________
gosh> #f
gosh> に束縛されます。
gosh> *** ERROR: unbound variable: 最後のBIND-SPECは5.の形式であっても良く、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: その場合は
Stack Trace:
_______________________________________
gosh> parse-options
gosh> の
gosh> else
gosh> 節と同様に処理されます。
gosh> *** ERROR: unbound variable: 束縛リストは、最後の
Stack Trace:
_______________________________________
gosh> cdr
gosh> にシンボルを持つ不完全なリストであっても良く、
gosh> *** ERROR: unbound variable: その場合はコマンドライン引数の残りのリストがその変数にと束縛されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: DEFAULT、CALLBACK、
Stack Trace:
_______________________________________
gosh> else
gosh> 節のフォーム等は
gosh> *** ERROR: unbound variable: VARの束縛の外側のスコープで評価されることに注意して下さい。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 全ての束縛が終了した後、BODY
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が評価されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: BODYは内部defineで始まっていても構いません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Macro:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: make-option-parser
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: これは低レベルのインタフェースです。OPTION-CLAUSE
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は、
Stack Trace:
_______________________________________
gosh> parse-options
gosh> と同じです。このマクロは、コマンドラインオプションを
gosh> *** ERROR: unbound variable: 後でパースするために使うことができる手続きを返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 返される手続きは、一つの必須の引数と一つのオプション引数を取ります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 必須の引数は、与えられたコマンドライン引数としての文字列のリストです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: オプションの引数は、三つ以上の引数を取る手続きで、それが与えられると
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 手続きはそれが
Stack Trace:
_______________________________________
gosh> else
gosh> オプション節のボディであるかのように使われます。
gosh> 9.16
gosh> gauche.process
gosh> -
gosh> *** ERROR: unbound variable: 高レベルプロセスインタフェース
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 15334: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のみのシグナルマスクをセットします。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 次の例は
Stack Trace:
_______________________________________
gosh> ls
gosh> *** ERROR: unbound variable: |-al|
Stack Trace:
_______________________________________
gosh> を同期的に実行します。
gosh> *** ERROR: unbound variable: run-process
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ところで、
Stack Trace:
_______________________________________
gosh> 0.0-1.0i
gosh> は虚数として読まれることに注意してください。
gosh> 0.0-1.0i
gosh> を引数として渡したい場合は文字列にするか、
gosh> |-i|
gosh> のように
gosh> *** ERROR: unbound variable: エスケープしてシンボルにする必要があります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: run-process
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 注：以前のバージョンのこの手続きは引数の取りかたが若干異なっており、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 例えば
Stack Trace:
_______________________________________
gosh> (run-process "ls" "-al" :wait #t)
gosh> のように呼び出しました。
gosh> *** ERROR: unbound variable: これはSTkとの互換性によるものです。現在でもこの呼び出しはサポートされていますが、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 非推奨です。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: process?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: obj
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ==
Stack Trace:
_______________________________________
gosh> (is-a? OBJ <process>)
gosh> |--|
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: process-pid
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <process>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: サブプロセス
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROCESS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のプロセスIDを返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: process-command
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <process>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: サブプロセス
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROCESS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 内で起動されたコマンドを返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: process-input
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <process>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: process-output
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <process>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: process-error
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <process>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: プロセスの標準入力、標準出力、標準エラーがパイプに接続されている場合は、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: パイプのもう一方の終端を返します。例えば、
Stack Trace:
_______________________________________
gosh> process-input
gosh> は、
gosh> *** ERROR: unbound variable: PROCESS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の標準入力へデータを送ることができる出力ポートを返します。
Stack Trace:
_______________________________________
gosh> process-output
gosh> は
gosh> *** ERROR: unbound variable: PROCESS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の標準出力からデータを読み込むことの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: できる入力ポートを返します。そして、
Stack Trace:
_______________________________________
gosh> process-error
gosh> は、
gosh> process
gosh> の標準エラーからデータを読み込むことのできる入力ポートを返します。
gosh> *** ERROR: unbound variable: 対応する入出力がパイプに接続されていない場合、手続きは
Stack Trace:
_______________________________________
gosh> #f
gosh> を返します。
gosh> *** ERROR: unbound variable: run-process
Stack Trace:
_______________________________________
  0  (run-process '("date") :output :pipe)
        At line 15370 of "(stdin)"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "Fri Jun 22 22:22:22 HST 2001"
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: process-alive?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: process
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROCESS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が生きている場合は真を返します。
Stack Trace:
_______________________________________
gosh> process-wait
gosh> によって
gosh> *** ERROR: unbound variable: 明示的にチェックされない限り、Gauche
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: はサブプロセスのステータスを知ることが
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: できないことに注意してください。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: process-list
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: アクティブなプロセスのリストを返します。プロセスは、その終了ステータスが
Stack Trace:
_______________________________________
gosh> process-wait
gosh> によって明示的に回収されない場合は、アクティブなまま
gosh> *** ERROR: unbound variable: 残ります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ひとたび終了ステータスが回収され、プロセスの状態がインアクティブに
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 変更されると、そのプロセスは
Stack Trace:
_______________________________________
gosh> process-list
gosh> が返すリストからは除かれます。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: process-wait
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: process
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: nohang
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: error-on-nonzero-status
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: サブプロセス
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROCESS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の終了ステータスを取得し、PROCESS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のstatusスロットに値を格納します。statusスロットの値は
Stack Trace:
_______________________________________
gosh> process-exit-status
gosh> で得ることができます。
gosh> *** ERROR: unbound variable: デフォルトでは、この手続きはPROCESS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が終了するまで実行を一時停止します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: しかし、NOHANGに真の値が与えられた場合は、PROCESSが終了して
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: いない場合にも直ちに返ります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: オプショナル引数ERROR-ON-NONZERO-STATUSに真の値が与えられた場合、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: この手続きは得られた終了ステータスが0で無い場合に
Stack Trace:
_______________________________________
gosh> <process-abnormal-exit>
gosh> エラーを投げます。
gosh> *** ERROR: unbound variable: この呼び出しによってPROCESSの終了ステータスが実際に取得された場合は
Stack Trace:
_______________________________________
gosh> #t
gosh> を、そうでなければ
gosh> #f
gosh> を返します。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: process-wait-any
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: nohang
Stack Trace:
_______________________________________
gosh> run-process
gosh> で作られたサブプロセスのどれかの終了ステータスを取得します。
gosh> *** ERROR: unbound variable: 終了ステータスが取得できたプロセスのプロセスオブジェクトを返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 真の値がNOHANGに与えられた場合は、どの子プロセスも終了していない場合は
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 直ちに
Stack Trace:
_______________________________________
gosh> #f
gosh> を返します。そうでなければ、この手続きはいずれかの子プロセスが
gosh> *** ERROR: unbound variable: 終了するまで待ちます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 子プロセスが存在しない場合は、この手続きは直ちに
Stack Trace:
_______________________________________
gosh> #f
gosh> を返します。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: process-exit-status
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: process
Stack Trace:
_______________________________________
gosh> process-wait
gosh> によって取得されたPROCESSの終了ステータスを
gosh> *** ERROR: unbound variable: 返します。PROCESSに対して
Stack Trace:
_______________________________________
gosh> process-wait
gosh> を呼ぶ前にこの手続きを
gosh> *** ERROR: unbound variable: 呼んだ場合の結果は未定義です。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: process-send-signal
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: process
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: signal
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: サブプロセス
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROCESS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: にシグナル
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SIGNAL
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を送ります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SIGNAL
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は正確整数のシグナルナンバーでなければなりません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: シグナルの定義済み変数については、*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: シグナル::を参照して下さい。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: process-kill
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: process
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: process-stop
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: process
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: process-continue
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: process
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: それぞれ、PROCESS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: に、SIGKILL、SIGSTOP、SIGCONT
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を送ります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |9.16.2|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Process
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ports
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 17991: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: で識別されます
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: また、シンボル
Stack Trace:
_______________________________________
gosh> gauche
gosh> も
gosh> *** ERROR: unbound variable: FEATURE-IDENTIFIER
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: として認識されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: srfi-13
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列ライブラリ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を必要とするプログラムを書いているとしましょう。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Gauche
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: では、標準的には、以下のようにします。
Stack Trace:
_______________________________________
gosh> #<undef>
gosh> *** ERROR: unbound variable: しかし、この
Stack Trace:
_______________________________________
gosh> use
gosh> マクロは
gosh> *** ERROR: unbound variable: Gauche
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 専用で、他の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Scheme
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の実装では
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 動作しません。代りに以下のように書くことができます。
Stack Trace:
_______________________________________
gosh> #<undef>
gosh> *** ERROR: unbound variable: その実装が
Stack Trace:
_______________________________________
gosh> srfi-13
gosh> をサポートしていれば、この形式は「あなたの
gosh> *** ERROR: unbound variable: プログラム」に展開されます。Gauche
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: では、この場合に
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 内部で
Stack Trace:
_______________________________________
gosh> (use srfi-13)
gosh> を呼び出します。
gosh> *** ERROR: unbound variable: 上記のフォームは実装がsrfi-13をサポートしていなければエラーとなります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: そのような実装の上でもプログラムを走らせたい時は、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 代替となるライブラリ定義を提供すると良いでしょう。
Stack Trace:
_______________________________________
gosh> #<undef>
gosh> 10.2
gosh> srfi-1
gosh> -
gosh> *** ERROR: unbound variable: List
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: library
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 18098: bad dot syntax
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: スト選択子
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 18187: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: X
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が真性リストなら、その長さを返します。さもなければ、
Stack Trace:
_______________________________________
gosh> #f
gosh> を返します。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: concatenate
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: list-of-lists
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: concatenate!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: list-of-lists!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: それぞれ、
Stack Trace:
_______________________________________
gosh> (apply append LIST-OF-LISTS)
gosh> および
gosh> (apply append! LIST-OF-LISTS)
gosh> と同等です。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: append-reverse
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: rev-head
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: tail
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: append-reverse!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: rev-head
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: tail
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-1
Stack Trace:
_______________________________________
gosh> append-reverse
gosh> は
gosh> (append (reverse rev-head) tail)
gosh> を
gosh> *** ERROR: unbound variable: 返します。
Stack Trace:
_______________________________________
gosh> append-reverse!
gosh> はその場で更新されるバージョンです。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: zip
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: clist1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: clist2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-1
Stack Trace:
_______________________________________
gosh> (map list clist1 clist2 |...|)
gosh> と同等です。
gosh> *** ERROR: unbound variable: N
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 本のリストが
Stack Trace:
_______________________________________
gosh> zip
gosh> に渡された場合には、そのなかで一番短いものと
gosh> *** ERROR: unbound variable: 同じ長さのリストを返します。返されたリストは、要素が
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: N
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 要素のリストで、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: そのそれぞれが、引数として渡ってリストの対応する要素になっています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: zip
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: even
Stack Trace:
_______________________________________
  0  (two 2 even)
        At line 18210 of "(stdin)"
gosh> *** ERROR: unbound variable: zip
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** ERROR: invalid application: (2)
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 引数のリストのうち、少くともひとつは有限のリストでなければなりません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: circular-list
Stack Trace:
_______________________________________
  0  (circular-list #f #t)
        At line 18214 of "(stdin)"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** ERROR: invalid application: (1 #t)
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: unzip1
Stack Trace:
_______________________________________
gosh> #<subr list>
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: unzip2
Stack Trace:
_______________________________________
gosh> #<subr list>
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: unzip3
Stack Trace:
_______________________________________
gosh> #<subr list>
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: unzip4
Stack Trace:
_______________________________________
gosh> #<subr list>
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: unzip5
Stack Trace:
_______________________________________
gosh> #<subr list>
gosh> *** ERROR: unbound variable: SRFI-1
Stack Trace:
_______________________________________
gosh> unzip1
gosh> はリストのリストを引数としてとります。それぞれの
gosh> *** ERROR: unbound variable: リストは少くとも一つの要素を含むものでなくてはなりません。結果として
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: それぞれのリストの最初の要素のリストを返します。
Stack Trace:
_______________________________________
gosh> unzip2
gosh> はリストのリストを引数としてとります。それぞれのリストは
gosh> *** ERROR: unbound variable: 少くとも二つの要素を含むものでなくてはなりません。結果として二つの値を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 返します。最初の要素のリストと二番目の要素のリストです。
Stack Trace:
_______________________________________
gosh> unzip3
gosh> は
gosh> *** ERROR: unbound variable: |3番目までの要素について同様です。以下も同様です。|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: unzip2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** ERROR: invalid application: (1 2 3)
Stack Trace:
_______________________________________
gosh> #<syntax and>
gosh> *** ERROR: unbound variable: two
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: count
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pred
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: clist1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: clist2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: N
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: をゼロから与えられたリストのうち最も短いリストの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 長さまでとして、PRED
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 手続きを与えられたリストの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: N
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 番目の要素に
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: それぞれ適用します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PRED
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が真を返した数が返ります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: count
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 3
gosh> *** ERROR: unbound variable: count
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 3
gosh> *** ERROR: unbound variable: 引数で与えられるリストの少くともひとつは有限でなければなりません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: circular-list
Stack Trace:
_______________________________________
  0  (circular-list 1 10)
        At line 18240 of "(stdin)"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 2
gosh> *** ERROR: unbound variable: |10.2.5|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: リストの畳み込み
Stack Trace:
_______________________________________
gosh> *** ERROR: wrong number of arguments for #<closure fold> (required 3, got 0)
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 、解きほぐし
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: unfold
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 、および写像
Stack Trace:
_______________________________________
gosh> *** ERROR: wrong number of arguments for #<subr map> (required 2, got 0)
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 18540: bad dot syntax
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 18540: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 18540: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: body
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Macro:
Stack Trace:
_______________________________________
gosh> #<syntax let>
gosh> *** ERROR: unbound variable: name
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 18541: bad dot syntax
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 18541: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 18541: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: body
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Macro:
Stack Trace:
_______________________________________
gosh> #<syntax let>
gosh> *** READ-ERROR: Read error at "(stdin)":line 18542: bad dot syntax
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 18542: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 18542: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: body
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-5
Stack Trace:
_______________________________________
gosh> let
gosh> 構文は
gosh> *** ERROR: unbound variable: |2通りの拡張がされています。|
Stack Trace:
_______________________________________
gosh> #<subr *>
gosh> *** ERROR: unbound variable: 拡張
Stack Trace:
_______________________________________
gosh> let
gosh> 構文は、NAME
gosh> *** ERROR: unbound variable: 束縛リスト中で
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 構文用の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 識別子を許します
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 上の3つめの構文
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> #<subr *>
gosh> *** ERROR: unbound variable: 拡張
Stack Trace:
_______________________________________
gosh> let
gosh> 構文は、
gosh> lambda
gosh> 構文の
gosh> *** ERROR: unbound variable: rest
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: パラメータと同様の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 働きをする
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: rest
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: パラメータ束縛を許します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: この拡張に関する理論的根拠については
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-5
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のドキュメントを参照してください。
Stack Trace:
_______________________________________
gosh> 10.5
gosh> srfi-7
gosh> -
gosh> *** ERROR: unbound variable: 機能ベースプログラム設定言語
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 18667: unsupported #-syntax: #<
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: class
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pare>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: kons
Stack Trace:
_______________________________________
  0  (kons 2 3)
        At line 18669 of "(stdin)"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> #t
gosh> *** ERROR: unbound variable: pare?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> #f
gosh> *** ERROR: unbound variable: kons
Stack Trace:
_______________________________________
  0  (kons 2 3)
        At line 18672 of "(stdin)"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 2
gosh> *** ERROR: unbound variable: kons
Stack Trace:
_______________________________________
  0  (kons 2 3)
        At line 18673 of "(stdin)"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 3
gosh> *** ERROR: unbound variable: kons
Stack Trace:
_______________________________________
  0  (kons 2 3)
        At line 18675 of "(stdin)"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> -1
gosh> *** ERROR: unbound variable: 概念的には、上の例は以下の形式のならびに展開されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <record>
Stack Trace:
_______________________________________
  0  (%get-default-metaclass (list <record>))
        [unknown location]
  1  (make (%get-default-metaclass (list <record>)) :name 'pare :supers ...
        [unknown location]
gosh> kons
gosh> pare?
gosh> *** ERROR: unbound variable: pare
Stack Trace:
_______________________________________
  0  (make <method> :generic G34 :specializers (list pare) :lambda-list ...
        [unknown location]
  1  (add-method! G34 (make <method> :generic G34 :specializers (list p ...
        [unknown location]
gosh> *** ERROR: unbound variable: pare
Stack Trace:
_______________________________________
  0  (make <method> :generic G35 :specializers (list pare <top>) :lambd ...
        [unknown location]
  1  (add-method! G35 (make <method> :generic G35 :specializers (list p ...
        [unknown location]
gosh> *** ERROR: unbound variable: pare
Stack Trace:
_______________________________________
  0  (make <method> :generic G36 :specializers (list pare) :lambda-list ...
        [unknown location]
  1  (add-method! G36 (make <method> :generic G36 :specializers (list p ...
        [unknown location]
gosh> 10.7
gosh> srfi-11
gosh> -
gosh> *** ERROR: unbound variable: Let-values
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 18838: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |10.8.4|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列の選択
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 19893: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: いなければなりません。一方、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ロングオプションは二つのハイフンで始まって
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 19894: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: いなければなりません。ショートオプションは連結することが可能で、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: たとえば、
Stack Trace:
_______________________________________
gosh> |-abc|
gosh> あるいは
gosh> |-a|
gosh> *** ERROR: unbound variable: |-b|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |-c|
Stack Trace:
_______________________________________
gosh> と書くことができます。
gosh> *** ERROR: unbound variable: ショートオプション、ロングオプションはともに、必須引数あるいはオプショナル
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 引数を取ることができます。ショートオプションの必須引数は当該オプション
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: あとに空白なしあるいは空白をいれて指定することができます。たとえば、
Stack Trace:
_______________________________________
gosh> |-afoo|
gosh> あるいは
gosh> |-a|
gosh> *** ERROR: unbound variable: foo
Stack Trace:
_______________________________________
gosh> が可能です。ロングオプションの
gosh> *** ERROR: unbound variable: 引数は
Stack Trace:
_______________________________________
gosh> `=
gosh> '文字あるいは空白をはさみます。たとえば、
gosh> |--long=foo|
gosh> または
gosh> |--long|
gosh> *** ERROR: unbound variable: foo
Stack Trace:
_______________________________________
gosh> です。
gosh> args-fold
gosh> はオプションの引数ではなく、ハイフンで始まっていない
gosh> *** ERROR: unbound variable: コマンドライン引数を_オペランド_としてとりあつかいます。
Stack Trace:
_______________________________________
gosh> args-fold
gosh> はオペランドとオプションが交互に出現するのを許します。
gosh> *** ERROR: unbound variable: しかし、
Stack Trace:
_______________________________________
gosh> `|--|
gosh> 'に出逢うと、のこりは、ハイフンで始まっていようと
gosh> *** ERROR: unbound variable: なかろうと、オペランドとして扱われます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 与えられたオプションが
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OPTIONS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 内のオプションオブジェクトのひとつ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: にマッチすれば、オプション手続きが以下のように呼出されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OPTION
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ここで、OPTION
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: はマッチしたオプションオブジェクトで、NAME
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は実際にオプションを指定するのに使われた文字列、ARG
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: はそのオプション
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の引数
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 19917: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 、そして
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SEED
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 利用者側の状態情報です。OPTION-PROC
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SEED
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: と同じ数だけ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 値を返さなければなりません。
Stack Trace:
_______________________________________
gosh> args-fold
gosh> がオペランドを見つけたら、OPERAND-PROC
gosh> *** ERROR: unbound variable: が
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 以下のように呼出されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OPERAND
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OPTION-PROC
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SEED
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: と同じ数だけ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 値を返さなければなりません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 呼出し側の状態は明示的にシード引数で渡され、戻されます。初期のシード値は
Stack Trace:
_______________________________________
gosh> args-fold
gosh> に与えた
gosh> *** ERROR: unbound variable: SEED
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: にです。この値は、オプション手続き
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: UNRECOGNIZED-PROC
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: と
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OPERAND-PROC
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: によって戻され、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 次にこれらのオプション手続きの呼出し時にシード引数として使われます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: これらの手続きの最後の呼出しから返されたこの値は
Stack Trace:
_______________________________________
gosh> args-fold
gosh> によって
gosh> *** ERROR: unbound variable: 返されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: option
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: names
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: require-arg?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: optional-arg?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: processor
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 渡されたプロパティでオプションオブジェクトを作成します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: NAME
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は文字と
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: あるいは
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列のリストです。文字はショートオプションに
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 使い、文字列はロングオプションに使います。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ふたつのフラグ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: REQUIRE-ARG?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: と
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OPTIONAL-ARG?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: はオプションが
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 必須引数をとるか、あるいは、オプショナル引数をとるかを示します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROCESSOR
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: はそのオプションの処理をする手続きです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: オプションの引数が
Stack Trace:
_______________________________________
gosh> `=
gosh> 'つきで渡された場合には、
gosh> *** ERROR: unbound variable: たとえ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: REQUIRE-ARG?、OPTIONAL-ARG?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: がともに
Stack Trace:
_______________________________________
gosh> #f
gosh> であっても、そのオプションの引数はオプション処理手続きに渡されることに
gosh> *** ERROR: unbound variable: 注意してください。オプション手続きにその引数を処理させようとします。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ショートオプションに対するオプショナルなオプションの引数は、オプションに
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: つづいてスペースなしで指定されたときにだけ認識されることにも
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 注意してください。たとえば、ショートオプション
Stack Trace:
_______________________________________
gosh> d
gosh> がオプショナル
gosh> *** ERROR: unbound variable: 引数をもつことになっているとき、
Stack Trace:
_______________________________________
gosh> `|-dfoo|
gosh> 'は
gosh> `|-d|
gosh> 'が引数
gosh> `foo
gosh> 'をもつと解釈されますが、
gosh> `|-d|
gosh> *** ERROR: unbound variable: foo
Stack Trace:
_______________________________________
gosh> 'は引数なしの
gosh> `|-d|
gosh> 'とオペランド
gosh> `foo
gosh> 'と解釈されてしまいます。もし、
gosh> `|-d|
gosh> 'が必須引数をもつと設定されているなら、両方ともに
gosh> `|-dfoo|
gosh> 'は
gosh> `|-d|
gosh> 'が引数
gosh> `foo
gosh> 'をもつと解釈されます。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: option?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: obj
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OBJ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: がオプションオブジェクトなら
Stack Trace:
_______________________________________
gosh> #t
gosh> を返し、
gosh> *** ERROR: unbound variable: そうでなければ、
Stack Trace:
_______________________________________
gosh> #f
gosh> を返します。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: option-names
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: option
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: option-required-arg?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: option
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: option-optional-arg?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: option
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: option-processor
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: オプションオブジェクト
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OPTION
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のプロパティを返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 簡単な例:
Stack Trace:
_______________________________________
gosh> #<undef>
gosh> options
gosh> main
gosh> 10.14
gosh> srfi-42
gosh> -
gosh> *** ERROR: unbound variable: 先行評価的内包表記
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 20481: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を指定した版です。スピードを要求
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: されるコードではオプション引数処理のオーバーヘッドを避けるためこちらを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 使うのがいいでしょう。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-u8!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: endian
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-u16!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: endian
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-u32!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: endian
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-u64!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: endian
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-s8!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: endian
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-s16!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: endian
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-s32!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: endian
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-s64!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: endian
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-f16!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: endian
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-f32!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: endian
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-f64!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: endian
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 数値
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: VAL
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: をユニフォームベクタ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: UV
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のバイト位置
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: POS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: か
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ら指定されたフォーマットで書き出します。指定した位置が当該ユニフォーム
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ベクタの内容のある範囲外を参照するものであった場合、エラーを示すシグナ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ルがあがります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-u16be!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-u16le!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-u32be!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-u32le!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-u64be!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-u64le!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-s16be!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-s16le!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-s32be!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-s32le!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-s64be!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-s64le!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-f16be!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-f16le!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-f32be!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-f32le!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-f64be!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: put-f64le!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: val
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: これらは、
Stack Trace:
_______________________________________
gosh> put-*
gosh> 手続のエンディアン
gosh> *** READ-ERROR: Read error at "(stdin)":line 20520: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を指定した版です。スピードを要求
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: されるコードではオプション引数処理のオーバーヘッドを避けるためこちらを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 使うのがいいでしょう。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 互換性への注
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 20782: bad numeric format: "#i"
Stack Trace:
_______________________________________
gosh> という接頭辞を追加しなければ
gosh> *** ERROR: unbound variable: なりません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: gosh>
Stack Trace:
_______________________________________
gosh> 1/3
gosh> 1/3
gosh> *** ERROR: unbound variable: gosh>
Stack Trace:
_______________________________________
gosh> 0.3333333333333333
gosh> 0.3333333333333333
gosh> 11.4
gosh> dbi
gosh> -
gosh> *** ERROR: unbound variable: データベース非依存アクセス層
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 21040: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: につ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: いてだけ規定しています。しかし、印字可能文字ではない文字については規定
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: がありません。また、データベースシステムによっては他のエスケープ文字を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 使うものもあります。それゆえ、自分でエスケープしようとせずに、このメソッ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ドを使う必要があります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: c
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "don''t know"
gosh> *** ERROR: unbound variable: クエリの結果を見る
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |..................|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: クエリが
Stack Trace:
_______________________________________
gosh> select
gosh> 文である場合、
gosh> <collection>
gosh> と
gosh> <relation>
gosh> の両方のオブジェクトが返ります。行のコレクション
gosh> *** ERROR: unbound variable: すなわち、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ですから、行にアクセスするに
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は
Stack Trace:
_______________________________________
gosh> map
gosh> 、
gosh> for-each
gosh> 、その他のジェネリック関数が使えます。
gosh> *** ERROR: unbound variable: また、カラム名やアクセサを取り出すにはリレーションAPIが使えます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: リレーションAPIについては*Note
Stack Trace:
_______________________________________
gosh> util.relation
gosh> -
gosh> *** ERROR: unbound variable: リレーションフレームワーク::をコレクションAPIにつ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: いては*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: コレクションフレームワーク::を見てください。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: クエリから戻ったオブジェクトの実際のクラスはドライバによりますが、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 以下のメソッドを使うことができます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: dbi-open?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: result
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: クエリの結果がまだアクティブであるかどうかをチェックします。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 結果は
Stack Trace:
_______________________________________
gosh> dbi-close
gosh> によって明示的に閉じられるかデータベースへのコネ
gosh> *** ERROR: unbound variable: クションが閉じられると非アクティブになります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: dbi-close
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: result
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: クエリの結果を閉じます。結果に関連付けられていたリソースが解放されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: RESULTは、いったん閉じると使えなくなります。ただし、
Stack Trace:
_______________________________________
gosh> dbi-open?
gosh> にだけは渡せます。
gosh> *** ERROR: unbound variable: ドライバは通常、結果がガベージコレクタによって回収される時にリソースを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 解放しますが、アプリケーションはこれに依存してはいけません。結果を使い
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: おわったら明示的に
Stack Trace:
_______________________________________
gosh> dbi-close
gosh> を呼ぶことをおすすめします。
gosh> *** ERROR: unbound variable: |11.4.2|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: DBI用のドライバを書く
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 21267: bad dot syntax
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: GDBMライブラリ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: GDBMインタフェース::参照
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 21269: dot in wrong context
Stack Trace:
_______________________________________
gosh> dbm.ndbm
gosh> NDBMライブラリ
gosh> *** ERROR: unbound variable: NDBMインタフェース::参照
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 21272: dot in wrong context
Stack Trace:
_______________________________________
gosh> dbm.odbm
gosh> DBMライブラリ
gosh> *** ERROR: unbound variable: オリジナルのDBMインタフェース::参照
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 21275: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 以下にdbmデータベースの使用例を示します。
Stack Trace:
_______________________________________
gosh> #<undef>
gosh> #<undef>
gosh> *db*
gosh> #<undef>
gosh> val
gosh> *** ERROR: unbound variable: foo
Stack Trace:
_______________________________________
  0  proc

gosh> #<undef>
gosh> *** ERROR: unbound variable: |11.5.1|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: DBMデータベースのオープンとクローズ
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 21371: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: データベースDBMをクローズします。データベースがクローズされると、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: それ以降のアクセスオペレーションはエラーとなります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> #<generic dbm-closed? (2)>
gosh> *** READ-ERROR: Read error at "(stdin)":line 21375: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: データベースDBMが既にクローズされていたら
Stack Trace:
_______________________________________
gosh> #t
gosh> を返します。
gosh> *** ERROR: unbound variable: |11.5.2|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: DBMデータベースのアクセス
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 21383: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: value
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 値VALUEをキーKEYと関連付けて保存します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> #<generic dbm-get (2)>
gosh> *** READ-ERROR: Read error at "(stdin)":line 21386: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: default
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: キーKEYに関連付けられた値を返します。もし値が存在しなければ、DEFAULTが
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 与えられていればそれを返し、そうでなければエラーを報告します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> #<generic dbm-exists? (2)>
gosh> *** READ-ERROR: Read error at "(stdin)":line 21390: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: キーKEYに関連付けられた値が存在すれば
Stack Trace:
_______________________________________
gosh> #t
gosh> を返します。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> #<generic dbm-delete! (2)>
gosh> *** READ-ERROR: Read error at "(stdin)":line 21393: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: キーKEYに関連付けられた値を消去します。値が存在しない場合は何もしません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |11.5.3|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: DBMデータベース上の繰り返し処理
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 21401: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: procedure
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: knil
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 基本的な繰り返し処理です。データベース内の各キー／値のペアに関して、手続き
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROCEDUREが
Stack Trace:
_______________________________________
gosh> (PROCEDURE KEY VALUE R)
gosh> ,のように呼ばれます。ここでRは、最初のPROCEDUREの呼び出しの時にはKNIL
gosh> *** ERROR: unbound variable: が、以降の呼び出しの時にはその直前のPROCEDUREが返した値が渡されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 最後のPROCEDUREの戻り値が
Stack Trace:
_______________________________________
gosh> dbm-fold
gosh> の戻り値となります。
gosh> *** ERROR: unbound variable: データベース中にデータがひとつもなければKNILがそのまま返されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 次の例は、データベース中の整数の値を全て加算します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: dbm
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> #<generic dbm-for-each (1)>
gosh> *** READ-ERROR: Read error at "(stdin)":line 21412: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: procedure
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: データベース内の各キー／値のペアに関して、手続きPROCEDUREを呼び出します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROCEDUREにはキーと値が渡されます。PROCEDUREの戻り値は捨てられます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> #<generic dbm-map (1)>
gosh> *** READ-ERROR: Read error at "(stdin)":line 21416: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: procedure
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: データベース内の各キー／値のペアに関して、手続きPROCEDUREを呼び出します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROCEDUREにはキーと値が渡されます。PROCEDUREの戻り値はリストに
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 集められて
Stack Trace:
_______________________________________
gosh> dbm-map
gosh> の戻り値となります。
gosh> *** ERROR: unbound variable: |11.5.4|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: DBMデータベースインスタンスの管理
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 21461: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Class:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <fsdbm>
Stack Trace:
_______________________________________
gosh> fsdbm
gosh> は、直接ファイルシステムを扱うDBM実装です。
gosh> *** ERROR: unbound variable: 基本的には、ファイル名をキー、ファイルの内容を値として使います。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 他のDBM実装とは違い、これは他の特別なライブラリに依存しません
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 純粋にSchemeのみにより実装されています
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: したがって、他のDBM実装が使えないときでも、いつでも使うことが
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: できます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 明らかに、たくさんのエントリを持っていたり、エントリの追加や
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 削除が頻繁に起こるようなデータベースには向いていません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: エントリの数が相対的に小さく、キーが小さいのに値が大きいような
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 場合に向いています。
Stack Trace:
_______________________________________
gosh> <fsdbm>
gosh> のインスタンスに与えられるデータベース名は、
gosh> *** ERROR: unbound variable: データを格納するディレクトリの名前として使われます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: データのファイルは、
Stack Trace:
_______________________________________
gosh> fsdbm
gosh> インスタンスのPATHの
gosh> *** ERROR: unbound variable: サブディレクトリに格納され、キーによりハッシュされます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: キーに英数字でない文字がある場合はエンコードされます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 例えば、
Stack Trace:
_______________________________________
gosh> `:
gosh> 'は、
gosh> _3a
gosh> にエンコードされます。
gosh> *** ERROR: unbound variable: キーがファイル名としては長すぎる場合は、いくつかに
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 分割され、その最後の文字列片以外はディレクトリ名として
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 使われます。長いキー名は問題を引き起こすかも知れないことに
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 注意して下さい。例えば、いくつかの古い
Stack Trace:
_______________________________________
gosh> tar
gosh> コマンドは、256文字
gosh> *** ERROR: unbound variable: を越える長いパス名を扱えません
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ではなく、パス名全体でです
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: fsdbmは、全てのDBMプロトコルを実装しています
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 汎用DBMインタフェース::参照
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: fsdbm特有の手続きというものはありません。
Stack Trace:
_______________________________________
gosh> 11.7
gosh> dbm.gdbm
gosh> -
gosh> *** ERROR: unbound variable: GDBMインタフェース
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 21497: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Class:
Stack Trace:
_______________________________________
gosh> #<class <gdbm>>
gosh> <dbm>
gosh> を継承します。GDBM
gosh> *** ERROR: unbound variable: ライブラリのための実装を提供します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: このモジュールは、すでにあなたのシステムにすでに
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: GDBM
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: がある場合にのみ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: インストールされます
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |1.8.0|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Instance
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <gdbm>:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: sync
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Instance
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <gdbm>:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: nolock
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Instance
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <gdbm>:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: bsize
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 統合された
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: DBM
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: インターフェース
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 汎用DBMインタフェース::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 他に、このモジュールでは
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: GDBM
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: API
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: への直接のアクセスを提供する以下の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 低レベルな手続きを提供しています。これらの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: API
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の詳細については
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: GDBM
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: マニュアルを見て下さい。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr gdbm-open>
gosh> *** ERROR: unbound variable: path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: size
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: rwmode
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: fmode
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: error-callback
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 0
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 1
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 2
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 3
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 16
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 32
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 64
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr gdbm-close>
gosh> *** ERROR: unbound variable: gdbm-object
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr gdbm-closed?>
gosh> *** ERROR: unbound variable: gdbm-object
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr gdbm-store>
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: value
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: flag
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 0
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 1
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr gdbm-fetch>
gosh> *** ERROR: unbound variable: gdbm-object
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr gdbm-delete>
gosh> *** ERROR: unbound variable: gdbm-object
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr gdbm-firstkey>
gosh> *** ERROR: unbound variable: gdbm-object
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr gdbm-nextkey>
gosh> *** ERROR: unbound variable: gdbm-object
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr gdbm-reorganize>
gosh> *** ERROR: unbound variable: gdbm-object
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr gdbm-sync>
gosh> *** ERROR: unbound variable: gdbm-object
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr gdbm-exists?>
gosh> *** ERROR: unbound variable: gdbm-object
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr gdbm-strerror>
gosh> *** ERROR: unbound variable: errno
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr gdbm-setopt>
gosh> *** ERROR: unbound variable: gdbm-object
Stack Trace:
_______________________________________
gosh> #<closure option>
gosh> *** ERROR: unbound variable: value
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 1
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 2
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 3
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 4
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variable:
Stack Trace:
_______________________________________
gosh> 5
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr gdbm-version>
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> #<subr gdbm-errno>
gosh> 11.8
gosh> dbm.ndbm
gosh> -
gosh> *** ERROR: unbound variable: NDBMインタフェース
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 21578: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Class:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <ndbm>
Stack Trace:
_______________________________________
gosh> <dbm>
gosh> を継承します。NDBM
gosh> *** ERROR: unbound variable: ライブラリのための実装を提供します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: このモジュールはあなたのシステムにすでに
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: NDBM
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: がある場合にのみ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: インストールされます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 統合された
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: DBM
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: インターフェース
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 汎用DBMインタフェース::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 他に、このモジュールでは
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: NDBM
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: API
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: への直接のアクセスを提供する以下の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 低レベルな手続きを提供しています。これらの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: API
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の詳細については
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: NDBM
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: マニュアルを見て下さい。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ndbm-open
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: flags
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: mode
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ndbm-close
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ndbm-object
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ndbm-closed?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ndbm-object
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ndbm-store
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ndbm-object
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: content
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: flag
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ndbm-fetch
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ndbm-object
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ndbm-delete
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ndbm-object
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ndbm-firstkey
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ndbm-object
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ndbm-nextkey
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ndbm-object
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ndbm-error
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ndbm-object
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ndbm-clear-error
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ndbm-object
Stack Trace:
_______________________________________
gosh> 11.9
gosh> dbm.odbm
gosh> -
gosh> *** ERROR: unbound variable: オリジナルのDBMインタフェース
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 21614: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Class:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <odbm>
Stack Trace:
_______________________________________
gosh> <dbm>
gosh> を継承しています。レガシーな
gosh> *** ERROR: unbound variable: DBM
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ライブラリのための実装を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 提供します。このモジュールは、あなたのシステムにすでに
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: DBM
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: がある場合にのみ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: インストールされます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: レガシー
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: DBM
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の最大の制限は、データベースを一時に一つしか開けないことです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 複数の
Stack Trace:
_______________________________________
gosh> <odbm>
gosh> のインスタンスを作ることができますが、一時に一つしか
gosh> *** ERROR: unbound variable: 開くことが出来ず、一つ以上開こうとするとエラーになります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 統合された
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: DBM
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: インターフェース
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 汎用DBMインタフェース::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 他に、このモジュールでは
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: DBM
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: API
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: への直接のアクセスを提供する以下の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 低レベルな手続きを提供しています。これらの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: API
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の詳細については
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: DBM
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: マニュアルを見て下さい。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: odbm-init
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: odbm-close
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: odbm-store
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: value
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: odbm-fetch
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: odbm-delete
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: odbm-firstkey
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: odbm-nextkey
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> 11.1
gosh> file.filter
gosh> -
gosh> *** ERROR: unbound variable: ファイルのフィルタ
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 21810: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: やその親ディレクトリへの参照を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 返してはなりません。また、LISTERの戻り値は現在のディレクトリからアクセス可能な
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: パス名でなければなりません。例えばPATHが
Stack Trace:
_______________________________________
gosh> "/usr/lib/foo"
gosh> であり、
gosh> *** ERROR: unbound variable: そのディレクトリが
Stack Trace:
_______________________________________
gosh> "libfoo.a"
gosh> と
gosh> "libfoo.so"
gosh> を含んでいた場合、
gosh> *** ERROR: unbound variable: LISTERは
Stack Trace:
_______________________________________
gosh> '("/usr/lib/foo/libfoo.a" "/usr/lib/foo/libfoo.so")
gosh> のようなリストを返す必要があります。
gosh> *** ERROR: unbound variable: キーワード引数FOLLOW-LINK?はディレクトリを指しているシンボリックリンクに対して
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: LISTERを呼ぶかどうかを決定します。FOLLOW-LINK?が真
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: デフォルト値
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: である
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 場合はそのようなシンボリックリンクに対してもLISTERが呼ばれます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 一方、FOLLOW-LINK?が偽であればシンボリックリンクに対してはPROCが呼ばれます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 次の例は、与えられたpath以下からemacsのバックアップファイル
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: で終る名を持つファイル
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のリストを返します。
Stack Trace:
_______________________________________
gosh> #<undef>
gosh> *** ERROR: unbound variable: path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 次の例は与えられたpath以下全てのファイルとディレクトリ名をリストにして
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 返します。LISTER引数を使ってディレクトリ名そのものを結果に
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 含めていることに注目して下さい。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: make-directory*
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: name
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: perm
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: create-directory*
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: name
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: perm
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ディレクトリNAMEを作成します。NAMEに至るパスが存在しない
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 場合は必要なディレクトリが作成されます
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |-p|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。ディレクトリNAMEが既に存在していた場合は何もしません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PERMは作成されるディレクトリのパーミッションビットを指定します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: remove-directory*
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: name
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: delete-directory*
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: name
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ディレクトリNAMEとその内容を再帰的に消去します
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |-r|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。シンボリックリンクは辿られません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |11.11.2|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: パスネームユーティリティ
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 21879: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: と自分自身への参照
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 21879: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 出来る限り取り除きます。この手続きはファイルシステムへはアクセスしません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: decompose-path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: パス名PATHのディレクトリ部、拡張子を除いたファイル名、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: そして拡張子の3つの値を返します。パス名が拡張子を持たない場合、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 最後の値は
Stack Trace:
_______________________________________
gosh> #f
gosh> になります。パス名がディレクトリセパレータで
gosh> *** ERROR: unbound variable: 終わっている場合は2番目と3番目の値が
Stack Trace:
_______________________________________
gosh> #f
gosh> になります。
gosh> *** ERROR: unbound variable: シェル等の慣習に従っています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: decompose-path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "/foo/bar"
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,"baz"
"(stdin)":21892:,"baz"

Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,"scm"
"(stdin)":21892:,"scm"

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: decompose-path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "/foo/bar"
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,"baz"
"(stdin)":21894:,"baz"

Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,#f
"(stdin)":21894:,#f

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: decompose-path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "."
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,"baz"
"(stdin)":21897:,"baz"

Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,"scm"
"(stdin)":21897:,"scm"

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: decompose-path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "/"
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,"baz"
"(stdin)":21899:,"baz"

Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,"scm"
"(stdin)":21899:,"scm"

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: decompose-path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "/foo/bar"
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,"baz"
"(stdin)":21903:,"baz"

Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,""
"(stdin)":21903:,""

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: decompose-path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "/foo/bar"
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,".baz"
"(stdin)":21905:,".baz"

Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,#f
"(stdin)":21905:,#f

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: decompose-path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "/foo/bar.baz"
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,#f
"(stdin)":21907:,#f

Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,#f
"(stdin)":21907:,#f

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: path-extension
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: path-sans-extension
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: それぞれ、PATHの拡張子と、PATHから拡張子を除いたものを返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PATHが拡張子を持っていない場合はそれぞれ
Stack Trace:
_______________________________________
gosh> #f
gosh> とPATHが返されます。
gosh> *** ERROR: unbound variable: path-extension
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "c"
gosh> *** ERROR: unbound variable: path-sans-extension
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "/foo/bar"
gosh> *** ERROR: unbound variable: path-extension
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> #f
gosh> *** ERROR: unbound variable: path-sans-extension
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "/foo/bar"
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: path-swap-extension
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: newext
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PATHの拡張子がNEWEXTに置換されたものが返されます。
Stack Trace:
_______________________________________
gosh> path
gosh> が
gosh> *** ERROR: unbound variable: 拡張子を持たない場合は、PATHに
Stack Trace:
_______________________________________
gosh> "."
gosh> *** ERROR: unbound variable: とNEWEXTが追加されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: NEWEXTが
Stack Trace:
_______________________________________
gosh> #f
gosh> の場合は、PATHの拡張子が除かれたものが
gosh> *** ERROR: unbound variable: 返されます。すなわち、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: path-swap-extension
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "/foo/bar.o"
gosh> *** ERROR: unbound variable: path-swap-extension
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "/foo/bar"
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: find-file-in-paths
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: name
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &keyword
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: paths
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pred
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 名前NAMEを持ち、述語PREDを満たすファイルをパス名のリストPATHS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: から探します。見つかった場合はファイルの絶対パス名を、見つからなかった場合は
Stack Trace:
_______________________________________
gosh> #f
gosh> を返します。
gosh> *** ERROR: unbound variable: NAMEが絶対パス名で与えられた場合はそれが存在するかどうかと
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PREDを満たすかどうかのみがチェックされます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PATHSのデフォルト値は環境変数
Stack Trace:
_______________________________________
gosh> PATH
gosh> から取られます。また、
gosh> *** ERROR: unbound variable: PREDのデフォルト値は
Stack Trace:
_______________________________________
gosh> file-is-executable?
gosh> (*Note ファイル属性ユーティリティ::参照)
gosh> *** ERROR: unbound variable: です。すなわち、デフォルトでは
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: この手続きはコマンドサーチパスから実行可能ファイルを探すのに使えます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: find-file-in-paths
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "/bin/ls"
gosh> *** ERROR: unbound variable: expand-path
Stack Trace:
_______________________________________
  0  (expand-path "~/.myapp")
        At line 21948 of "(stdin)"
gosh> *** ERROR: unbound variable: |11.11.3|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ファイル属性ユーティリティ
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 21991: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 21992: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: file-eq?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: path1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: path2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: file-eqv?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: path1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: path2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: file-equal?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: path1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: path2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PATH1とPATH2で示されるファイルを比較します。
Stack Trace:
_______________________________________
gosh> file-eq?
gosh> と
gosh> file-eqv?
gosh> はPATH1とPATH2が
gosh> *** ERROR: unbound variable: 全く同一のファイルを参照しているかどうか、すなわち、同じデバイス上にあり同じ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: inode番号を持つかどうかをチェックします。二つの手続きの違いは、
Stack Trace:
_______________________________________
gosh> path1
gosh> やPATH2の最後のコンポーネントがシンボリックリンクで
gosh> *** ERROR: unbound variable: あった場合に、FILE-EQ?はリンクそのものの比較をするが
Stack Trace:
_______________________________________
gosh> file-eqv?
gosh> はリンクを辿った先のファイルの比較をする、という点です。
gosh> file-equal?
gosh> はPATH1とPATH2をその内容まで考慮して比較します。
gosh> *** ERROR: unbound variable: すなわち、二つのファイルが
Stack Trace:
_______________________________________
gosh> file-eqv?
gosh> の意味で同一でなかった場合、
gosh> file-equal?
gosh> はファイルの内容を比較し、全てが一致した場合に
gosh> #t
gosh> を返します。
gosh> *** ERROR: unbound variable: PATH1とPATH2ともにディレクトリが与えられた場合の
Stack Trace:
_______________________________________
gosh> file-equal?
gosh> の動作は未定義です。将来、ディレクトリ内容を
gosh> *** ERROR: unbound variable: スキャンするような拡張が加えられるかもしれません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Generic
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: file-mtime=?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: f1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: f2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Generic
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: file-mtime<?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: f1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: f2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Generic
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: file-mtime<=?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: f1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: f2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Generic
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: file-mtime>?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: f1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: f2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Generic
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: file-mtime>=?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: f1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: f2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 二つのファイルの変更時間を比較します。それぞれの引数に対して、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 次のような型のオブジェクトが渡せるようなメソッドが定義されています。
Stack Trace:
_______________________________________
gosh> #<subr *>
gosh> *** ERROR: unbound variable: 文字列のパス名。そのパス名で示されるファイルから変更時間が取られます。
Stack Trace:
_______________________________________
gosh> #<subr *>
gosh> <sys-stat>
gosh> オブジェクト
gosh> *** ERROR: unbound variable: ファイルの状態::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stat構造体から変更時間が取られます。
Stack Trace:
_______________________________________
gosh> #<subr *>
gosh> <time>
gosh> オブジェクト。その示す時間が変更時間と考えられます。
gosh> #<subr *>
gosh> *** ERROR: unbound variable: 数値。変更時間をUnix
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Epochからの秒数で表したものと見なされます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: file-mtime>?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: file-mtime>?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Generic
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: file-ctime=?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: f1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: f2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Generic
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: file-atime=?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: f1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: f2
Stack Trace:
_______________________________________
gosh> file-mtime=?
gosh> と同じですが、ファイルの属性変更時間とアクセス時間に
gosh> *** ERROR: unbound variable: 関して比較します。
Stack Trace:
_______________________________________
gosh> <
gosh> ,`<=
gosh> ,`>
gosh> ,`>=
gosh> を使う関数も同様に定義されています。
gosh> *** ERROR: unbound variable: |11.11.4|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ファイル操作
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 22291: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: IPORT
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: から読み飛ばします。それから、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: TOKENIZER-SPECS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: にしたがってトークンをひとつ読み込みます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: トークンを読み込む前に、IPORT
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: EOF
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: に到達したら、EOF
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 返されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: TOKENIZER-SPECS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: はトークナイザ仕様のリストです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: トークナイザ仕様は、文字集合または文字集合と手続きのペアのどちらかです。
Stack Trace:
_______________________________________
gosh> CFWS
gosh> を読み飛ばしたあと、この手続きは
gosh> *** ERROR: unbound variable: IPORT
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の先頭の一文字
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を見て、TOKENIZER-SPECS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のひとつひとつに対してチェックします。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: その文字が含まれている文字集合がみつかれば、トークンを次のようにして
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 引き出します。トークナイザ仕様が文字集合だけの場合、その文字集合に
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 属している文字の並びがトークンを構成します。トークナイザ仕様が文字集合と
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 手続きのペアだったら、その手続きを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: IPORT
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: とともに呼びだし、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: トークンを読み込みます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: もし、先頭も文字がどの文字集合ともマッチしなければ、そも文字が
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: IPORT
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: から取り出され、それが返されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: デフォルトの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: TOKENIZER-SPECS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は以下のようになっています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: rfc822-quoted-string
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ここで
Stack Trace:
_______________________________________
gosh> rfc822-quoted-string
gosh> および
gosh> rfc822-dot-atom
gosh> は
gosh> *** ERROR: unbound variable: 後述するトークナイザ手続きで、
Stack Trace:
_______________________________________
gosh> *rfc822-atext-chars*
gosh> は
gosh> *** ERROR: unbound variable: RFC2822
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: で
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 規定された
Stack Trace:
_______________________________________
gosh> atext
gosh> の文字集合に束縛されています。
gosh> *** ERROR: unbound variable: つまり、
Stack Trace:
_______________________________________
gosh> rfc822-next-token
gosh> はデフォルトでは
gosh> *** ERROR: unbound variable: RFC2822
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: で規定された
Stack Trace:
_______________________________________
gosh> quoted-string
gosh> あるいは
gosh> dot-atom
gosh> のトークンを引き出します。
gosh> *** ERROR: unbound variable: TOKENIZER-SPECS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: をつかって、ヘッダフィールドのパーズ方法を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: カスタマイズすることができます。たとえば、
Stack Trace:
_______________________________________
gosh> *** ERROR: invalid application: (1)
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 英字で構成された単語、または
Stack Trace:
_______________________________________
gosh> *** ERROR: invalid application: (2)
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: クウォート文字列、のトークンを取り出したいときには、
Stack Trace:
_______________________________________
gosh> rfc822-next-token
gosh> をこんなふうに呼べます。
gosh> *** ERROR: unbound variable: iport
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: rfc822-field->tokens
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: field
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: tokenizer-specs
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: これは便利関数です。フィールド本体
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: FIELD
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: に対応する入力文字列ポート
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を生成し、それに対して、
Stack Trace:
_______________________________________
gosh> rfc822-next-token
gosh> を全入力を消費するまで、
gosh> *** ERROR: unbound variable: 繰り返しよび、トークンのリストを返します。TOKENIZER-SPECS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は、
Stack Trace:
_______________________________________
gosh> rfc822-next-token
gosh> に渡されます。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: rfc822-skip-cfws
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: iport
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: IPORT
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: から、すべてのコメントおよび/または白空白文字を消費し、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 白空白でもコメントでもない、先頭の文字を返します。返された文字は、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: IPORTに残ります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Constant:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *rfc822-atext-chars*
Stack Trace:
_______________________________________
gosh> atom
gosh> を構成する有効な文字集合に束縛されています。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Constant:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *rfc822-standard-tokenizers*
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: デフォルトの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: TOKENIZER-SPECS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: に束縛されています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: rfc822-atom
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: iport
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: rfc822-dot-atom
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: iport
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: rfc822-quoted-string
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: iport
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: それぞれ、
Stack Trace:
_______________________________________
gosh> atom
gosh> 、
gosh> dot-atom
gosh> および
gosh> quoted-string
gosh> に
gosh> *** ERROR: unbound variable: 対応するトークナイザです。
Stack Trace:
_______________________________________
gosh> quoted-string
gosh> 中の二重引用符および
gosh> *** ERROR: unbound variable: エスケープのためのバックスラッシュは
Stack Trace:
_______________________________________
gosh> rfc822-quoted-string
gosh> に
gosh> *** ERROR: unbound variable: よって取り除かれます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 特定フィールド用パーザ
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 22376: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: It
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: receives
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> #<subr list>
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: header
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: data
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,in
"(stdin)":22377:,in

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: which
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: each
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: header
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: data
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: consists
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> (<name> <body>)
gosh> ,and
gosh> *** ERROR: unbound variable: writes
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: them
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: out
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: in
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: RFC822
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: header
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: field
Stack Trace:
_______________________________________
gosh> #<closure format>
gosh> *** ERROR: unbound variable: to
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: output
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: port
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: specified
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: by
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OUTPUT
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: keyword
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: argument.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: The
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: default
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: output
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: is
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: current
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: output
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: port.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: By
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: default
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,the
"(stdin)":22382:,the

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: procedure
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: assumes
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: HEADERS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: contains
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: all
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: header
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: fields
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,and
"(stdin)":22383:,and

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: adds
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: an
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: empty
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: line
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: in
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: end
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: output
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: to
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: indicate
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: end
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: header.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: You
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: can
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pass
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: true
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: value
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: to
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: CONTINUE
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: keyword
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: argument
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: to
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: prevent
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: this
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,enabling
"(stdin)":22385:,enabling

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: more
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: headers
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: can
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: be
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: added
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: later.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: I
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: said
Stack Trace:
_______________________________________
gosh> "a sort of"
gosh> *** ERROR: unbound variable: above.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: That
Stack Trace:
_______________________________________
gosh> s
gosh> *** ERROR: unbound variable: because
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: this
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: function
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: doesn
Stack Trace:
_______________________________________
gosh> t
gosh> *** ERROR: unbound variable: can
Stack Trace:
_______________________________________
gosh> #<syntax do>
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: exact
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: inverse.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Specifically
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,the
"(stdin)":22389:,the

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: caller
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: is
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: responsible
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: for
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: line
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: folding
Stack Trace:
_______________________________________
gosh> #<syntax and>
gosh> #<generic make (1)>
gosh> *** ERROR: unbound variable: sure
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: each
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: header
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: line
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: doesn
Stack Trace:
_______________________________________
gosh> t
gosh> *** ERROR: unbound variable: exceed
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> "hard limit"
gosh> *** ERROR: unbound variable: defined
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: by
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: RFC2822
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: octets
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 22392: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: This
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: procedure
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: cannot
Stack Trace:
_______________________________________
gosh> #<syntax do>
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: line
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: folding
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: on
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: behalf
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: caller
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,because
"(stdin)":22393:,because

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: places
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: where
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: line
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: folding
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: is
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: possible
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: depend
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: on
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: semantics
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: each
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: header
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: field.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: It
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: is
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: also
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: caller
Stack Trace:
_______________________________________
gosh> s
gosh> *** ERROR: unbound variable: responsibility
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: to
Stack Trace:
_______________________________________
gosh> #<generic make (1)>
gosh> *** ERROR: unbound variable: sure
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: header
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: field
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: bodies
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: don
Stack Trace:
_______________________________________
gosh> t
gosh> *** ERROR: unbound variable: have
Stack Trace:
_______________________________________
gosh> #<closure any>
gosh> *** ERROR: unbound variable: characters
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: except
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: non-NUL
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: US-ASCII
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: characters.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: If
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: you
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: want
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: to
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: include
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: characters
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: outside
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: that
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: range
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,you
"(stdin)":22399:,you

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: should
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: convert
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: them
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: in
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: way
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: allowed
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: by
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: protocol
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,e.g.
"(stdin)":22400:,e.g.

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: MIME.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: The
Stack Trace:
_______________________________________
gosh> rfc.mime
gosh> module
gosh> *** ERROR: unbound variable: MIMEメッセージ処理::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: provides
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: convenience
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: procedure
Stack Trace:
_______________________________________
gosh> mime-encode-text
gosh> for
gosh> *** ERROR: unbound variable: such
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: purpose.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Again
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,this
"(stdin)":22402:,this

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: procedure
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: cannot
Stack Trace:
_______________________________________
gosh> #<syntax do>
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: encoding
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: automatically
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,since
"(stdin)":22403:,since

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: way
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: field
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: should
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: be
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: encoded
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: depends
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: on
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: header
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: fields.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: What
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: this
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: procedure
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: can
Stack Trace:
_______________________________________
gosh> #<syntax do>
gosh> *** ERROR: unbound variable: is
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: to
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: check
Stack Trace:
_______________________________________
gosh> #<syntax and>
gosh> *** ERROR: unbound variable: report
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: such
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: violations.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: By
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: default
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,it
"(stdin)":22407:,it

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: runs
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: several
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: checks
Stack Trace:
_______________________________________
gosh> #<syntax and>
gosh> *** ERROR: unbound variable: signals
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: an
Stack Trace:
_______________________________________
gosh> #<closure error>
gosh> #<syntax if>
gosh> *** ERROR: unbound variable: it
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: finds
Stack Trace:
_______________________________________
gosh> #<closure any>
gosh> *** ERROR: unbound variable: violations
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: RFC2822.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: You
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: can
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: control
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: this
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: checking
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: behavior
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: by
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: CHECK
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: keyword
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: argument.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: It
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: can
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: take
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: one
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: following
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: values:
Stack Trace:
_______________________________________
gosh> :error
gosh> Default.
gosh> *** ERROR: unbound variable: Signals
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: an
Stack Trace:
_______________________________________
gosh> #<closure error>
gosh> #<syntax if>
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: violation
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: is
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: found.
Stack Trace:
_______________________________________
gosh> #f
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,:ignore
"(stdin)":22415:,:ignore

Stack Trace:
_______________________________________
gosh> Doesn
gosh> t
gosh> *** ERROR: unbound variable: perform
Stack Trace:
_______________________________________
gosh> #<closure any>
gosh> *** ERROR: unbound variable: check.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Trust
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: caller.
Stack Trace:
_______________________________________
gosh> PROCEDURE
gosh> When
gosh> rfc822-write-headers
gosh> finds
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: violation
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,the
"(stdin)":22419:,the

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: procedure
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: is
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: called
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: with
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: three
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: arguments
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: header
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: field
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: body
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,and
"(stdin)":22421:,and

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: type
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: violation
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: explained
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: below.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: The
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: procedure
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: may
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: correct
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: problem
Stack Trace:
_______________________________________
gosh> #<syntax and>
gosh> *** ERROR: unbound variable: return
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: two
Stack Trace:
_______________________________________
gosh> #<subr values>
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,the
"(stdin)":22423:,the

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: corrected
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: header
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: field
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: name
Stack Trace:
_______________________________________
gosh> #<syntax and>
gosh> *** ERROR: unbound variable: body.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: The
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: returned
Stack Trace:
_______________________________________
gosh> #<subr values>
gosh> *** ERROR: unbound variable: are
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: checked
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: again.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: If
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: procedure
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: returns
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: header
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: field
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: name
Stack Trace:
_______________________________________
gosh> #<syntax and>
gosh> *** ERROR: unbound variable: body
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: unchanged
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,an
"(stdin)":22425:,an

Stack Trace:
_______________________________________
gosh> #<closure error>
gosh> *** ERROR: unbound variable: is
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: signalled
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: in
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: same
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: way
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: as
Stack Trace:
_______________________________________
gosh> :error
gosh> is
gosh> *** ERROR: unbound variable: specified.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: The
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: third
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: argument
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: passed
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: to
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: procedure
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: given
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: to
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: CHECK
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: argument
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: is
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: one
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: following
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: symbols.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: New
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: symbols
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: may
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: be
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: added
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: in
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: future
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: versions
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: for
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: more
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: checks.
Stack Trace:
_______________________________________
gosh> incomplete-string
gosh> Incomplete
gosh> #<subr string>
gosh> *** ERROR: unbound variable: is
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: passed.
Stack Trace:
_______________________________________
gosh> bad-character
gosh> Header
gosh> *** ERROR: unbound variable: field
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: contains
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: characters
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: outside
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: US-ASCII
Stack Trace:
_______________________________________
gosh> #<syntax or>
gosh> *** ERROR: unbound variable: NUL.
Stack Trace:
_______________________________________
gosh> line-too-long
gosh> Line
gosh> #<subr length>
gosh> *** ERROR: unbound variable: exceeds
Stack Trace:
_______________________________________
gosh> 998
gosh> *** ERROR: unbound variable: octet
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: limit.
Stack Trace:
_______________________________________
gosh> stray-crlf
gosh> The
gosh> #<subr string>
gosh> *** ERROR: unbound variable: contains
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: CR
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: and/or
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: LF
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: character
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: that
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: doesn
Stack Trace:
_______________________________________
gosh> t
gosh> *** ERROR: unbound variable: consist
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proper
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: line
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: folding.
Stack Trace:
_______________________________________
gosh> 11.15
gosh> rfc.base64
gosh> -
gosh> *** ERROR: unbound variable: Base64エンコーディング
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 22475: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を読み込むと終了します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Base64
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: でエンコードされた文字として適当でない文字は沈黙のまま無視されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: base64-decode-string
Stack Trace:
_______________________________________
gosh> #<subr string>
gosh> *** ERROR: unbound variable: Base64
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: でエンコードされた文字列
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: STRING
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: をデコードして文字列を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 変換は
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: STRING
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の終わりか、終端文字
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 22481: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: で終了します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Base64
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: でエンコードされた文字として適当でない文字は沈黙のまま無視されます。
Stack Trace:
_______________________________________
gosh> 11.16
gosh> rfc.cookie
gosh> -
gosh> *** ERROR: unbound variable: HTTPクッキー
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 22810: bad dot syntax
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ET、HEAD、POSTリクエストのみがサポートされており、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: HTTP/1.0のサーバーとはうまく通信できません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: また、HTTP/1.1の先進的機能、例えば永続的接続などはサポートしていません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: これらの機能は、将来のバージョンで追加されるでしょう。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Condition:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <http-error>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: サーバから接続が切られた場合や、サーバの返したHTTPレスポンスのフォーマットが
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 正しくない場合に投げられるコンディションです。
Stack Trace:
_______________________________________
gosh> <error>
gosh> を継承します。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: http-get
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: server
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: request-uri
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &keyword
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: sink
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: flusher
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: no-redirect
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: http-head
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: server
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: request-uri
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &keyword
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: no-redirect
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: http-post
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: server
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: request-uri
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: body
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &keyword
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: sink
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: flusher
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: no-redirect
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SERVERに、それぞれHTTPのGET、HEAD、POSTリクエストを送り、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: サーバの応答を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: サーバが
Stack Trace:
_______________________________________
gosh> "3xx"
gosh> *** ERROR: unbound variable: のリダイレクトを指示する応答を返した場合、これらの手続きは
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: デフォルトで、応答のメッセージヘッダの
Stack Trace:
_______________________________________
gosh> "location"
gosh> *** ERROR: unbound variable: で返されるURIに従うよう
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 試みます。リダイレクションを抑制するには、下の
Stack Trace:
_______________________________________
gosh> "キーワード引数"
gosh> *** ERROR: unbound variable: を参照してください。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *必須の引数:*
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SERVER引数では、文字列でHTTPサーバ名を指定します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: サーバ名は、オプションでコロンに続いてポート番号を付加できます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Examples:
Stack Trace:
_______________________________________
gosh> "w3c.org"
gosh> ,`"mycompany.com:8080"
gosh> *** READ-ERROR: Read error at "(stdin)":line 22836: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: REQUEST-URI引数は、RFC2616で規定されているリクエストURIで、通常これは
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: HTTP
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: URLのパス部分です。
Stack Trace:
_______________________________________
gosh> http-post
gosh> は、サーバへポストされる文字列、BODYを第3引数として
gosh> *** ERROR: unbound variable: 取ります。ボディは
Stack Trace:
_______________________________________
gosh> "そのまま"
gosh> *** ERROR: unbound variable: 送られるので、呼び出し側は必要なエスケープや
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: エンコーディングを行う必要があります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: あるURLのコンテンツを取得する最もシンプルなフォームは次のようになるでしょう。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: http-get
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: プロクシを通してのアクセスは、SERVERにプロクシ・サーバを指定し、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: REQUEST-URIに完全なURIを渡すことで行えますが、まだテストされていません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *戻り値:*
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 全ての手続きは3つの値を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |1つ目は、RFC2616で定義されているステータスコードの文字列値|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |200、|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: です。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |2つ目は、パーズされたヘッダのリストで、リストの要素は|
Stack Trace:
_______________________________________
gosh> (HEADER-NAME VALUE |...|)
gosh> です。HEADER-NAMEはヘッダの文字列名
gosh> *** ERROR: unbound variable: や
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: で、VALUEは対応する値の文字列値です。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ヘッダ名は小文字に変換されます。値は、RFC2822で定義されている無指定行区切
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ソフト・ライン・ブレイク
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が除かれる以外はそのままです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: サーバが同じ名前のヘッダを1つ以上返した場合は、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |1つのリストに統合されます。それ以外では、2つ目の戻り値に|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: おけるヘッダのリストの順番は、サーバの応答での順番と同じです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |3つ目の戻り値は、サーバの応答におけるメッセージボディです。|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: デフォルトでは、文字列で表現されたメッセージボディそのものです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: サーバの応答がボディを持たない場合、3つ目の戻り値は
Stack Trace:
_______________________________________
gosh> #f
gosh> です。
gosh> *** ERROR: unbound variable: キーワード引数によって、メッセージボディがどのように扱われるかを制御できます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 例えば、中間的な文字列を作らずに、返されたメッセージボディを直接ファイルに
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 格納することが出来ます。詳細は以下で説明しています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *キーワード引数:*
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: デフォルトで、これらの手続きはリクエストメッセージに
Stack Trace:
_______________________________________
gosh> "Host"
gosh> ヘッダ・フィールドを
gosh> *** ERROR: unbound variable: 追加するだけです。他のヘッダ・フィールドを追加するためにキーワード引数を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 与えることができます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: http-get
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 以下のキーワード引数は手続きによって解釈され、リクエストヘッダには現れません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: NO-REDIRECT
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 真の値が与えられた場合、リダイレクションには従わなくなります。すなわち、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 手続きは
Stack Trace:
_______________________________________
gosh> "3xx"
gosh> *** ERROR: unbound variable: のメッセージをそのまま返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SINK
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,FLUSHER
"(stdin)":22885:,FLUSHER

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: これらのキーワード引数によりメッセージ・ボディがどのように扱われるかを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: カスタマイズできます。SINKには出力ポートを、FLUSHERには2引数を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 取る手続きを渡さなければなりません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 手続きがメッセージ・ボディを受信し始めると、SINKへ受け取った
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: データ片をフィードします。手続きがメッセージ・ボディを受信し終わると、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: FLUSHERに与えられた手続きが、SINKと
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 戻り値と同じフォーマットの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: メッセージ・ヘッダ・フィールドのリストとともに
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 呼び出されます。FLUSHERの戻り値が、手続きからの3つ目の戻り値と
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: なります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: したがって、SINKのデフォルト値は、新しく開かれた文字列ポートで、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: FLUSHERのデフォルト値は
Stack Trace:
_______________________________________
gosh> (lambda (sink headers) (get-output-string sink))
gosh> とも言えます。
gosh> *** ERROR: unbound variable: 以下のサンプルは、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: とても大きい可能性のある
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列バッファを作らずに、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: メッセージ・ボディを直接ファイルに保存します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: http-get
Stack Trace:
_______________________________________
gosh> 11.2
gosh> rfc.ip
gosh> -
gosh> *** ERROR: unbound variable: IPパケット
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 23399: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> #<subr *>
gosh> *** ERROR: unbound variable: authorityパートのuser-infoを文字列で。
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 23402: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> #<subr *>
gosh> *** ERROR: unbound variable: authorityパートのhostnameを文字列で。
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 23406: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> #<subr *>
gosh> *** ERROR: unbound variable: authorityパートのport番号を整数で。
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 23409: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> #<subr *>
gosh> *** ERROR: unbound variable: pathパート。
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 23412: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> #<subr *>
gosh> *** ERROR: unbound variable: queryパート。
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 23416: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> #<subr *>
gosh> *** ERROR: unbound variable: fragmentパート。
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 23420: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 以下の手続きはより詳細に、段階をふんでuriを分割してゆくものです。
Stack Trace:
_______________________________________
gosh> uri-scheme&specific
gosh> は
gosh> *** ERROR: unbound variable: URI
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: URI
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を引数に取り、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: スキーム部分と、そのスキーム特有の部分を表す2つの値を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: URI
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |がスキーム部分を持たない場合、#F|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uri-scheme&specific
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "mailto"
gosh> #<syntax and>
gosh> "sclaus@north.pole"
gosh> *** ERROR: unbound variable: uri-scheme&specific
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> #f
gosh> #<syntax and>
gosh> "/icons/new.gif"
gosh> *** ERROR: unbound variable: URI
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が階層的な記法を用いている場合、すなわち、
Stack Trace:
_______________________________________
gosh> "`//AUTHORITY/PATH?QUERY#FRAGMENT'"
gosh> *** ERROR: unbound variable: のような場合、スキーム特有の部分を
Stack Trace:
_______________________________________
gosh> uri-decompose-hierarchical
gosh> に渡すと、AUTHORITY、PATH、QUERY、FRAGMENT
gosh> *** ERROR: unbound variable: の4つの値が返ります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uri-decompose-hierarchical
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "www.foo.com"
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,"/about/company.html"
"(stdin)":23437:,"/about/company.html"

Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,#f
"(stdin)":23437:,#f

Stack Trace:
_______________________________________
gosh> #<syntax and>
gosh> #f
gosh> *** ERROR: unbound variable: uri-decompose-hierarchical
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "zzz.org"
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,"/search"
"(stdin)":23439:,"/search"

Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,"key=%3fhelp"
"(stdin)":23439:,"key=%3fhelp"

Stack Trace:
_______________________________________
gosh> #<syntax and>
gosh> #f
gosh> *** ERROR: unbound variable: uri-decompose-hierarchical
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "jjj.jp"
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,"/index.html"
"(stdin)":23441:,"/index.html"

Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,#f
"(stdin)":23441:,#f

Stack Trace:
_______________________________________
gosh> #<syntax and>
gosh> "whatsnew"
gosh> *** ERROR: unbound variable: uri-decompose-hierarchical
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> #f
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,#f
"(stdin)":23443:,#f

Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,#f
"(stdin)":23443:,#f

Stack Trace:
_______________________________________
gosh> #<syntax and>
gosh> #f
gosh> *** ERROR: unbound variable: さらに、階層的
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: URI
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: AUTHORITY
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の部分を
Stack Trace:
_______________________________________
gosh> uri-decompose-authority
gosh> に渡すと、USERINFO、
gosh> *** ERROR: unbound variable: HOST、PORT
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が返ります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uri-decompose-authority
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> #f
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,"yyy.jp"
"(stdin)":23448:,"yyy.jp"

Stack Trace:
_______________________________________
gosh> #<syntax and>
gosh> "8080"
gosh> *** ERROR: unbound variable: uri-decompose-authority
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "mylogin"
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,"yyy.jp"
"(stdin)":23450:,"yyy.jp"

Stack Trace:
_______________________________________
gosh> #<syntax and>
gosh> #f
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uri-compose
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &keyword
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: scheme
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: userinfo
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: host
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: port
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: authority
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: path
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: path*
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: query
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: fragment
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: specific
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 与えられたコンポーネントから
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: URI
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を構成します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 妥当な
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: URI
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を作成するためのコンポーネントの組み合わせはたくさんあります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 以下のダイアグラムは、考え得る組み合わせの方法を示しています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: /-----------------specific-------------------
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |\\|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |                                            |
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: scheme-+------authority-----+-+-------path*---------+-
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |                    |
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |                     |
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |\\-userinfo-host-port-/|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |\\-path-query-fragment-/|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: キーワード引数に
Stack Trace:
_______________________________________
gosh> #f
gosh> が与えられた場合、それはキーワード引数が
gosh> *** ERROR: unbound variable: 指定されないことと等価です。これは
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: URI
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: をパーズした結果を渡す場合に
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 特に有用です。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: コンポーネントに適切でない文字が含まれている場合は、
Stack Trace:
_______________________________________
gosh> url-compose
gosh> に渡す前に正しくエスケープされなければなりません。
gosh> *** ERROR: unbound variable: いくつかの例を示します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uri-compose
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "http://foo.com:80/index.html#top"
gosh> *** ERROR: unbound variable: uri-compose
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "http://foo.net/cgi-bin/query.cgi?keyword=foo"
gosh> *** ERROR: unbound variable: uri-compose
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "mailto:a@foo.org"
gosh> *** ERROR: unbound variable: uri-decompose-hierarchical
Stack Trace:
_______________________________________
  0  (uri-decompose-hierarchical "//foo.jp/index.html#whatsnew")
        At line 23484 of "(stdin)"
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> "//foo.jp/index.html#whatsnew"
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uri-decode
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &keyword
Stack Trace:
_______________________________________
gosh> :cgi-decode
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uri-decode-string
Stack Trace:
_______________________________________
gosh> #<subr string>
gosh> *** ERROR: unbound variable: &keyword
Stack Trace:
_______________________________________
gosh> :cgi-decode
gosh> :encoding
gosh> *** ERROR: unbound variable: URI
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: エンコーディング、すなわち、
Stack Trace:
_______________________________________
gosh> %
gosh> でエスケープされた
gosh> *** ERROR: unbound variable: URI
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: デコードします。
Stack Trace:
_______________________________________
gosh> uri-decode
gosh> は現在の入力ポートから入力を受け取り、
gosh> *** ERROR: unbound variable: デコードした結果を現在の出力ポートに書き出します。
Stack Trace:
_______________________________________
gosh> uri-decode-string
gosh> は
gosh> *** ERROR: unbound variable: STRING
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を入力とし、デコードした
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: CGI-DECODE
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が真の場合は、
Stack Trace:
_______________________________________
gosh> +
gosh> がスペース文字に置換されます。
gosh> uri-decode-string
gosh> には、外部の文字エンコーディングを指定する
gosh> *** ERROR: unbound variable: ENCODINGキーワード引数を与えることができます。この引数が与えれた
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 場合、デコードされたオクテットの列を指定された文字エンコーディングであると
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: してGaucheの内部文字エンコーディングへと変換したものが返されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uri-encode
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &keyword
Stack Trace:
_______________________________________
gosh> :noescape
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: uri-encode-string
Stack Trace:
_______________________________________
gosh> #<subr string>
gosh> *** ERROR: unbound variable: &keyword
Stack Trace:
_______________________________________
gosh> :noescape
gosh> :encoding
gosh> *** ERROR: unbound variable: 安全でない文字を、
Stack Trace:
_______________________________________
gosh> %
gosh> によるエスケープでエンコードします。
gosh> uri-encode
gosh> は現在の入力ポートから入力を受け取り、
gosh> *** ERROR: unbound variable: 結果を現在の出力ポートに書き出します。
Stack Trace:
_______________________________________
gosh> uri-encode-string
gosh> は
gosh> *** ERROR: unbound variable: STRING
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を入力とし、エンコードした
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: デフォルトでは、RFC3986
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: で
Stack Trace:
_______________________________________
gosh> "非予約文字"
gosh> *** ERROR: unbound variable: として規定されていない文字は
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: エスケープされます。NOESCAPE
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 引数に異なる文字セットを渡すことで、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: それらがエンコードされるのを抑止することができます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 例えば古いRFC2396では
Stack Trace:
_______________________________________
gosh> "非予約文字"
gosh> *** ERROR: unbound variable: がいくつか多かったのですが、
Stack Trace:
_______________________________________
gosh> *rfc2396-unreserved-char-set*
gosh> (下記参照)
gosh> *** ERROR: unbound variable: を渡すことで
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: それらの文字がエスケープされるのを防ぐことができます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: マルチバイト文字は、デフォルトではGauche
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のネイティブなマルチバイト表現の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: オクテット・ストリームとしてエンコードされます。ただし
Stack Trace:
_______________________________________
gosh> uri-encode-string
gosh> にはENCODINGキーワード引数を渡すことができて、
gosh> *** ERROR: unbound variable: その場合はまずSTRINGが指定された文字エンコーディングへと変換されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Constant:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *rfc2396-unreserved-char-set*
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Constant:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *rfc3986-unreserved-char-set*
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: これらの定数はそれぞれ、RFC2396とRFC3986で定義されている
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 「非予約文字」の文字集合に束縛されています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字集合::および*Note
Stack Trace:
_______________________________________
gosh> 11.27
gosh> slib
gosh> -
gosh> *** ERROR: unbound variable: SLIBインタフェース
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 23898: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: | Reference)* '"'\x0a                           |
Stack Trace:
_______________________________________
gosh> "'"
gosh> *** READ-ERROR: Read error at "(stdin)":line 23899: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: | Reference)* "'"\x0a           [25] Eq ::= S? '=' S?\x0a     この手続きは、NAME(UNRES-NAME)とVALUE(文字列)のペアである\x0a     ATTLISTを返します。\x0a     PORTでの現在の文字は、NCNameの開始文字ではなく、空白ではない文字です。\x0a\x0a     'AttValue'を読み込むときには、以下のルールに留意して下さい。\x0a     "属性の値がアプリケーションに渡されるか妥当性が検査される前に、\x0a     XMLプロセッサはそれを以下のように正規化しなければならない:\x0a        * 文字参照は、属性値に参照された文字を追加することで処理される。\x0a\x0a        * 実体参照は、その実体のテキストの置換を再帰的に行うことにより\x0a          処理される。[ENTITIES参照] [名前付きのエンティティ、amp lt gt\x0a          quot aposは定義済みと想定される]\x0a\x0a        * 空白文字(`#x20'、`#xD'、`#xA'、`#x9')は、\x0a          外部解析済み実体か内部解析済み実体のリテラルの実体の値の一部である\x0a          "`#xD#xA'"のシーケンスにただ1つの`#x20'が追加されることを\x0a          除いて、正規化された値に`#x20'を追加することで処理される。\x0a\x0a        *\x0a          他の文字は、正規化された値をそれらに追加することにより処理される"\x0a\x0a     こちらも参照のこと。\x0a           WFC: XML-Spec.html#CleanAttrVals\x0a           WFC: XML-Spec.html#uniqattspec\x0a\x0a -- Function: ssax:resolve-name port unres-name namespaces\x0a          apply-default-ns?\x0a     与えられた適切なNAMESPACESの宣言を用いて、UNRES-NAMEを\x0a     RES-NAMEに変換する。\x0a     最後の引数APPLY-DEFAULT-NS?は、デフォルト名前空間の適用を行うか\x0a     どうかを決めます(例えば、属性名には適用しないなど)。\x0a\x0a     `REC-xml-names/#nsc-NSDeclared'によれば、接頭辞"xml"は\x0a     名前空間名"`http://www.w3.org/XML/1998/namespace'"に定義済みで束縛されていると\x0a     されます。\x0a\x0a     この手続きは、名前空間の制約をテストします:\x0a     `http://www.w3.org/TR/REC-xml-names/#nsc-NSDeclared'。\x0a\x0a -- Function: ssax:uri-string->symbol uri-str\x0a     URI-STRを適切なシンボルに変換します。\x0a\x0a -- Function: ssax:complete-start-tag tag port elems entities namespaces\x0a     この手続きは、開始タグのマークアップのパージングを完了するためのものです。\x0a     この手続きは、開始タグトークンが読み込まれた後に呼ばれなければなりません。\x0a     TAGはUNRES-NAMEです。 ELEMSは`xml-decl::elems'のインスタンスで、\x0a     手続きに、要素とそれらの属性の妥当性検査を_行わない_ように\x0a     指示するために、`#f'を指定することができます。\x0a\x0a     この手続きはいくつかの値を返します。\x0a    ELEM-GI\x0a          RES-NAME。\x0a\x0a    ATTRIBUTES\x0a          要素の属性。`(RES-NAME . STRING)'というペアのATTLIST。\x0a          このリストは、`xmlns'属性を_含みません_。\x0a\x0a    NAMESPACES\x0a          パージング中の開始タグに含まれる名前空間(再)宣言により修正された後の\x0a          名前空間の入力リスト。\x0a\x0a     終了時のPORTでの現在の位置は、開始タグのマークアップを終了する\x0a     `#>'の後になります。\x0a\x0a     こちらも参照のこと。\x0a           VC: XML-Spec.html#enum\x0a           VC: XML-Spec.html#RequiredAttr\x0a           VC: XML-Spec.html#FixedAttr\x0a           VC: XML-Spec.html#ValueType\x0a           WFC: XML-Spec.html#uniqattspec (after namespaces prefixes are resolved)\x0a           VC: XML-Spec.html#elementvalid\x0a           WFC: REC-xml-names/#dt-NSName\x0a\x0a     XML勧告では明示されていませんが、XMLNSとXMLNS:属性は、\x0a     (そのデフォルト値を指定するために宣言されることが出来ますが)\x0a     宣言される必要がないことに注意して下さい。\x0a\x0a -- Function: ssax:read-external-id port\x0a     この手続きは、`ExternalID'をパーズします。\x0a           [75] ExternalID ::= 'SYSTEM' S SystemLiteral\x0a                           |
Stack Trace:
_______________________________________
gosh> PUBLIC
gosh> S
gosh> *** ERROR: unbound variable: PubidLiteral
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: S
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SystemLiteral
Stack Trace:
_______________________________________
gosh> *** ERROR: invalid application: (11)
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SystemLiteral
Stack Trace:
_______________________________________
gosh> ::=
gosh> *** READ-ERROR: Read error at "(stdin)":line 23982: extra close parenthesis
Stack Trace:
_______________________________________
gosh> #<subr *>
gosh> "') | ("
gosh> " [^']* "
gosh> ")\n           [12] PubidLiteral ::=  '"
gosh> PubidChar*
gosh> "' | "
gosh> " (PubidChar - "
gosh> ")* "
gosh> "\n           [13] PubidChar ::=  #x20 | #xD | #xA | [a-zA-Z0-9]\n                          | [-'()+,./:=?;!*#@$_%]\n     この手続きは、`ExternalID'が期待されるところで呼ばれます。\n     つまり、現在の文字は、それぞれ`SYSTEM'か`PUBLIC'トークンを開始する\n     `#S'か`#P'でなければなりません。\n     この手続きは、`SystemLiteral'を文字列として返します。\n     `PubidLiteral'は、存在したとしても無視されます。\n\n11.28.3 SSAXの高レベルのパーザとスキャナ {{{3\n----------------------------------------\n\nこれらは、全体的な実体(ドキュメント)あるいはその高レベルな断片\n(プロローグ、ルート要素など)をパーズします。\n\n -- Function: ssax:scan-Misc port\n     そのコンテキストでの`Misc'をスキャンします。\n          [1]  document ::=  prolog element Misc*\n          [22] prolog ::= XMLDecl? Misc* (doctypedec l Misc*)?\n          [27] Misc ::= Comment | PI |  S\n     以下の関数は、プロローグかエピローグのコンテキストで呼ばれます。\n     これらのコンテキストでは、空白文字は完全に無視されます。\n     `ssax:scan-Misc'からの戻り値は、`PI'トークンか`DECL'トークン、\n     `START'トークン、EOFのいずれかです。\n     コメントは無視され報告されません。\n\n -- Function: ssax:read-char-data port expect-eof? str-handler seed\n     この手続きは、XML文書かXML要素の文字内容を読むためのものです。\n           [43] content ::=\n                  (element | CharData | Reference | CDSect | PI\n                   | Comment)*\n     具体的には、この手続きは`CharData'を読み込み、`CDSect'と\n     文字実体を展開し、コメントをスキップします。\n     この手続きは、名前付き参照、EOF、`PI'あるいは開始/終了タグの開始地点で\n     停止します。\n\n    PORT\n          読み込むポート。\n\n    EXPECT-EOF?\n          EOFがノーマルかどうか、つまり、文字データがEOFで終わるかどうかを\n          表す真偽値。解析済み実体を処理している間はEOFはノーマル。\n\n    STR-HANDLER\n          STR-HANDLER。\n\n    SEED\n          STR-HANDLERの最初の呼び出し時に渡される引数。\n\n     この手続きは2つの結果、SEEDとTOKENを返します。\n\n     SEEDはSTR-HANDLERの最後の呼び出しの結果、あるいは\n     STR-HANDLERが一度も呼ばれなかった場合はオリジナルのseedです。\n\n     TOKENはEOFオブジェクト(これはEXPECT-EOF?が`#t'の場合のみ)か、\n        * STARTタグかENDタグを表すxml-token。\n          開始トークンの場合は、呼び出し側が読み込みを完了する必要がある。\n\n        * `PI'の開始を表すxml-token。\n          この`PI'の残りを読み込むかスキップするかはアプリケーションに\n          任される。\n\n        * 名前付き実体参照を表すxml-token。\n\n     `CDATA'セクションと文字参照はインラインで展開され返されません。\n     コメントは無視されます。\n\n     XML勧告が要求するように、文字データ中の全ての空白文字は保存されなければなりません。\n     しかし、`CR'文字(`#xD')は、`LF'文字(`#A')の前に現れるか\n     `#xA'文字で置き換えられた場合は、無視されなければなりません。\n     XML勧告のセクション2.10と2.11を参照して下さい。\n     また、正規のXML勧告も参照して下さい。\n\n -- Function: ssax:assert-token token kind gi error-cont\n     TOKENが、予想されたKINDのもので、予想されたGIを\n     持つことを確認します。GI引数は、実際には2つのシンボル、\n     名前空間URIかその接頭辞と、そのローカル名のペアでしょう。\n     アサーションが失敗したら、ERROR-CONTに3つの引数、TOKEN KIND GI\n     を渡されて評価されます。 ERROR-CONTの結果が返されます。\n\n11.28.4 SSAXの高レベルのパーザ - XMLからSXMLへ {{{3\n----------------------------------------------\n\nこれらのパーザは、SSAXパーザをインスタンス化するための構文的フォームのセットです。\nユーザは、完全な妥当性検査、妥当性検査なし、特定の妥当性検査を行うために\nこのパーザをインスタンス化できます。\nユーザは、どの`PI'について通知されたいかを指定します。\nユーザは、解析済み文字と要素のデータで何をしたいかを知らせます。\n後者のハンドラは、パージングがSAXやDOMモデルに従うかを決定します。\n\n -- Macro: ssax:make-pi-parser my-pi-handlers\n     1つの処理命令(`PI')をパーズして処理するパーザを作ります。\n\n     MY-PI-HANDLERS: (PI-TAG . PI-HANDLER)のペアの連想リスト。\n     PI-TAGはNCNAMEのシンボル、`PI'ターゲット。 PI-HANDLERはPORT PI-TAG\n     SEEDを引数とする手続きで、\n     PORTでは`PI'ターゲットの後の最初のシンボルを指しています。\n     ハンドラは、`PI'を終了する組み合わせとなる'`?>''を含む、\n     `PI'の残りを読み込みます。ハンドラは新しいseedを返します。\n     PI-TAGの1つは、シンボル`*DEFAULT*'でしょう。\n     これに対応するハンドラは、他のハンドラが扱わない`PI'を処理します。\n     `*DEFAULT*' PI-TAGが指定されていない場合は、\n     `ssax:make-pi-parser'は、`PI'のボディをスキップするパーザを\n     作ります。\n\n     `ssax:make-pi-parser'が返すのは、PORT PI-TAG SEEDを\n     取る手続きで、ユーザ指定のハンドラに従い現在の`PI'をパーズします。\n\n -- Macro: ssax:make-elem-parser my-new-level-seed my-finish-element\n          my-char-data-handler my-pi-handlers\n     その文字内容や子要素をも含む１つの要素をパーズし処理するパーザを作ります。\n     このパーザは通常、ドキュメントのルート要素の適用されます。\n\n    MY-NEW-LEVEL-SEED\n          ELEM-GI ATTRIBUTES NAMESPACES EXPECTED-CONTENT SEED\n          を引数に取る手続きで、ELEM-GIは処理されようとしている要素のRES-NAMEです。\n          この手続きは、要素の内容を処理するハンドラに渡されるseedを生成します。\n\n    MY-FINISH-ELEMENT\n          ELEM-GI ATTRIBUTES NAMESPACES PARENT-SEED SEED\n          を引数に取る手続きです。この手続きは、ELEM-GIのパージングが完了した時に\n          呼ばれます。 SEEDは、最後に呼ばれたパーザからの(あるいは、\n          要素が空要素であった場合は、MY-NEW-LEVEL-SEEDからの)結果です。\n          PARENT-SEEDは、MY-NEW-LEVEL-SEEDへ渡されたのと同じseedです。\n          この手続きは、パーザの結果となるseedを生成するためのものです。\n\n    MY-CHAR-DATA-HANDLER\n          STR-HANDLER。\n\n    MY-PI-HANDLERS\n          `ssax:make-pi-handler'を参照して下さい。\n\n     生成されたパーザは: START-TAG-HEAD PORT ELEMS ENTITIES NAMESPACES\n     PRESERVE-WS? SEED\n     を引数に取る手続きです。\n     この手続きは、開始タグのトークンが読み込まれた後に呼ばれなければなりません。\n     START-TAG-HEADは要素の開始タグのUNRES-NAMEです。\n     ELEMSは`xml-decl::elems'のインスタンスです。\n     `ssax:complete-start-tag::preserve-ws?'も参照して下さい。\n\n     こちらも参照のこと。\n           VC: XML-Spec.html#elementvalid\n           WFC: XML-Spec.html#GIMatch\n\n -- Macro: ssax:make-parser user-handler-tag user-handler-proc ...\n     XMLパージングフレームワークのインスタンスである、XMLパーザを作ります。\n     これは、提供されるユーザハンドラによって、SAX、DOM、あるいは特化された\n     パーザになります。\n\n     USER-HANDLER-TAGはシンボルで、タグに続く手続き的な式を識別します。\n     以下にタグと対応する手続きのシグネチャを示します。\n     全てのタグが指定される必要はありません。\n     いくつかが省略されると、合理的なデフォルトのものが適用されます。\n\n    `tag: DOCTYPE'\n          ハンドラ手続きの引数: PORT DOCNAME SYSTEMID INTERNAL-SUBSET?\n          SEED\n\n          INTERNAL-SUBSET?が`#t'なら、ポートでの現在の位置は内部DTDサブセットの\n          開始となる`#['を読んだ直後です。\n          手続きから戻る前に、このサブセットの残りの読み込みを完了しなければなりません\n          (あるいは、それを読むことに興味がなければ、skip-internal-subsetを呼ばなければなりません)。\n          終了時のポートでの位置は、DOCTYPE宣言全体のあとの最初のシンボルでなければなりません。\n\n          ハンドラ手続きは4つの値:\n          ELEMS ENTITIES NAMESPACES SEED\n          を生成しなければなりません。\n          ELEMSについては、`xml-decl::elems'を参照して下さい。\n          妥当性検査をオフにするためには、`#f'になるでしょう。\n          NAMESPACESは、通常、選択されたURI-SYMBに対してUSER-PREFIXを含む\n          でしょう。\n          デフォルトのハンドラ手続きは、内部サブセットがあってもそれをスキップし、\n          `(values #f '() '() seed)'を返します。\n\n    `tag: UNDECL-ROOT'\n          ハンドラ手続きの引数: ELEM-GI SEED\n          ELEM-GIはルート要素のUNRES-NAMEです。\n          この手続きは、パージング中のXML文書が`DOCTYPE'宣言を_含まない_時に\n          呼ばれます。\n          ハンドラ手続きは、上ではDOCTYPEハンドラですが、4つの値:\n          ELEMS ENTITIES NAMESPACES SEED\n          を生成しなければなりません。\n          デフォルトのハンドラ手続きは、`(values #f '() '()\n          seed)'を返します。\n\n    `tag: DECL-ROOT'\n          ハンドラ手続きの引数: ELEM-GI SEED\n          ELEM-GIは、ルート要素のUNRES-NAMEです。\n          この手続きは、パージング中のXML文書が`DOCTYPE'宣言を含む場合に呼ばれます。\n          このハンドラ手続きは、新しい`seed'を生成しなければなりません\n          (そして、ハンドラが望めば、ルート要素の名前がDOCTYPEにマッチするかを\n          検証します)。\n          デフォルトのハンドラ手続きは、それ自身を返す手続きです。\n\n    `tag: NEW-LEVEL-SEED'\n          ハンドラ手続きの引数:\n          `ssax:make-elem-parser'とMY-NEW-LEVEL-SEEDを参照して下さい。\n\n    `tag: FINISH-ELEMENT'\n          ハンドラ手続きの引数:\n          `ssax:make-elem-parser'とMY-FINISH-ELEMENTを参照して下さい。\n\n    `tag: CHAR-DATA-HANDLER'\n          ハンドラ手続きの引数:\n          `ssax:make-elem-parser'とMY-CHAR-DATA-HANDLERを参照して下さい。\n\n    `tag: PI'\n          ハンドラ手続きの引数: `ssax:make-pi-parser'を参照して下さい。\n          デフォルトの値は、`'()'です。\n\n     生成されるパーザは、\n     PORT SEEDを取る手続き、\n     です。\n\n     この手続きは、ドキュメントのプロローグをパーズして、\n     その残りを処理するために(ssax:make-elem-parserで作られた)パーザへ\n     引き継いで終了します。\n\n           [1]  document ::=  prolog element Misc*\n           [22] prolog ::= XMLDecl? Misc* (doctypedec | Misc*)?\n           [27] Misc ::= Comment | PI |  S\n\n           [28] doctypedecl ::=  '<!DOCTYPE' S Name (S ExternalID)? S?\n                                  ('[' (markupdecl | PEReference | S)* ']' S?)? '>'\n           [29] markupdecl ::= elementdecl | AttlistDecl\n                                | EntityDecl\n                                | NotationDecl | PI\n                                | Comment\n\n   いくつかの便利なユーティリティ手続きがあります。\n\n -- Function: ssax:reverse-collect-str fragments\n     FRAGMENTS(そのいくつかはテキスト文字列)のリストを渡すと、\n     そのリストを逆順にして隣り合ったテキスト文字列を連結します。\n\n -- Function: ssax:reverse-collect-str-drop-ws fragments\n     fragments(そのいくつかはテキスト文字列)のリストを渡すと、\n     そのリストを逆順にして隣り合ったテキスト文字列を連結します。\n     "
gosh> *** ERROR: unbound variable: 重要でない
Stack Trace:
_______________________________________
gosh> "空白文字、つまり、最初や最後、要素の間にある空白文字を\n     削除します。文字データに含まれる空白文字には影響を与えません。\n     この手続きは、パーズされたSXMLにある"
gosh> *** ERROR: unbound variable: 重要でない
Stack Trace:
_______________________________________
gosh> "空白文字を\n     "
gosh> *** ERROR: unbound variable: 知的に
Stack Trace:
_______________________________________
gosh> "削除するために使います。空白文字に関して、厳密に\n     XML勧告に準拠したい場合は、代わりに手続き\n     `ssax:reverse-collect-str'を使って下さい。\n\n -- Function: ssax:xml->sxml port namespace-prefix-assig\n     これは、上のSSAXパーザのインスタンスで、PORTから読み込まれる\n     XMLドキュメントのSXML表現を返します。\n     NAMESPACE-PREFIX-ASSIGは、`(USER-PREFIX . URI-STRING)'\n     のリストで、特定のURI-STRINGで識別されるある名前空間を\n     USER-PREFIXに割り当てます。これは空リストでも構いません。\n     この手続きは、SXMLツリーを返します。\n     ポートでの位置は、ルート要素の後の最初の文字を指します。\n\n11.29 `sxml.sxpath' - SXMLクエリ言語 {{{2\n====================================\n\n -- Module: sxml.sxpath\n     SXPathは、XML Information set\n     (Infoset)のインスタンスのS式フォームである\n     SXMLのためのクエリ言語です。\n\n     これは最初にOleg Kiselyovによって書かれ、Dmitry LizorkinとKirill\n     Lisovsky によって改良されました。 このモジュールにはまた、Dmitry\n     LizorkinとKirill LisovskyによりSXPathのために\n     書かれたたくさんの手続きが盛り込まれています。\n\n     現在のバージョンは、sxpathlib.scm v3.915、sxpath.scm\n     v1.1、sxpath-ext.scm v1.911を ベースにしています。\n\nこのマニュアルは、そのほとんどがオリジナルのソースファイルのコメントより\n導出されています。\n\n   このモジュールは3つのレイヤから構成されます。\n  1.\n     SXMLツリーへのアクセスやその変換の手段を提供する基本的なコンバータや\n     アプリケータ(適用子)。\n\n  2.\n     省略形のSXPathを取り、与えられたノードセットから指定されたパスを満足する\n     ノードセットを選択するScheme関数を返す、高レベルなクエリ言語コンパイラ。\n\n  3. W3CのXPathコア関数ライブラリのSXML版を実装する拡張ライブラリ。\n\n11.29.1 SXPathの基本的なコンバータとアプリケータ {{{3\n------------------------------------------------\n\nコンバータは、以下を満たす関数です。\n       type Converter = Node|Nodeset -> Nodeset\n   コンバータは、述語としての役割を担うこともあります。\nその場合、コンバータが、ノードやノードセットに適用され、空ではないノードセットを\n返す場合、述語としてのコンバータは満足したものとみなされます。\nこのファイルを通して、nilノードセットは失敗を表す`#f'と等価です。\n\n -- Function: nodeset? x\n     与えられたオブジェクトがノードセットならば、`#t'を返します。\n\n -- Function: as-nodeset x\n     Xがノードセットならば、それをそのまま返し、そうでなければそれを\n     リストでラップして返します。\n\n -- Function: sxml:element? obj\n     OBJがSXMLの要素であれば#Tを返し、そうでなければ#Fを 返す述語です。\n\n -- Function: ntype-names?? crit\n     関数`ntype-names??'は、判定基準として受け付け可能なノード名のリストを取り、\n     関数を返します。この関数は、ノードに適用された際、そのノード名が判定基準リストに\n     含まれていれば`#t'を、含まれていなければ`#f'を返す関数です。\n           ntype-names?? :: ListOfNames -> Node -> Boolean\n\n -- Function: ntype?? crit\n     関数`ntype??'は、型に関する判定基準を取り、関数を返します。\n     この関数は、ノードに適用された際、そのノードがそのテストを満足するかを\n     返します。\n            ntype?? :: Crit -> Node -> Boolean\n\n     判定基準CRITは、以下のシンボルのうちの1つです。\n    `id'\n          そのノードが正しい名前(id)を持っているかをテストします。\n\n    `@'\n          そのノードがATTRIBUTES-LISTであるかをテストします。\n\n    `*'\n          そのノードがELEMENTであるかをテストします。\n\n    `*text*'\n          そのノードがテキストノードであるかをテストします。\n\n    `*data*'\n          そのノードがデータノード(テキスト、数値、真偽値などで、ペアではない)であるか\n          をテストします。\n\n    `*PI*'\n          そのノードが`PI'ノードであるかをテストします。\n\n    `*COMMENT*'\n          そのノードが`COMMENT'ノードであるかをテストします。\n\n    `*ENTITY*'\n          そのノードが`ENTITY'ノードであるかをテストします。\n\n    `*any*'\n          どんなタイプのノードに対しても`#t'を返します。\n\n -- Function: ntype-namespace-id?? ns-id\n     この関数は、名前空間IDを取り、述語`Node -> Boolean'を\n     返します。この述語はまさにその名前空間IDを持つノードに対しては\n     `#t'を返します。NS-IDは文字列です。 `(ntype-namespace-id??\n     #f)'は、完全修飾されていない名前を\n     持つノードに対して`#t'を返します。\n\n -- Function: sxml:invert pred\n     この関数は、述語を取り、それを反対にして返します。\n     与えられた述語が`#f'や'`()'を返す場合、反対にされたものは\n     与えられたノード(`#t')を返します。\n\n -- Function: node-eq? other\n -- Function: node-equal? other\n     等価な述語としてのコンパータにカリー化します。すなわち、\n            ((node-eq? a) b)    == (eq? a b)\n            ((node-equal? a) b) == (equal? a b)\n\n -- Function: node-pos n\n           node-pos:: N -> Nodeset -> Nodeset, or\n           node-pos:: N -> Converter\n\n     ノードセットのN番目の要素を選択し、1つの要素を持つノードセットを返します。\n     N番目の要素が存在しなければ、空のノードセットを返します。\n     `((node-pos 1)\n     Nodeset)'は、ノードセットの先頭ノードがあればそれを選択します。\n     `((node-pos 2) Nodeset)'は、2番目のノードがあればそれを選択します。\n     Nは負の数でも構いません。その場合、ノードはリストの末尾から数えられます。\n     `((node-pos -1)\n     Nodeset)'は、空ではないノードセットの最後のノードを選択します。\n     `((node-pos -2)\n     Nodeset)'は、最後から2番目のノードがあればそれを選択します。\n\n -- Function: sxml:filter pred?\n           filter:: Converter -> Converter\n\n     フィルタリングを行う、フィルタアプリケータです。\n     引数のコンバータは、`#f'あるいはnilとなることが失敗を意味する述語と\n     みなされます。\n\n -- Function: take-until pred?\n           take-until:: Converter -> Converter, or\n           take-until:: Pred -> Node|Nodeset -> Nodeset\n\n     述語としてのコンバータとノードセットが与えられると、\n     ノードセットの各要素に述語を適用し、\n     述語が#Fあるいはnil以外を返すと、\n     (その述語が失敗した)その時点までに処理された要素を返します。\n     `take-until'は、上のフィルタのバリエーションの1つです。\n     `take-until'は、その述語を満足する最初の要素(それ自体は含まない)まで、\n     順序付けられた入力のセットの要素をパスします。 `((take-until (not\n     pred)) nset)'により返されるノードセットは、 `((filter pred)\n     nset)'により返されるノードセットのサブセット - 具体的には接頭辞\n     -になります。\n\n -- Function: take-after pred?\n          take-after:: Converter -> Converter, or\n          take-after:: Pred -> Node|Nodeset -> Nodeset\n\n     述語としてのコンバータとノードセットを与えると、\n     述語をノードセットの各要素に適用し、 述語が`#f'かnil以外を返すと、\n     まだ述語が適用されていない要素を返します。\n     つまり、述語を満足する最初の要素の後に続く要素を返します。\n     `take-after'と`take-until'を一緒に使うと、\n     入力のノードセットを3つのパート:\n     述語を満足する最初の要素、その要素の前の部分、その要素の後の部分に\n     分けます。\n\n -- Function: map-union proc lst\n     procをlstの各要素に適用し、結果のリストを返します。\n     procがノードセットを返す場合、それを結果につなぎ合わせます。\n\n     別の観点から見ると、`map-union'はConverter->Converter関数で、\n     結合を行いたいコンテキストでの引数としてのコンバータに 位置します。\n\n -- Function: node-reverse node-or-nodeset\n          node-reverse :: Converter, or\n          node-reverse:: Node|Nodeset -> Nodeset\n\n     ノードセットでのノードの順番を逆順にします。\n     この基本的なコンバータは、逆順のドキュメントオーダーを実装するために\n     必要です。(XPath勧告を参照して下さい。)\n\n -- Function: node-trace title\n           node-trace:: String -> Converter\n\n     `(node-trace title)'は、それ自身を返すコンバータです。\n     また、自身が適用されるノードやノードセットを、'title'という\n     プリフィックスを付けてプリントします。\n     このコンバータは、デバッグの際にとても便利です。\n\n   コンバータの組み合わせに続くものは、コンバータを一変させる、\nあるいはコンバータのシーケンスを1つの強力なコンバータにつなぎ合わせる\n高階関数です。そのゴールは、XPathのロケーションパスに対応する\nコンバータとなることです。\n\n   別の観点から見ると、コンバータは、コンバータ群の適用の固定され\n名前の付いた_パターン_とみなせます。\n以下に挙げるのは、XPathのロケーションパスの仕様を実装する\nそのようなパターンの完全なセットです。\n結局のところ、これら全てのコンビネータはいくつかの基本的なブロック、\n通常の関数的なコンポジション、map-unionとfilterアプリケータ、\nノードセットユニオンなどから構築することができます\n\n -- Function: select-kids test-pred?\n          select-kids:: Pred -> Node -> Nodeset\n     ノードを与えると、述語(実際はコンバータ)を満足するその子要素の\n     (順序付けられた)サブセットを返します。\n\n          select-kids:: Pred -> Nodeset -> Nodeset\n     上と同じですが、ノードセットの全てのノードの子要素から選択します。\n\n -- Function: node-self pred\n           node-self:: Pred -> Node -> Nodeset, or\n           node-self:: Converter -> Converter\n\n     select-kidsに似ていますが、自身をその子要素に適用するのでは\n     なく、ノードそれ自身に適用します。\n     結果のノードセットは、1つのコンポーネントを含むか、\n     空(ノードが述語を満足しない場合)になります。\n\n -- Function: node-join . selectors\n           node-join:: [LocPath] -> Node|Nodeset -> Nodeset, or\n           node-join:: [Converter] -> Converter\n\n     上のタイトルコメントで説明されるようなロケーションステップ\n     あるいはロケーションパスのシーケンスをつなぎ合わせます。\n\n -- Function: node-reduce . converters\n           node-reduce:: [LocPath] -> Node|Nodeset -> Nodeset, or\n           node-reduce:: [Converter] -> Converter\n\n     コンバータの通常の関数的なコンポジションです。\n     見方を変えると、`((apply node-reduce converters) nodeset)'は\n     `(foldl apply nodeset converters)'と等価です。\n     すなわち、コンバータのリストをノードセットをseedとして畳み込みや分解\n     を行うようなものです。\n\n -- Function: node-or . converters\n           node-or:: [Converter] -> Converter\n\n     このコンビネータは、全てのコンバータを与えられたノードに適用し、\n     それらの結果のユニオンを作ります。\n     このコンビネータは、XPathのロケーションパスでの'`|''オペレーション\n     であるユニオンに対応します。\n\n -- Function: node-closure test-pred?\n           node-closure:: Converter -> Converter\n\n     述語としてのコンバータを満足するノードの全ての_子孫_を選択します。\n     このコンビネータは`select-kids'に似ていますが、孫要素やその\n     子要素達にも適用を行います。\n     このコンビネータは、XPathの軸である"
gosh> descendant::
gosh> "を実装します。\n     概念的には、このコンビネータは以下のように表現することができます。\n           (define (node-closure f)\n                (node-or\n                  (select-kids f)\n          \t (node-reduce (select-kids (ntype?? '*)) (node-closure f))))\n\n     この定義は、字面の通り、フィックスポイントのような何かで、\n     永久に実行し続けます。しかし、いつかは`(select-kids (ntype?? '*))'\n     が空のノードセットを返すことは明白です。その時点では、以降の\n     イテレーションはその結果に影響を及ぼさず停止されることができます。\n\n11.29.2 SXPathクエリ言語 {{{3\n------------------------\n\n -- Function: sxpath abbrpath . ns-binding\n     Evaluates an abbreviated SXPath\n\n           sxpath:: AbbrPath -> Converter, or\n           sxpath:: AbbrPath -> Node|Nodeset -> Nodeset\n\n     ABBRPATHはリストです。これは、以下の書き換えルールに従って\n     完全なSXPathに変換されます。\n           (sxpath '()) -> (node-join)\n           (sxpath '(path-component ...)) ->\n                          (node-join (sxpath1 path-component) (sxpath '(...)))\n           (sxpath1 '//) -> (node-or\n                               (node-self (ntype?? '*any*))\n                               (node-closure (ntype?? '*any*)))\n           (sxpath1 '(equal? x)) -> (select-kids (node-equal? x))\n           (sxpath1 '(eq? x))    -> (select-kids (node-eq? x))\n           (sxpath1 '(or@ ...))  -> (select-kids (ntype-names??\n                                                    (cdr '(or@ ...))))\n           (sxpath1 '(not@ ...)) -> (select-kids (sxml:invert\n                                                   (ntype-names??\n                                                    (cdr '(not@ ...)))))\n           (sxpath1 '(ns-id:* x)) -> (select-kids\n                                                (ntype-namespace-id?? x))\n           (sxpath1 ?symbol)     -> (select-kids (ntype?? ?symbol))\n           (sxpath1 ?string)     -> (txpath ?string)\n           (sxpath1 procedure)   -> procedure\n           (sxpath1 '(?symbol ...)) -> (sxpath1 '((?symbol) ...))\n           (sxpath1 '(path reducer ...)) ->\n                          (node-reduce (sxpath path) (sxpathr reducer) ...)\n           (sxpathr number)      -> (node-pos number)\n           (sxpathr path-filter) -> (filter (sxpath path-filter))\n\n`sxpath'には、いくつかのラッパ関数があります。\n\n -- Function: if-sxpath path\n     `sxpath'は、常にリストを返し、それはSchemeでは`#t'となります。\n     `if-sxpath'は、空リストの代わりに`#f'を返します。\n\n -- Function: if-car-sxpath path\n     もし存在すれば、最初に見つかったノードを返します。\n     そうでなければ、`#f'を返します。\n\n -- Function: car-sxpath path\n     もし存在すれば、最初に見つかったノードを返します。\n     そうでなければ、空リストを返します。\n\n -- Function: sxml:id-alist node . lpaths\n     与えられたノードについて、`(ID_VALUE . ELEMENT)'の\n     ペアのリストをインデックスとして構築します。\n     LPATHSは、タイプIDの属性のロケーションパスです。\n\n11.29.3 SXPathの拡張 {{{3\n--------------------\n\nW3CのXPathコア関数ライブラリのSXML版です。\n\n -- Function: sxml:string object\n     XPathの`string'関数(XPath勧告のセクション4.2)に対応するものです。\n     与えられたオブジェクトを文字列に変換します。 注意:\n       1.\n          ノードセットを変換する時は、ドキュメントオーダーは保持されません。\n\n       2. NUMBER->STRING関数は、その結果をXPath勧告の仕様とは少し違った\n          フォームで返します。\n\n -- Function: sxml:boolean object\n     XPathの`boolean'関数(XPath勧告のセクション4.3)に対応するものです。\n     引数を真偽値に変換します。\n\n -- Function: sxml:number obj\n     XPathの`number'関数(XPath勧告のセクション4.4)に対応するものです。\n     引数を数値に変換します。 注意:\n       1. 引数は(まだ?)オプションではありません。\n\n       2. `string->number'の変換は、IEEE 754の四捨五入ではありません。\n\n       3. NaNは、0として表現されます。\n\n -- Function: sxml:string-value node\n     XPath勧告のセクション5.1 - 5.7にしたがって、与えられたノードの\n     文字列値を返します。\n\n -- Function: sxml:node? node\n     XPathの仕様2.3にしたがい、このテストはいかなるXPathノードに\n     対しても真を返します。\n     SXMLの補助的なリストや属性のリストは除外されます。\n\n -- Function: sxml:attr-list obj\n     与えられたSXMLノードの属性のリストを返します。\n     与えられたノードが要素ではないか、属性のリストを持っていない場合は、\n     空リストが返されます。\n\n -- Function: sxml:id id-index\n     SXML要素を、そのユニークなIDによって選択します(XPath勧告 4.1)。\n     OBJECTを引数に取るコンバータを返します。\n     このOBJECTは、ノードセットか、'`string''関数により\n     文字列に変換できるデータタイプです。\n\n     ID-INDEXは、`( (id-value . element) (id-value . element) ...\n     )'です。\n\n     このインデックスは、要素をそのユニークなIDによって選択するために使われます。\n\n   XPathオブジェクトの比較子:\n\n -- Function: sxml:equality-cmp bool-op number-op string-op\n     XPathの等値比較: `='、`!='のためのヘルパです。\n     BOOL-OP、NUMBER-OP、'STRING-OPはそれぞれ、\n     真偽値、数値、文字列のペアのための比較子です。\n\n -- Function: sxml:equal? a b\n -- Function: sxml:not-equal? a b\n     XPathの等値比較: `='、`!='に対応するもので、\n     デフォルトの等値テストを使います。\n\n -- Function: sxml:relational-cmp op\n     2つのXPathオブジェクトの関係比較( `<'、`>'、`<='、`>=' )\n     を作ります。 `op'は、比較を行う手続き: `<'、`>'、`<='、`>='です。\n\n   XPathの軸。 結果のノードセットにおける順序は維持されます。\n\n -- Function: sxml:attribute test-pred?\n     属性の軸です。\n\n -- Function: sxml:child test-pred?\n     子要素の軸です。\n     この関数は、'`select-kids''に似ていますが、処理命令やコメント、\n     実体ノードについては、空の子リストを返します。\n\n -- Function: sxml:parent test-pred?\n     親の軸です。\n\n     述語を与えると、`RootNode -> Converter'関数を返します。\n     この関数は、rootnodeに適用されると、`node -> parent'と なります。\n\n     このようなコンバータは、` ((sxml:parent test-pred) rootnode) '\n     を使って構築され、それが適用されたノードの親を帰します。\n     ノードセットに適用された場合、そのノードセットにあるノードの\n     親のリストを返します。\n     rootnodeはSXMLツリー全体のルートノードである必要はありません。\n     興味の対象となるブランチ(枝)のルートノードでも構いません。\n     `parent::'軸は、どんなSXMLノードにも使えます。\n\n -- Function: sxml:ancestor test-pred?\n     祖先の軸です。\n\n -- Function: sxml:ancestor-or-self test-pred?\n     祖先と自分の軸です。\n\n -- Function: sxml:descendant test-pred?\n     子孫の軸です。\n\n -- Function: sxml:descendant-or-self test-pred?\n     子孫と自分の軸です。\n\n -- Function: sxml:following test-pred?\n     後続するものの軸です。\n\n -- Function: sxml:following-sibling test-pred?\n     後続する兄弟の軸です。\n\n -- Function: sxml:namespace test-pred?\n     名前空間の軸です。\n\n -- Function: sxml:preceding test-pred?\n     先行するものの軸です。\n\n -- Function: sxml:preceding-sibling test-pred?\n     先行する兄弟の軸です。\n\n   ポピュラーなショートカット:\n\n -- Function: sxml:child-nodes nodeset\n          ((sxml:child sxml:node?) nodeset)\n\n -- Function: sxml:child-elements nodeset\n          ((select-kids sxml:element?) nodeset)\n\n11.30 `sxml.tools' - SXML構造を操作する {{{2\n=======================================\n\n -- Module: sxml.tools\n     現在のバージョンは、sxml-toolsのCVSのリビジョン3.13から導出されています。\n\n     マニュアルのエントリは主に、オリジナルのソースコードから導出されています。\n\n11.30.1 SXMLの述語 {{{3\n------------------\n\n -- Function: sxml:empty-element? obj\n     与えられた要素OBJが空なら#Tを返す述語です。\n     空要素は、ネストした要素、テキストノード、`PI'、コメントや実体を\n     持ちませんが、属性や名前空間IDは持つかもしれません。\n     それは、XMLの`empty-element'のSXML版です。\n\n -- Function: sxml:shallow-normalized? obj\n     与えられたOBJが浅く正規化されたSXML要素であれば`#t'を返します。\n     要素それ自体は正規化されていなければなりませんが、ネストした要素は\n     テストされません。\n\n -- Function: sxml:normalized? obj\n     与えられたOBJが正規化されたSXML要素であれば`#t'を返します。\n     要素それ自体とその全てのネストした要素が正規化されていなければなりません。\n\n -- Function: sxml:shallow-minimized? obj\n     与えられたOBJが浅く最小化されたSXML要素であれば`#t'を返します。\n     要素それ自体は最小化されていなければなりませんが、そのネストした要素は\n     テストされません。\n\n -- Function: sxml:minimized? obj\n     与えられたOBJが最小化されたSXML要素であれば`#t'が返されます。\n     要素それ自体とその全てのネストした要素が最小化されていなければなりません。\n\n11.30.2 SXMLへのアクセッサ {{{3\n--------------------------\n\n -- Function: sxml:name obj\n     与えられたSXMLノードの名前を返します。\n     これは単に`car'のエイリアスに過ぎませんが、カプセル化のために導入されています。\n\n -- Function: sxml:element-name obj\n     `sxml:name'の、与えられたOBJがSXML要素ではない場合は`#f'を返す\n     バージョンです。OBJがSXML要素であれば、その名前を返します。\n\n -- Function: sxml:node-name obj\n     `sxml:name'の、与えられたOBJがSXMLノードでない場合は`#f'を返す、\n     安全なバージョンです。OBJがSXMLノードであれば、その名前を返します。\n\n -- Function: sxml:ncname obj\n     与えられたobjの完全修飾名(Namespaces in XML production\n     [6])のローカルパート、\n     つまりその完全修飾名を"
gosh> :
gosh> "で分割した後ろの部分を返します。\n     与えられたノードの名前が`NCName'(Namespaces in XML production\n     [4])であれば、 それをそのまま返します。\n     SXMLの名前はシンボルですが、この関数は文字列を返すことに注意して下さい。\n\n -- Function: sxml:name->ns-id sxml-name\n     与えられた名前の名前空間ID部分を返します。与えられた名前がLocalNameの\n     場合は#Fを返します。\n\n -- Function: sxml:content obj\n     与えられたSXML要素かノードセット(テキストノードと要素ノードのみ)の内容を、\n     ドキュメントオーダーにしたがった文字列のリストとネストした要素として\n     返します。このリストは、OBJが空要素や空リストの場合は空です。\n\n -- Function: sxml:content-raw obj\n     正規化されたSXML要素の全ての内容を、ATTR-LISTとAUX-LISTを除いて\n     返します。 したがってそれは、`PI'、`COMMENT'、`ENTITY'\n     ノードとともに、`sxml:content'によって返される`TEXT'や`ELEMENT'も含みます。\n     戻り値は、ドキュメントオーダーにしたがったノードのリストか、\n     OBJが空要素や空リストの場合は空リストになります。\n     この関数は、`sxml:content'よりも高速です。\n\n   SXMLの通常のフォームでは、1つの要素は次のようなリストで表現されます。\n       (NAME ATTR-LIST AUX-LIST CONTENT ...)\n   ATTR-LISTは`@'で始まるリストで、AUX-LISTは`@@'で 始まるリストです。\n\n   最小化されたフォームでは、AUX-LISTは空であれば省略できます。\nATTR-LISTは、それが空で_かつ_AUX-LISTがなければ省略できます。\n\n   以下の手続きは、ATTR-LISTとAUX-LISTを抽出するものです。\n\n -- Function: sxml:attr-list-node obj\n     与えられたOBJのATTR-LISTを返します。\n     ATTR-LISTが存在しなければ`#f'を返します。\n\n -- Function: sxml:attr-as-list obj\n     ATTR-LISTをリストにラップして返します。\n     ATTR-LISTが存在せずAUN-LISTがある場合は'`((@))'を返します。\n     両方とも存在しない場合には'`()'を返します。\n\n -- Function: sxml:aux-list-node obj\n     与えられたOBJのAUX-LISTを返します。\n     ATTR-LISTが存在しなければ`#f'を返します。\n\n -- Function: sxml:aux-as-list obj\n     AUX-LISTをリストにラップして返します。\n     AUX-LISTが存在しなければ'`()'を返します。\n\n -- Function: sxml:attr-list-u obj\n     与えられた要素かノードセットの属性のリストを返します。 `((sxpath\n     '(@ *)) OBJ)'と類似です。\n     属性のリストがない場合は空リストが返されます。\n\n -- Function: sxml:aux-list obj\n     与えられた要素かノードセットの補助ノードのリストを返します。\n     `((sxpath '(@@ *)) OBJ)'と類似です。\n     補助ノードのリストがない場合は空リストが返されます。\n\n -- Function: sxml:aux-list-u obj\n     与えられた要素かノードセットの補助ノードのリストを返します。\n     `((sxpath '(@@ *)) OBJ)'と類似です。\n     補助ノードのリストがない場合は空リストが返されます。\n\n     `-u'が付くものは、正規化されていないSXMLノードに対しても\n     使えるということを示しています。('u'は'universal'の意味です。)\n\n -- Function: sxml:aux-node obj aux-name\n     与えられたSXML要素OBJでAUX-NAMEという名前の付いている最初の\n     補助ノードを返します。そのようなノードがない場合は`#f'を返します。\n     注意: 複数のノードがあっても_最初に_見つかったノードのみを\n     返します。したがって、ユニークな名前を持っているノード群に対して\n     使われることを意図しています。\n\n -- Function: sxml:aux-nodes obj aux-name\n     与えられたSXML要素OBJでAUX-NAMEとうい名前の付いている補助ノードの\n     リストを返します。そのようなノードがなければ'`()'を返します。\n\n -- Function: sxml:attr obj attr-name\n     与えられたSXML要素OBJのATTR-NAMEという属性へのアクセッサです。\n     戻り値は、その属性が存在すればその属性の値、与えられた要素に\n     そのような属性がなければ#Fです。\n\n -- Function: sxml:num-attr obj attr-name\n     与えられたSXML要素OBJのATTR-NAMEという数値の属性への\n     アクセッサです。\n     戻り値は、その属性が存在してその値が`string->number'により数値へ\n     変換できる場合はその属性を数値としてその属性の値、\n     与えられた要素にそのような属性がないかその値が数値へ変換できない場合は\n     `#f'です。\n\n -- Function: sxml:attr-u obj attr-name\n     与えられたSXML要素OBJのATTR-NAMEという名前の属性への\n     アクセッサです。OBJは、(通常はSXML要素の内容である)\n     属性リストやノードセットでも構いません。\n\n     戻り値は、その属性が存在すればその属性の値、与えられた要素に\n     そのような属性がない場合は`#f'です。\n\n     `-u'が付くものは、正規化されていないSXMLノードに対しても\n     使えるということを示しています。('u'は'universal'の意味です。)\n\n -- Function: sxml:ns-list obj\n     与えられた要素の名前空間のリストを返します。 `((sxpath '(@@\n     *NAMESPACES* *)) OBJ)'と類似です。\n     名前空間のリストがない場合は空リストが返されます。\n\n -- Function: sxml:ns-id->nodes obj namespace-id\n     SXML要素OBJで、与えられたNAMESPACE-IDに対応する名前空間の\n     連想リストのリストを返します。 `((sxpath '(@@ *NAMESPACES*\n     namespace-id)) OBJ)'と類似です。\n     与えられたNAMESPACE-IDに対応する名前空間の連想リストがない場合は\n     空リストが返されます。\n\n -- Function: sxml:ns-id->uri obj namespace-id\n     与えられたNAMESPACE-IDに対応するURIを返します。\n     与えられたNAMESPACE-IDに対応する名前空間の連想リストがない場合は\n     `#f'を返します。\n\n -- Function: sxml:ns-uri->id obj uri\n     与えられた名前空間URIに対応する名前空間IDを返します。\n\n -- Function: sxml:ns-id ns-assoc\n     与えられた名前空間連想リストに対応する名前空間IDを返します。\n\n -- Function: sxml:ns-uri ns-assoc\n     与えられた名前空間連想リストに対応するURIを返します。\n\n -- Function: sxml:ns-prefix ns-assoc\n     与えられた名前空間連想リストに対応する名前空間接頭辞を返します。\n     与えられた名前空間IDの(XML文書における)オリジナルの接頭辞は、\n     それが名前空間IDと異なる場合は、名前空間連想リストの3番目の要素として\n     格納されなければなりません。\n     名前空間連想リストでオリジナルの接頭辞が省略されている場合は、\n     代わりに名前空間IDが使われます。\n\n11.30.3 SXMLのモディファイヤ {{{3\n----------------------------\n\n正規化されたSXMLデータのコンストラクタやミューテータです。\nこれらの関数は、正規化されたSXMLデータに最適化されています。\n任意の正規化されていないSXMLデータには適用できません。\n\n   ほとんどの関数には2つのバージョンがあります。\n  1. 与えられた要素のその場での更新のために副作用が意図された関数。\n     これらの名前はエクスクラメーションマークで終わっています。\n     このバージョンの戻り値は、特に断りのない限り未定義です。\n     例としては、`sxml:change-content!'が挙げられます。\n\n  2. 変更された要素を返す、副作用のない純粋な関数。\n     例としては、`sxml:change-content'が挙げられます。\n\n -- Function: sxml:change-content obj new-content\n -- Function: sxml:change-content! obj new-content\n     与えられたSXML要素の内容を、NEW-CONTENTに変更します。\n     NEW-CONTENTが空リストの場合は、OBJは空要素に変更されます。\n     結果のSXML要素は正規化されています。\n\n -- Function: sxml:change-attrlist obj new-attrlist\n -- Function: sxml:change-attrlist! obj new-attrlist\n     結果のSXML要素は正規化されています。\n     NEW-ATTRLISTが空の場合は、OBJのcadrは`(@)'になります。\n\n -- Function: sxml:change-name obj new-name\n -- Function: sxml:change-name! obj new-name\n     SXML要素の名前を破壊的に変更します。\n\n -- Function: sxml:add-attr obj attr\n     属性ATTRが追加されたSXML要素OBJを返します。\n     与えられた名前の属性がすでに存在する場合は`#f'を返します。\n     ATTRは`(ATTR-NAME ATTR-VALUE)'です。\n     `sxml:add-attr!'に対応する純粋関数的な関数です。\n\n -- Function: sxml:add-attr! obj attr\n     要素OBJに属性ATTRを追加します。\n     与えられた名前の属性がすでに存在する場合は`#f'を返します。\n     結果のSXMLノードは正規化されています。\n     `sxml:add-attr'に対応するその場で更新する関数です。\n\n -- Function: sxml:change-attr obj attr\n     属性ATTRの値が変更されたSXML要素OBJを返します。\n     与えられた名前の属性がない場合は`#f'を返します。 ATTRは`(ATTR-NAME\n     ATTR-VALUE)'です。\n\n -- Function: sxml:change-attr! obj attr\n     要素OBJの属性の値を変更します。 ATTRは`(ATTR-NAME\n     ATTR-VALUE)'です。 そのような属性がない場合は`#f'を返します。\n\n -- Function: sxml:set-attr obj attr\n -- Function: sxml:set-attr! obj attr\n     要素OBJの属性ATTRをセットします。\n     そのような属性がない場合は新しい属性として追加されます。\n\n -- Function: sxml:add-aux obj aux-node\n     補助ノードAUX-NODEが追加されたSXML要素OBJを返します。\n\n -- Function: sxml:add-aux! obj aux-node\n     要素OBJに補助ノードAUX-NODEを追加します。\n\n -- Function: sxml:squeeze obj\n -- Function: sxml:squeeze! obj\n     与えられたSXML要素OBJとその子孫について、空のリストである属性\n     および補助リストを排除します(最小化)。\n     最小化され、正規化されたSXML要素が返されます。\n\n -- Function: sxml:clean obj\n     与えられたSXML要素OBJとその子孫について、空リストである属性と、\n     全ての補助リストを削除します。\n     最小化され、正規化されたSXML要素が返されます。\n\n11.30.4 SXPathの補助的ユーティリティ {{{3\n------------------------------------\n\nこれらは、SXPathの機能を拡張する便利なユーティリティです。\n\n -- Function: sxml:add-parents obj . top-ptr\n     SXMLノードセットに'親へのポインタ'を追加したものを返します。\n     親へのポインタは、`(*PARENT* THUNK)'というフォームを持つ\n     補助ノードです。THUNKは親要素を返します。\n\n -- Function: sxml:node-parent rootnode\n     高速な'node-parent'関数を返します。\n     すなわち、SXML要素を1引数として取り、補助リストで\n     `*PARENT*'ポインタを使ってその親ノードを返す関数を返します。\n     '`*TOP-PTR*'はルートノードへのポインタとして使われます。\n     ルートノードに対して適用されると空リストを返します。\n\n -- Function: sxml:lookup id index\n     要素をそのIDを使って探します。\n\n11.30.5 SXMLからマークアップへの変換 {{{3\n------------------------------------\n\nSXMLからXMLやHTMLなどのマークアップされたテキストを生成する手続き。\nもっと高尚な変換器を得たいだけならば、 *Note\nSXMLからXMLとXHTMLのシリアライゼーション::をチェックして下さい。\n\n -- Function: sxml:clean-feed . fragments\n     'fragments'をフィルタします。\n     fragmentsは、文字列、文字、数値、手続き、`#f'、他のフラグメントの\n     リストです。 この関数はツリーを深さ優先でトラバースし、\n     文字列、文字、実行された手続きのリストを返し、\n     `#f'と'`()'を無視します。\n\n     全ての意味のあるフラグメントは文字列で、 この関数の結果に(APPLY\n     STRING-APPEND ... )を 適用すると、そのstring-valueを返します。\n\n     これは、Oleg Kiselyovの`SRV:send-reply'の変種であるとみなすことが\n     できるでしょう。\n     `SRV:send-reply'はフラグメントを印字(display)しますが、\n     この関数は意味のあるフラグメントのリストを返し、ごみをふるい落とします。\n\n -- Function: sxml:attr->xml attr\n     属性のXMLマークアップを作ります。\n\n -- Function: sxml:string->xml string\n     与えられた文字列中の全ての`<'、`>'、`&'、```'、\n     `''を対応する文字実体参照に置き換えた、文字列あるいは\n     文字列のリストを返します。 `sxml:string->html'も参照して下さい。\n\n -- Function: sxml:sxml->xml tree\n     SXML->XML変換に特化され最適化されたバージョンのノードディスパッチです。\n\n -- Function: sxml:attr->html attr\n     属性のHTMLマークアップを作ります。\n\n -- Function: sxml:string->html string\n     与えられた文字列で、それがエンコーディングを必要とする文字、\n     <、>、&、"
gosh> *** ERROR: unbound variable: を含まないことをチェックします。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: シンプルなHTMLドキュメントの構築::の
Stack Trace:
_______________________________________
gosh> html-escape-string
gosh> も参照して下さい。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: sxml:non-terminated-html-tag?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: tag
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: この述語は、
Stack Trace:
_______________________________________
gosh> "終了タグのない"
gosh> *** ERROR: unbound variable: HTML
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |4.0のタグに対して|
Stack Trace:
_______________________________________
gosh> #t
gosh> を
gosh> *** ERROR: unbound variable: 返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: sxml:sxml->html
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: tree
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SXML->HTML変換に対して特化され最適化されたバージョンのノードディスパッチ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: です。
Stack Trace:
_______________________________________
gosh> 11.31
gosh> sxml.serializer
gosh> -
gosh> *** ERROR: unbound variable: SXMLからXMLとXHTMLのシリアライゼーション
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 25010: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: sxml.toolsのsxml:sxml->xmlとsxml:sxml->htmlよりも強力です。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: マニュアルのエントリは主に、オリジナルのソースコードから取られてています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |11.31.1|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 簡単なSXML変換
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 25073: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を参照してください。
Stack Trace:
_______________________________________
gosh> indent
gosh> -
gosh> *** ERROR: unbound variable: 出力の
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: XML
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が読みやすさのために空白を含むかどうか
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 25077: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。文字列を設定することもでき、その場合
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: インデント単位に使われます。
Stack Trace:
_______________________________________
gosh> omit-xml-declaration?
gosh> -
gosh> *** ERROR: unbound variable: XML宣言を省略するかどうか。デフォルトは
Stack Trace:
_______________________________________
gosh> #t
gosh> 。
gosh> standalone
gosh> -
gosh> *** ERROR: unbound variable: XML
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ドキュメントを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: XML
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 宣言でスタンドアローンとし
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: て定義するかどうか。
Stack Trace:
_______________________________________
gosh> yes
gosh> 、
gosh> no
gosh> 、
gosh> omit
gosh> のうちいづれかの
gosh> *** ERROR: unbound variable: シンボルでなければならない。デフォルトは
Stack Trace:
_______________________________________
gosh> omit
gosh> `version
gosh> -
gosh> *** ERROR: unbound variable: XML宣言中のXMLバージョン。文字列または数。デフォルト
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は
Stack Trace:
_______________________________________
gosh> "1.0"
gosh> 。
gosh> cdata-section-elements
gosh> -
gosh> *** ERROR: unbound variable: SXML要素の名前
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: シンボル
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のリスト。これ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: らの要素の中身はCDATAセクションと同様にエスケープされる。
Stack Trace:
_______________________________________
gosh> ns-prefix-assig
gosh> -
gosh> (cons prefix namespace-uri)
gosh> のリスト。
gosh> *** ERROR: unbound variable: 各
Stack Trace:
_______________________________________
gosh> prefix
gosh> はシンボルで、
gosh> namespace-uri
gosh> は文字列。
gosh> *** ERROR: unbound variable: 対応する接頭辞をつけて与えられた名前空間をシリアライズする。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 注意：
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: パラメータ名が期待された名前ではない場合、あるいはパラメータ値
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が不正な形式である場合にはそのようなパラメータは警告なしで無視されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 使用実例：
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: srl:parameterizable
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: param
Stack Trace:
_______________________________________
gosh> ::=
gosh> *** ERROR: unbound variable: param-name
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: param-name
Stack Trace:
_______________________________________
gosh> ::=
gosh> *** ERROR: unbound variable: symbol
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: cdata-section-elements
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: value
Stack Trace:
_______________________________________
gosh> ::=
gosh> *** ERROR: unbound variable: sxml-elem-name
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: sxml-elem-name
Stack Trace:
_______________________________________
gosh> ::=
gosh> *** ERROR: unbound variable: symbol
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: indent
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: value
Stack Trace:
_______________________________________
gosh> ::=
gosh> yes
gosh> *** ERROR: unbound variable: | #t |
Stack Trace:
_______________________________________
gosh> no
gosh> *** ERROR: unbound variable: | #f |
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: whitespace-string
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: method
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: value
Stack Trace:
_______________________________________
gosh> ::=
gosh> xml
gosh> *** ERROR: unbound variable: | 'html\x0a\x0a          ns-prefix-assig\x0a          value ::= (listof (cons prefix namespace-uri))\x0a          prefix ::= symbol\x0a          namespace-uri ::= string\x0a\x0a          omit-xml-declaration?\x0a          value ::= 'yes |
Stack Trace:
_______________________________________
gosh> #t
gosh> *** ERROR: unbound variable: | 'no |
Stack Trace:
_______________________________________
gosh> #f
gosh> *** ERROR: unbound variable: standalone
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: value
Stack Trace:
_______________________________________
gosh> ::=
gosh> yes
gosh> *** ERROR: unbound variable: | #t |
Stack Trace:
_______________________________________
gosh> no
gosh> *** ERROR: unbound variable: | #f |
Stack Trace:
_______________________________________
gosh> omit
gosh> *** ERROR: unbound variable: version
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: value
Stack Trace:
_______________________________________
gosh> ::=
gosh> #<subr string>
gosh> *** ERROR: unbound variable: | number\x0a\x0a -- Function: srl:sxml->string sxml-obj cdata-section-elements indent\x0a          method ns-prefix-assig omit-xml-declaration? standalone\x0a          version\x0a     `srl:parameterizable'と同様文字列を返し、パラメータ解析のオーバヘッ\x0a     ドはありません。この関数のインタフェースはこのライブラリの将来のバージョ\x0a     ンでは変更されるかもしれません。\x0a\x0a -- Function: srl:display-sxml sxml->obj port-or-filename\x0a          cdata-section-elements indent method ns-prefix-assig\x0a          omit-xml-declaration? standalone version\x0a     `srl:parameterizable'と同様PORT-OR-FILENAMEに書きこみ、パラ\x0a     メータ解析のオーバーヘッドはありません。この関数のインタフェースはこの\x0a     ライブラリの将来のバージョンでは変更されるかもしれません。\x0a\x0a11.32 `text.csv' - CSVテーブル {{{2\x0a==============================\x0a\x0a -- Module: text.csv\x0a     RFC4180に定義されたフォーマットを含む、 CSV (カンマ区切りの値)\x0a     の表をパーズ/生成するための手続きを提供します。\x0a     区切り文字やクオート文字をカスタマイズすることで、CVSに似たフォーマットを\x0a     広くカバーすることができます。\x0a\x0a     CSV の表は、改行で区切られた RECORD の連続で構成されます。\x0a     それぞれのレコードは、区切り文字(デフォルトではカンマ)で区切られた\x0a     複数の FIELD を含みます。フィールドは、クォートされている\x0a     (二重引用符で囲まれている)場合は、カンマや改行を含むことができます。\x0a     クォートされたフィールドに二重引用符を含めるには、2つの連続する\x0a     二重引用符を使います。通常、フィールドの前後の空白は無視されます。\x0a\x0a\x0a   現時点では、以下の2つの低レベルな手続きが提供されています。\x0aフィールドにラベル付けをしたり、自動的に変換するなどの\x0aより高レベルな機能の提供を計画しています。\x0a\x0a -- Function: make-csv-reader separator &optional (quote-char #")\x0a     入力ポートを唯一の引数として取る手続きを返します。\x0a     手続きが呼ばれると、ポートからレコードを1つ読み込み、フィールドの\x0a     リストを返します。入力ポートが EOF に達すると、EOF を返します。\x0a\x0a -- Function: make-csv-writer separator &optional newline (quote-char\x0a          #")\x0a     出力ポートとフィールドのリストの2つの引数を取る手続きを返します。\x0a     手続きが呼ばれると、SEPARATOR で区切られたフィールドを\x0a     正しくエスケープして出力ポートに出力します。レコードの区切り文字列を\x0a     NEWLINE で指定することもできます。例えば、ファイルが Windows の\x0a     プログラムでも読めるように、`"rn"' を渡すことができます。\x0a\x0a11.33 `text.diff' - テキストストリームの相違点を計算する {{{2\x0a========================================================\x0a\x0a -- Module: text.diff\x0a     このモジュールでは、`util.lcs' (*Note\x0a     最長共通サブシーケンス::参照)を\x0a     使って、2つのテキストストリーム、あるいは2つの文字列の相違点を計算します。\x0a\x0a -- Function: diff src-a src-b &keyword reader eq-fn\x0a     テキストソースSRC-AとSRC-Bから"編集リスト"を生成します。\x0a\x0a     それぞれのテキストソース、SRC-AとSRC-Bは入力ポートか文字列です。\x0a     もし文字列であれば、それは内部的に文字列ポートに変換されます。\x0a     そして、2つのソースからのテキストストリームは、それらに対してREADERを繰り返し\x0a     呼ぶことによってシーケンスに変換されます。デフォルトのREADERはREAD-LINEで、\x0a     2つのシーケンスは編集リストを計算するために`lcs-edit-list'に渡されます。\x0a     `lcs-edit-list'には、等値を検査する関数EQ-FNも渡されます。\x0a\x0a     編集リストとは、`src-a'から`src-b'へテキストシーケンスを\x0a     変更するためのコマンドのセットです。編集リストの詳細な説明は、\x0a     `lcs-edit-list'を参照してください。\x0a\x0a          (diff "anbncndn" "bnendnfn")\x0a          =>\x0a            (((- 0 "a"))\x0a             ((- 2 "c") (+ 1 "e"))\x0a             ((+ 3 "f")))\x0a\x0a -- Function: diff-report src-a src-b &keyword reader eq-fn writer\x0a     2つのテキストソースのdiffをとって、その結果をきれいに表示するための\x0a     簡易手続きです。この手続きは、2つのテキストソースの相違点を計算する\x0a     ために`lcs-fold'を呼び出します。SRC-A、SRC-B、\x0a     READER、EQ-FNの意味は、`diff'の場合と同じです。\x0a\x0a     WRITERは2つの引数、テキスト要素とタイプ(シンボル`+'、\x0a     シンボル`-'、あるいは`#f'のいずれか)を取る手続きです。\x0a     テキスト要素がSRC-Aにしかない場合は、WRITERがそのテキスト要素と\x0a     `-'とともに呼ばれます。テキスト要素がSRC-Bにしかない場合は、\x0a     WRITERはそのテキスト要素と`+'とともに呼ばれます。\x0a     テキスト要素が両方のソースにある場合は、WRITERはそのテキスト要素と\x0a     `#f'とともに呼ばれます。WRITERのデフォルトの手続きは、\x0a     渡されたテキスト要素を現在の出力ポートにユニファイドdiffのようなフォーマットで\x0a     出力します。\x0a          (diff-report "anbncndn" "bnendnfn")\x0a     displays:\x0a          - a\x0a            b\x0a          - c\x0a          + e\x0a            d\x0a          + f\x0a\x0a11.34 `text.gettext' - 地域化メッセージ {{{2\x0a=======================================\x0a\x0a -- Module: text.gettext\x0a     このモジュールは地域化メッセージを扱うユーティリティを提供します。\x0a     API は GNU の gettext と互換性があり、メッセージは `*.po' および\x0a     `*.mo' ファイルから読み込まれます。それゆえ、GNU の gettext\x0a     toolchain\x0a     をつかって地域化メッセージを準備することができます。しかし、このコードは\x0a     Alex Shinn によってスクラッチから書き起こされたものであり、GNU の\x0a     gettext ライブラリには依存していません。\x0a\x0a     この実装は GNU の gettext API を以下のように拡張したものです。\x0a        *\x0a          複数のメッセージファイルから、カスケードされた方法で読み込むことができます。\x0a          これにより、アプリケーションはメッセージファイルの部分を共有できます。\x0a\x0a        * 複数のロケール/ドメインを同時に扱えます。\x0a\x0a     SRFI-29 (*Note 地域化::参照) はこれとは別のメッセージの地域化\x0a     機構を提供しています。ポータブルなプログラムでは、SRFI-29\x0a     の方がよいこと もありますが、一般には、Gauche\x0a     スクリプトでは、`text.gettext' の\x0a     方を推奨します。それは、既存のメッセージファイルとの互換性と柔軟性の\x0a     ためです。\x0a\x0agettext-互換の API {{{3\x0a------------------\x0a\x0a -- Function: textdomain domain-name &optional locale dirs cdir cached?\x0a          lookup-cached?\x0a     アプリケーション用に、デフォルトのドメインとそのほかのパラメータを\x0a     設定します。この設定は、以降の `gettext' の呼出しに影響を与えます。\x0a\x0a     DOMAIN は文字列または文字列のリストで、ドメイン(`.mo' あるいは\x0a     `.po' ファイル名)を C の gettext と同じように指定します。 `#f' を\x0a     DOMAIN-NAME として渡すと、デフォルトのドメインアクセサ\x0a     手続きが得られます。また、複数のドメインを DOMAIN-NAMEにあたえる\x0a     ことができあす。\x0a          (textdomain '("myapp" "gimp"))  ; search 1st myapp, then gimp\x0a          (gettext "/File/Close")         ; "Close" from gimp unless overridden\x0a\x0a     LOCALE は文字列または文字列のリストで、標準的なUnixのフォーマット\x0a     `LANG[_REGION][.ENCODING]' です。フォールバックを指定するロケール\x0a     のリストを渡すこともできます。\x0a\x0a          (textdomain "myapp" '("ru" "uk"))  ; search 1st Russian then Ukranian,\x0a          (gettext "Hello, World!")          ; which are somewhat similar\x0a\x0a     DIRS は実際のメッセージカタログを含む `LOCALE/CDIR/'\x0a     ディレクトリのサーチパスです。これは常にシステムのデフォルト(たとえば、\x0a     `"/usr/share/locale"')に追加されます。そして、コロンで区切られた\x0a     `GETTEXT_PATH' 環境変数を継承します。\x0a\x0a     CDIR はカテゴリーディレクトリで、既定値を `LC_CATEGORY'\x0a     環境変数または、適当なシステム既定値(たとえば `LC_MESSAGES')に\x0a     設定します。一般にはこれを指定する必要はありません。\x0a\x0a     CACHED? は個別のメッセージをキャッシュするかを意味し、デフォルトは\x0a     `#t' です。\x0a\x0a     LOOKUP-CACHED?\x0a     は、これらのパラメータで生成されるディスパッチをキャッシュするかどうか\x0a     を意味し、デフォルトは `#t' です。\x0a\x0a     `textdomain' はこれらのパラメータを内部の `make-gettext' に\x0a     渡し、その結果を、`gettext' で使われるグローバルなディスパッチに\x0a     束縛します。これらのクロージャを複数の別々のドメインやロケールを一度に\x0a     扱うのに便利なように、手で構築することができます。(これらは\x0a     サーバ環境で便利です。) 後述の `make-gettext' を参照してください。\x0a\x0a     `textdomain' はそのドメインの情報をもつ _アクセサ手続き_を\x0a     返します。詳細については、後述の `make-gettext'\x0a     を参照してください。\x0a\x0a -- Function: gettext msg-id\x0a     MSG-ID の翻訳されたメッセージを返します。もし、翻訳された\x0a     メッセージがなければ、MSG-ID それ自身を返します。\x0a\x0a -- Function: ngettext msg-id &optional msg-id2 num\x0a     GETTEXTと似ていますが、複数形を処理するのに使うことが\x0a     できます。単数形のメッセージを MSG-ID へ、複数形のメッセージを\x0a     `msg-id2' に渡します。NUM 引数は、複数形を決定\x0a     するのに使われます。もし、メッセージカタログが見つからなければ、\x0a     NUM が 1 のときは、MSG-ID が返り、そうでなければ、 MSG-ID2\x0a     が返ります。\x0a\x0a -- Function: bindtextdomain domain dirs\x0a     ドメイン DOMAIN のサーチパスを DIRS に設定します。\x0a     単一のディレクトリ名であったり、ディレクトリのリストであったりします。\x0a\x0a -- Function: dgettext domain msg-id\x0a -- Function: dcgettext domain msg-id locale\x0a     DOMAIN 中の MSG-ID の翻訳されたメッセージを返します。 `dcgettext'\x0a     は LOCALE も引数としてとります。\x0a\x0a低水準の柔軟な API {{{3\x0a------------------\x0a\x0a以下の手続きはより柔軟性のあるインタフェースで、この上で、gettext-互換の\x0aAPI が書かれています。\x0a\x0a -- Function: make-gettext &optional domain locale dirs gettext-cached?\x0a          lookup-cached?\x0a     _アクセサ手続き_ を生成して返します。返された手続きは、\x0a     地域化されたメッセージを検索するメソッドをカプセル化しています。\x0a\x0a     引数の意味は上述の `textdomain' と同じです。 実際は、`textdomain'\x0a     は `make-gettext' を呼び、その後、\x0a     それは、結果をこのグローバルパラメータに束縛します。`make-gettext'\x0a     を直接呼んで、自分自身で、アクセサ手続きを管理することもできます。\x0a\x0a          (define my-gettext (make-gettex "myapp"))\x0a          (define (_ (my-gettext 'getter)))\x0a          (_ "Hello, World!")\x0a\x0a11.35 `text.html-lite' - シンプルなHTMLドキュメントの構築 {{{2\x0a=========================================================\x0a\x0a -- Module: text.html-lite\x0a     HTML ドキュメントを簡単に構築するための手続きを提供します。\x0a     例えば、以下のコードは HTML のテーブルを構築します。\x0a          (html:table\x0a            (html:tr (html:th "Item No") (html:th "Quantity"))\x0a            (html:tr (html:td 1) (html:td 120))\x0a            (html:tr (html:td 2) (html:td 30))\x0a            (html:tr (html:td 3) (html:td 215)))\x0a     詳細については、以下の `html:ELEMENT' の説明を見てください。\x0a\x0a     このモジュールでは生成されたHTMLドキュメントに関して、\x0a     例えばアトリビュートに有効な値が入っているか、要素の内容はDTDを満たしているか、\x0a     等のチェックをほとんど行いません。また、HTMLをパーズする関数も提供されません。\x0a     それが「lite」の名の由来です。\x0a\x0a -- Function: html-escape\x0a -- Function: html-escape-string string\x0a     HTML に含まれる"安全でない"文字をエスケープします。 `html-escape'\x0a     は、現在の入力ポートから文字列を読み込み、\x0a     結果を現在の出力ポートへ書き出します。`html-escape-string' は\x0a     STRING を入力とし、文字列を返します。\x0a\x0a -- Function: html-doctype &keyword type\x0a     HTML ドキュメントの文書型宣言を返します。 TYPE\x0a     は、以下のいずれかを指定します (デフォルトは`:html-4.01-strict'\x0a     です)。\x0a    `:html-4.01-strict, :html-4.01, :strict'\x0a          HTML 4.01 Strict DTD\x0a\x0a    `:html-4.01-transitional, :transitional'\x0a          HTML 4.01 Transitional DTD\x0a\x0a    `:html-4.01-frameset, :frameset'\x0a          HTML 4.01 Frameset DTD\x0a\x0a    `:xhtml-1.0-strict, :xhtml-1.0'\x0a          XHTML 1.0 Strict DTD\x0a\x0a    `:xhtml-1.0-transitional'\x0a          XHTML 1.0 Transitional DTD\x0a\x0a    `:xhtml-1.0-frameset'\x0a          XHTML 1.0 Frameset DTD\x0a\x0a    `:xhtml-1.1'\x0a          XHTML 1.1 DTD\x0a\x0a -- Function: html:ELEMENT ARGS ...\x0a     ELEMENT の HTML 要素を構築します。現時点では以下の要素が\x0a     サポートされています。 (HTML 4.01 DTD\x0a     `http://www.w3.org/TR/html4/sgml/dtd.html'\x0a     に定義されている要素です)。\x0a          a        abbr       acronym    address     area      b\x0a          base     bdo        big        blockquote  body      br\x0a          button   caption    cite       code        col       colgroup\x0a          dd       del        dfn        div         dl        dt\x0a          em       fieldset   form       frame       frameset\x0a          h1       h2         h3         h4          h5        h6\x0a          head     hr         html       i           iframe    img\x0a          input    ins        kbd        label       legend    li\x0a          link     map        meta       nofrmaes    noscript  object\x0a          ol       optgroup   option     p           param     pre\x0a          q        samp       script     select      small     span\x0a          strong   style      sub        sup         table     tbody\x0a          td       textarea   tfoot      th          thead     title\x0a          tr       tt         ul         var\x0a\x0a     これらの手続きは、テキスト・セグメントのツリーを返すので、\x0a     `write-tree' でポートに書き出したり、`tree->string' で\x0a     文字列に変換したりできます (*Note 怠惰なテキスト構築::参照)。\x0a\x0a     要素のアトリビュートは要素の内容に先立つキーワード-値の表記で指定することができます。\x0a          (tree->string (html:a :href "http://foo/bar" "foobar"))\x0a            =>\x0a            "<a href="http://foo/bar">foobar</an>"\x0a\x0a          (tree->string\x0a            (html:table :width "100%" :cellpading 0 "content here"))\x0a            =>\x0a            "<table width="100%" cellpadding="0">content here</tablen>"\x0a\x0a     属性に与える真偽値は特別な意味を持ちます。 `#t'\x0a     が与えられると、属性は値なしでレンダリングされます。 `#f'\x0a     が与えられると、属性それ自体がレンダリングされません。\x0a          (tree->string (html:table :border #t))\x0a            => "<table border></tablen>"\x0a\x0a          (tree->string (html:table :border #f))\x0a            => "<table></tablen>"\x0a\x0a     属性の値における特別な文字は、手続きによってエスケープされますが、\x0a     要素の内容にある特別な文字はエスケープされません。それをエスケープ\x0a     するのは呼び出し側の責任です。\x0a\x0a     内容を持たない HTML\x0a     要素に内容を与えると手続きはエラーを通知します。\x0a     手続きは、与えられた属性が妥当であるか、与えられた内容がその要素に\x0a     とって妥当であるかのチェックはしません。\x0a\x0a     _注意:_\x0a     これらの手続は改行を終了タグの`>'の前に挿入することに注意してくだ\x0a     さい。つまり、HTMLをレンダリングすると以下のようになります。\x0a\x0a          <table><tr><td>foo</td\x0a          ><td>bar</td\x0a          ></tr\x0a          ></table\x0a          >\x0a\x0a     終了ダグの後に改行をいれないのは意図的なものです。_改行が意味をも\x0a     つかどうかは外側の文脈に依存するからです_。たとえば、`<head>'要素\x0a     の直下にある要素の後に改行をいれることはできますが、`<p>'要素のな\x0a     かにあればできません。\x0a\x0a     3つ可能性があって、(1) 改行は全く入れない、(2)\x0a     タグの中だけで改行を入 れる。(3)\x0a     安全な場所にのみ改行をいれる。最初の場合はHTMLは一行になり、\x0a     正当なHTMLではあるものの、行指向のツールで処理するには不便です。3番目\x0a     の場合はレンダリングするのにDTDをちゃんと見るツールが必要になります。\x0a     というわけで、ここでは2番目のアプローチを取っています。\x0a\x0a11.36 `text.parse' - 入力ストリームのパージング {{{2\x0a===============================================\x0a\x0a -- Module: text.parse\x0a     入力ポートに対して単純な解析を行うユーティリティのコレクションです。\x0a     API は Oleg Kiselyov 氏の入力解析ライブラリ (*Note OLEG1: oleg1.)\x0a     に 触発され、互換性を持つものです。氏のライブラリは、他のたくさんの\x0a     ライブラリで使われています。特に、Scheme\x0a     のみで書かれたパーサ/ジェネレータ である SSAX (*Note SSAX: ssax.)\x0a     が挙げられます。\x0a\x0a     このモジュールは、氏の `input-parse.scm' や `look-for-str.scm'\x0a     の代わりに使うことができます。\x0a\x0a     Gauche\x0a     で効果的になるように手続きを再実装しました。特に、`string-set!'\x0a     の使用は完全に取り除きました。インターフェースを少し拡張したので、\x0a     文字セットや述語、文字のリストにも使うことができます。\x0a\x0a     これらの手続きは、与えられた入力ポートに対してシーケンシャルに動作します。\x0a     それは、ポートから必要なだけ読み、余分な文字をバッファリングしないということです。\x0a\x0a -- Function: find-string-from-port? str in-port &optional max-no-chars\x0a     入力ポート IN-PORT から、文字列 STR を探します。 オプショナル引数\x0a     MAX-NO-CHARS は、ポートから読み込まれる最大文字数を\x0a     制限します。省略されると、検索する範囲は EOF までとなります。\x0a\x0a     STR が見つかると、手続きはすでに読み込んだ文字の数を返します。\x0a     IN-PORT の次回の読み込みは、STR の次の文字を返します。 STR\x0a     が見つからない場合、`#f' が返ります。\x0a\x0a     注意: この手続きはその名前に「`?'」がつきますが、Scheme\x0a     の慣習に反し、 真偽値ではない値を返すことがあります。\x0a\x0a -- Function: peek-next-char &optional port\x0a     現在の文字を破棄し、PORT\x0a     から次の文字を読みます。一文字先読みするのに 便利です。PORT\x0a     が省略されると、現在の入力ポートが使われます。\x0a\x0a   以下の手続きでは、CHAR-LIST は次のどれかを意味します。\x0a   * 文字セット。\x0a\x0a   * 文字、文字セット、シンボル `*eof*' の任意の組み合わせのリスト。\x0a   [That denotes a set of characters.] シンボル `*eof*' が含まれる場合、\x0aEOF の条件もまた含まれます。`*eof*' が含まれない場合、EOF の条件は\x0aエラーとして扱われます。\x0a\x0a -- Function: assert-curr-char char-list string &optional port\x0a     PORT から文字を読みます。その文字が CHAR-LIST に含まれている場合は\x0a     その文字を返します。そうでなければ、STRING を含むメッセージとともに\x0a     エラーを通知します。\x0a\x0a -- Function: skip-until char-list/number &optional port\x0a     CHAR-LIST/NUMBER は、文字のリストか数です。\x0a     数の場合、たくさんの文字を読んで、`#f' を返します。\x0a     入力が十分に長くない場合は、エラーが通知されます。\x0a     CHAR-LIST/NUMBER が文字のリストの場合、その文字リストに属する文字に\x0a     出会うまで PORT を読み込み、その文字を返します。 PORT\x0a     が省略された場合、現在の入力ポートが使われます。\x0a\x0a -- Function: skip-while char-list &optional port\x0a     CHAR-LIST に属しない文字に出会うまで、PORT を読み込みます。\x0a     文字はストリームに残されます。EOF に達したら EOF が返されます。\x0a     PORT が省略された場合、現在の入力ポートが使われます。\x0a\x0a     この例では、入力から空白スペースをスキップしています。ポートからの次の\x0a     読み込みは、最初の空白スペースでない文字を返します。\x0a          (skip-while #[s] port)\x0a\x0a -- Function: next-token prefix-char-list break-char-list &optional\x0a          comment port\x0a     PREFIX-CHAR-LIST に含まれる文字はいくつでもスキップします。\x0a     そして、BREAK-CHAR-LIST に含まれる文字に出会うまで、文字を\x0a     蓄積します。蓄積された文字群は文字列として返されます。 中断文字は\x0a     PORT に残されます。\x0a\x0a     手続きが EOF に達し、`*eof*' が BREAK-CHAR-LIST に含まれていない\x0a     場合、COMMENT が含まれたメッセージとともにエラーが通知されます。\x0a\x0a -- Function: next-token-of char-list/pred &optional port\x0a     読み込んだ文字が CHAR-LIST/PRED にある限り蓄積し、文字列として\x0a     返します。CHAR-LIST/PRED\x0a     に含まれない最初の文字はポートに残されます。\x0a\x0a     CHAR-LIST/PRED は文字のリストか文字を取る述語です。述語の場合、\x0a     それぞれの文字がその述語に渡され、真の値が返る場合はその文字は\x0a     CHAR-LIST/PRED に属するとみなされます。\x0a\x0a -- Function: read-string n &optional port\x0a     N 文字まで読み込み、文字列として蓄積しそれを返します。\x0a     入力ストリームに含まれる文字のほうが少ない場合、有効な文字を可能な限り\x0a     含む文字列が返ります。\x0a\x0a11.37 `text.progress' - テキスト端末上でプログレスを表示する {{{2\x0a============================================================\x0a\x0a -- Module: text.progress\x0a     このモジュールはバーチャートを文字を用いて表示し、テキスト端末上に処理\x0a     の進行状況を出すためのユーティリティです。\x0a\x0a     プログレスバーの汎用的なフォーマット1行のテキストで構成されます。この1\x0a     行はいくつかの部分に分解できます。タイトルを表示するヘッダ部、その後に\x0a     プログレスバーがあって、数値部、時間部と続きます。以下がその例です(foo\x0a     からはじまる1行だけが実際に表示されます。\x0a          <-header-> <-------bar---------> <-num-><-time->      <---info---->\x0a          foo       |
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 25583: unsupported #-syntax: ##
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 25583: unsupported #-syntax: ##
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 25583: unsupported #-syntax: ##
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 25583: unsupported #-syntax: ##
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 25583: unsupported #-syntax: ##
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 25583: unsupported #-syntax: ##
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 25583: unsupported #-syntax: # 
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |123/211   01:21 ETA  compiling...\x0a                    ^\x0a                    separator\x0a\x0a     バーチャートに使う文字などのいろいろなバリエーションや、数値で表わす\x0a     進捗のフォーマットなども設定可能です。\x0a\x0a     内部的にはプログレスバーは2つの数値、最大値(ゴール)と現在の値を保持し\x0a     ています。バーは最大値に対する現在の値の比を示すものです。数値で表わす\x0a     進捗はデフォルトでは最大値の上に現在の値を表示します。しかし、たとえば、\x0a     現在の値だけを表示するとか、100分率で表示するなどの設定が可能です。\x0a\x0a     プログレスバーは2つの状態「進捗中」および「終了」のどちらかの状態を保\x0a     持しています。「進捗中」なら、どの時点でも表示されるテキストには\x0a     `#return'が続きます。これにより次の表示が前の表示を上書きするこ\x0a     とになります。時間部はETA(残り時間)を表示します。終了してしまえば、最\x0a     後の行の後に`#newline'が続きます。時間部には終了までにかかった時\x0a     間が表示されます。\x0a\x0a   このモジュールは`make-text-progress-bar'という手続きを1つだけ提供\x0aします。この手続きはプログレスバーの機能をクロージャに包んでそれを返し\x0aます。\x0a\x0a -- Function: make-text-progress-bar &keyword header header-width\x0a          bar-char bar-width num-width num-format time-width info\x0a          info-width separator-char max-value port\x0a     プログレスバー上の操作を包んだ手続きを返します。返された手続きに操作を\x0a     示すシンボルとオプションで数値を引数として渡して使います。\x0a\x0a    `PROC 'show'\x0a          プログレスバーを再表示する。他のどの操作も状態の再表示を行います。\x0a          したがって、現在のステータスを再表示しなければない特別な理由がないかぎ\x0a          りこれを使う必要はありません。\x0a\x0a    `PROC 'set VALUE'\x0a          現在の値をVALUEにセットし、プログレスバーを再表示します。\x0a          VALUEが最大値を超えていたら、超過分を切り捨て最大値にします。\x0a\x0a    `PROC 'inc VALUE'\x0a          VALUE分だけ現在の値を増し、プログレスバーを再表示します。現在の\x0a          値が最大値を超えたら、超過分を切り捨て最大値にします。\x0a\x0a    `PROC 'finish'\x0a          プログレスバーを「終了」状態にし、再表示します。時間部はトータルの経過\x0a          時間を表示します。また、表示行末は`#newline'とし、上書きされない\x0a          ようにします。プログレスバーはいったん「終了」状態になれば、「進捗中」\x0a          状態に戻す方法はありません。\x0a\x0a    `PROC 'set-info TEXT'\x0a          "info"部に表示されるテキストを変更します。\x0a          info部を使うには、`make-text-progress-bar'のINFO-WIDTHキーワード\x0a          引数に正の値が指定されている必要があります。\x0a\x0a    `PROC 'set-header TEXT'\x0a          "header"部に表示されるテキストを変更します。\x0a\x0a     キーワード引数を使って表示をカスタマイズできます。\x0a    HEADER\x0a          ヘッダ部に表示するテキスト。このテキストは、作られたプログレスバーに\x0a          `set-header'メッセージを送ることで後で変更可能です。\x0a\x0a    HEADER-WIDTH\x0a          ヘッダ部の幅、文字数で指定します。ヘッダ部のテキストは左詰めです。ヘッ\x0a          ダ部に置くテキストが幅よりも長い場合には超過分の文字は切り捨てられます。\x0a          デフォルトは14文字です。\x0a\x0a    BAR-CHAR\x0a          バーチャートを描くのに使う文字。デフォルトは`##'です。\x0a\x0a    BAR-WIDTH\x0a          バーチャート部の幅で、文字数で指定します。デフォルトでは40文字です。\x0a\x0a    NUM-WIDTH\x0a          数値部の幅で、文字数で指定します。デフォルトでは9で、これを0に設定する\x0a          と数値部を隠せます。\x0a\x0a    NUM-FORMAT\x0a          数値部を整形する手続き。引数が2つ渡されます。ひとつは現在の値、もうひ\x0a          とつは最大値です。この手続きは文字列を返さなければなりません。デフォル\x0a          トでは以下の手続きです。\x0a               (lambda (cur max)\x0a                 (format "~d/~d" cur max))\x0a\x0a    TIME-WIDTH\x0a          時間部の幅で、文字数で指定します。デフォルトでは7文字で、これを0に設定\x0a          すると時間部を隠せます。\x0a\x0a    INFO\x0a          info部に表示されるテキストです。このテキストは、作られたプログレスバーに\x0a          `set-info'メッセージを送ることで後から変更できます。\x0a          info部を表示するには、INFO-WIDTHキーワード引数に正の値を\x0a          与えておく必要があります。\x0a\x0a    INFO-WIDTH\x0a          info部の表示幅です。デフォルトは0で、info部は表示されません。\x0a\x0a    SEPARATOR-CHAR\x0a          バー部分の前後に置く文字です。デフォルトでは`#\|'です。\x0a          セパレータを表示したくなければ、`#f'を渡します。\x0a\x0a    MAX-VALUE\x0a          プログレスバーの最大値です。デフォルトでは100です。\x0a\x0a    PORT\x0a          プログレスバーを表示する出力ポートです。デフォルト値は\x0a          `make-text-progress-bar'が呼ばれた時点での現在の出力ポートです。\x0a\x0a   以下は簡単なカスタマイズをした例です。\x0a\x0a     (use text.progress)\x0a\x0a     (define (main args)\x0a       (define (num-format cur max)\x0a         (format "~d/~d(~3d%)" cur max\x0a                 (round->exact (/. (* cur 100) max))))\x0a\x0a       (let ((p (make-text-progress-bar :header "Example"\x0a                                        :header-width 10\x0a                                        :bar-char #o\x0a                                        :num-format num-format\x0a                                        :num-width 13\x0a                                        :max-value 256)))\x0a         (do ((i 0 (+ i 1)))\x0a             ((= i 256) (p 'finish))\x0a           (p 'inc 1)\x0a           (sys-select #f #f #f 50000))))\x0a\x0a11.38 `text.sql' - SQLのパーズと構築 {{{2\x0a====================================\x0a\x0a -- Module: text.sql\x0a     このモジュールはSQL文のパーズと構築のためのユーティリティを提供します。\x0a\x0a     このモジュールは現在まだ開発途上にあります。まだトークン列を生成するルー\x0a     チンしかありません。SQLのS式構文を定義して、SQLとその構文との間の変換\x0a     ルーチンを提供する計画です。\x0a\x0a -- Function: sql-tokenize sql-string\x0a     SQL文SQL-STRINGをトークン列に分解します。返り値はトークンのリス\x0a     トで、各トークンは以下の形式のひとつで表現されます。\x0a\x0a          <symbol>              特殊区切り子、以下のどれか\x0a                                + - * / < = > <> <= >= |
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |\x0a          <character>           特殊区切り子、以下のどれか\x0a                                #, #. #( #) #;\x0a          <string>              通常の識別子\x0a          (delimited <string>)  区切られた識別子\x0a          (parameter <num>)     位置パラメータ (?)\x0a          (parameter <string>)  名前つきパラメータ (:foo)\x0a          (string    <string>)  文字列リテラル\x0a          (number    <string>)  数値リテラル\x0a          (bitstring <string>)  バイナリ文字列  <string> は "01101" な感じ\x0a          (hexstring <string>)  Binary string.  <string> は "3AD20" な感じ\x0a\x0a     トークンに分解できない文字列がくると`<sql-parse-error>'コンディショ\x0a     ンがあがります。\x0a\x0a -- Condition: <sql-parse-error>\x0a     SQLパーズエラーを示すコンディション。`<error>'を継承。\x0a\x0a      -- Instance Variable of <sql-parse-error>: sql-string\x0a          元のSQL文字列を保持。\x0a\x0a11.39 `text.tr' - 文字変換 {{{2\x0a==========================\x0a\x0a -- Module: text.tr\x0a     このモジュールは、入力ストリームから指定の文字を置き換えて出力する、\x0a     文字変換(transliterate)機能を提供します。\x0a     Unixの`tr(1)'コマンドで実装され、`sed'や`perl'にも\x0a     採り入れられている機能です。\x0a\x0a     Gaucheの`tr'はマルチバイト文字／文字列を正しく扱います。\x0a\x0a -- Function: tr from-list to-list &keyword :complement :delete\x0a          :squeeze :table-size :input :output\x0a     INPUTから文字を読み込み、その文字がFROM-LIST内にあれば\x0a     対応するTO-LIST内の文字に置き換えて、OUTPUTへと書き出します。\x0a     FROM-LISTに無い文字はそのままOUTPUTへと渡されます。\x0a\x0a     INPUTとOUTPUTの既定値はそれぞれ現在の入力ポートと 出力ポートです。\x0a\x0a     FROM-LISTとTO-LISTは文字列でなければなりません。\x0a     その中には次のような表記を使うことができます。それ以外の文字はそのまま使われます。\x0a\x0a    `x-y'\x0a          文字`x'から文字`y'までの文字の昇順の並びと解釈されます。\x0a          `x'と`y'は含まれます。文字の並びはGaucheの内部文字エンコーディングに\x0a          よって決定されるので、一般には`x'と`y'は同じキャラクタクラスの中に\x0a          止めておいた方が安全でしょう。`x'は`y'より小さくなければなりません。\x0a\x0a    `x*n'\x0a          文字`x'の`n'個の並び。`n'は10進数で表記された数値です。\x0a          これはTO-LISTでのみ有効で、FROM-LISTで使うとエラーになります。\x0a          `n'が省略されるか0の場合、`x'はTO-LISTの長さがFROM-LIST\x0a          の長さに達するまで繰り返されます(その場合、TO-LISTの残りは無視されます)。\x0a\x0a    ``'x'\x0a          文字`x'それ自身。特殊文字そのものを埋め込みたい場合に使います。\x0a          文字列のリーダも`'を解釈するので、`\\'と書かねばならないことに注意\x0a          して下さい。\x0a\x0a          グラフィカルでない文字のための構文はありません。文字列リーダの構文を使って\x0a          そのような文字を文字列に含めることができます。\x0a\x0a     いくつか例を挙げます。\x0a          ;; 大文字と小文字を交換します\x0a          (tr "A-Za-z" "a-zA-Z")\x0a\x0a          ;; ひらがなとかたかなを交換します\x0a          (tr "ぁ-んァ-ン" "ァ-ンぁ-ん")\x0a\x0a          ;; 7ビットのノングラフィカルな文字を`?'に変換します\x0a          (tr "x00-x19x7f" "?*")\x0a\x0a     TO-LISTがFROM-LISTより短い場合、動作はキーワード引数DELETEに\x0a     依存します。もし真の値がDELETEに与えられれば、FROM-LISTに現われて\x0a     TO-LISTに対応するものがない文字は入力から取り除かれます。そうでなければ\x0a     そのような文字はそのまま出力されます。\x0a\x0a     真の値がCOMPLEMENTに与えられた場合、FROM-LISTの文字の\x0a     補集合がFROM-LISTとして使われます。この文字集合は極めて大きくなる\x0a     可能性があることに注意してください。従って、一般にこのオプションは\x0a     TO-LISTに`*'を使ってそれらの文字を一文字にマッピングするか、\x0a     `delete'オプションと併用するかしないとあまり意味がありません。\x0a\x0a     真の値がSQUEEZEに与えられた場合、同じ文字への置換が2つ以上並ぶ場合に\x0a     2つめ以降の文字が削除されます。TO-LISTが空の場合は、FROM-LIST\x0a     に含まれる文字で同一文字が並んだ場合に2つめ以降の文字が削除されます。\x0a\x0a     内部的に、`tr'はキャラクタのマッピングのためにテーブルを使用します。\x0a     但し、Gaucheでは極めて大きな文字セットを扱うため、テーブルはキャラクタコードの\x0a     小さい文字のみに対して使われます(デフォルトではコード255以下の文字)。\x0a     もし、より大きな文字を頻繁に変換することが分かっていて、メモリを余分に使っても\x0a     速度を上げたい場合は、このテーブルの大きさをTABLE-SIZEキーワード引数で\x0a     指定することができます。例えばEUC-JPコードで大量の平仮名と片仮名を変換する場合は、\x0a     TABLE-SIZEを42483以上にすると、全ての変換がテーブルルックアップで\x0a     行われます。\x0a\x0a     `tr'が変換テーブルを計算するのにいくらかオーバーヘッドがあることに\x0a     注意して下さい。内側のループで`tr'を繰り返し呼ぶような場合は\x0a     下に示す`build-transliterator'を使った方が良いでしょう。\x0a\x0a -- Function: string-tr string from-list to-list &keyword :complement\x0a          :delete :squeeze :table-size\x0a     入力をSTRINGから取って変換結果を文字列で返す以外は`tr'と同じです。\x0a\x0a -- Function: build-transliterator from-list to-list &keyword\x0a          :complement :delete :squeeze :table-size :input :output\x0a     実際の変換動作をする手続きを作成して返します。内部データのセットアップを済ませるため、\x0a     同じ文字変換セットに対して`tr'を繰り返し呼ぶような場合は、この手続きを用いることで\x0a     初期化のオーバヘッドを軽減することができます。\x0a\x0a     註記：INPUTやOUTPUTキーワード引数が省略された場合、\x0a     作成される変換手続きは、それが使用された時点でのカレント入出力ポート\x0a     を参照します。\x0a\x0a          (with-input-from-file "huge-file.txt"\x0a            (lambda ()\x0a              (let loop ((line (read-line)))\x0a                (unless (eof-object? line) (tr "A-Za-z" "a-zA-Z")))))\x0a\x0a          ;; 以下の方が効率良く動作します...\x0a\x0a          (with-input-from-file "huge-file.txt"\x0a            (lambda ()\x0a              (let ((ptr (build-transliterator "A-Za-z" "a-zA-Z")))\x0a                (let loop ((line (read-line)))\x0a                  (unless (eof-object? line) (ptr))))))\x0a\x0a\x0a11.40 `text.tree' - 怠惰なテキスト構築 {{{2\x0a======================================\x0a\x0a -- Module: text.tree\x0a     テキストを生成する場合によく使われるシンプルな手続きを定義します。\x0a\x0a     プログラムでテキストを生成する場合、テキストの断片をつなぎ合わせて行く操作が\x0a     非常に多く現われます。しかし単純に`string-append'を繰り返し\x0a     呼んでしまうと、中間結果の文字列を保持するためだけにメモリアロケーションが多発しますし、\x0a     途中でエラーが発生した場合にその中間結果は結局捨てられてしまうかもしれません\x0a     (例えば、CGIスクリプト中でHTMLドキュメントを構築してゆくような場合を考えてみて下さい)。\x0a\x0a     よく知られた効率の良い方法は、テキストの断片をつなぎ合わせるのを本当に必要に\x0a     なるまで遅らせることです。Schemeではそれは非常に簡単です。単に断片をコンス\x0a     していって木構造を作り、最後にそれをトラバースしてテキストを作成するのです。\x0a     場合によっては、トラバースしながらテキストを出力すれば事足りてしまうので、\x0a     中間結果のバッファを持つ必要さえありません。 (Hans\x0a     Boehmのガベージコレクションライブラリに附属している "cord"\x0a     ライブラリ\x0a     はこのテクニックを実装したもので、エディタ等のアプリケーションで非常に効率良く\x0a     動作することが知られています)。\x0a\x0a     木構造をトラバースする手続きなどほんの2?3行で書けてしまいますが、\x0a     「一度、そして一度だけ」の精神の下に、このモジュールを提供します。\x0a     インタフェースが統一されてたほうが便利ですしね。\x0a\x0a -- Generic Function: write-tree tree &optional out\x0a     TREEをテキストの木構造とみなして、出力ポートOUTに出力します。\x0a     OUTが省略された場合は現在の出力ポートが使われます。\x0a\x0a     下に示す2つのメソッドが定義されています。より複雑な動作をさせたい場合は、\x0a     単純なリストの替わりにノードとなるクラスを定義して、それにメソッドを定義するようにすれば\x0a     動作をカスタマイズできます。\x0a\x0a -- Method: write-tree ((tree <list>) out)\x0a -- Method: write-tree ((tree <top>) out)\x0a     `write-tree'の既定の動作です。TREEがリストなら、その要素それぞれに\x0a     ついて`write-tree'を呼び出します。それ以外のオブジェクトに関しては\x0a     `display'を呼んで出力します。\x0a\x0a -- Function: tree->string tree\x0a     出力文字列ポートを作成して`write-tree'を呼び、生成された文字列を返します。\x0a\x0a11.41 `util.combinations' - 組み合わせ {{{2\x0a======================================\x0a\x0a -- Module: util.combinations\x0a     このモジュールは、いくつかの便利なコンビネーションや順列とそれに関連する\x0a     操作の手続きを実装しています。\x0a\x0a     このモジュールのほとんどの手続きは2つのバージョンを持っています。\x0a     1つはアスタリスクの付かない手続き(例えば、`permutations')で、\x0a     与えられたセットにある全ての要素を区別して扱います。もう1つは、\x0a     アスタリスクの付く手続き(例えば、`permutations*')で、重複を\x0a     考慮します。アスタリスクの付く手続きは、オプショナルなEQ引数を取り\x0a     ます。それは等値性のテストに使われ、デフォルトは`eqv?'です。\x0a\x0a -- Function: permutations set\x0a -- Function: permutations* set &optional eq\x0a     リストSETの全ての順列のリストを返します。\x0a\x0a          (permutations '(a b c))\x0a            => ((a b c) (a c b) (b a c) (b c a) (c a b) (c b a))\x0a\x0a          (permutations '(a a b))\x0a            => ((a a b) (a b a) (a a b) (a b a) (b a a) (b a a))\x0a\x0a          (permutations* '(a a b))\x0a            => ((a a b) (a b a) (b a a))\x0a\x0a     SETがある程度の要素を持っている場合、可能性のある順列の数は\x0a     爆発的に大きくなります。注意して使って下さい。\x0a     一度にそれぞれの順列を処理したい場合は、下記の`permutations-for-each'の\x0a     使用を考慮して下さい。\x0a\x0a -- Function: permutations-for-each proc set\x0a -- Function: permutations*-for-each proc set &optional eq\x0a     リストSETのそれぞれの順列に対して、PROCを呼び出します。\x0a     戻り値は未定義値です。\x0a\x0a -- Function: combinations set n\x0a -- Function: combinations* set n &optional eq\x0a     リストSETのN個の要素の可能性のある全ての順列のリストを 返します。\x0a\x0a          (combinations '(a b c) 2)\x0a            => ((a b) (a c) (b c))\x0a\x0a          (combinations '(a a b) 2)\x0a            => ((a a) (a b) (a b))\x0a\x0a          (combinations* '(a a b) 2)\x0a            => ((a a) (a b))\x0a\x0a     SETが大きいときは、組み合わせの爆発について注意して下さい。\x0a\x0a -- Function: combinations-for-each proc set n\x0a -- Function: combinations*-for-each proc set n &optional eq\x0a     SETのN個の要素のそれぞれの組み合わせについてPROCを\x0a     呼び出します。戻り値は未定義値です。\x0a\x0a -- Function: power-set set\x0a -- Function: power-set* set &optional eq\x0a     リストSETの累乗集合(全てのサブセット)を返します。\x0a\x0a          (power-set '(a b c))\x0a            => (() (a) (b) (c) (a b) (a c) (b c) (a b c))\x0a\x0a          (power-set* '(a a b)\x0a            => (() (a) (b) (a a) (a b) (a a b))\x0a\x0a -- Function: power-set-for-each proc set\x0a -- Function: power-set*-for-each proc set &optional eq\x0a     SETのそれぞれのサブセットについてPROCを呼び出す。\x0a\x0a -- Function: power-set-binary set\x0a     `power-set'のように、SETの累乗集合を返しますが、順番が異なります。\x0a     `power-set-binary'はサブセットの空間を深さ優先でトラバースしますが、\x0a     `power-set'は横型探索を行います。\x0a\x0a          (power-set-binary '(a b c))\x0a            => (() (c) (b) (b c) (a) (a c) (a b) (a b c))\x0a\x0a -- Function: cartesian-product list-of-sets\x0a -- Function: cartesian-product-right list-of-sets\x0a     LIST-OF-SETSにあるセットのデカルト積を返します。\x0a     `cartesian-product'は左固定順で結果を構築しますが\x0a     (一番右の要素がまず異なる)、\x0a     `cartesian-product-right'は右固定順で行います\x0a     (一番左の要素がまず異なる)。\x0a\x0a          (cartesian-product '((a b c) (0 1)))\x0a            => ((a 0) (a 1) (b 0) (b 1) (c 0) (c 1))\x0a\x0a          (cartesian-product-right '((a b c) (0 1)))\x0a            => ((a 0) (b 0) (c 0) (a 1) (b 1) (c 1))\x0a\x0a11.42 `util.digest' - メッセージダイジェストフレームワーク {{{2\x0a==========================================================\x0a\x0a -- Module: util.digest\x0a     このモジュールは、MD5 (*Note MD5メッセージダイジェスト::参照)や\x0a     SHA1 (*Note SHA1メッセージダイジェスト::参照)などの、メッセージ\x0a     ダイジェストアルゴリズムのためのベースクラスと一般的なインターフェースを\x0a     提供します。\x0a\x0a -- Class: <message-digest-algorithm-meta>\x0a     メッセージダイジェストアルゴリズムの実装のメタクラスです。\x0a\x0a -- Class: <message-digest-algorithm>\x0a     メッセージダイジェストアルゴリズムの実装のベースクラスです。\x0a\x0aメッセージダイジェストアルゴリズムの具体サブクラスは、以下のメソッドを\x0a実装しなければなりません。\x0a\x0a -- Generic function: digest-update! algorithm data\x0a     メッセージダイジェストアルゴリズムのインスタンスを取り、\x0a     それを(不完全な可能性のある)文字列で表されるデータDATAで\x0a     更新します。\x0a\x0a -- Generic function: digest-final! algorithm\x0a     メッセージダイジェストアルゴリズムのインスタンスを終了させ、\x0a     そのダイジェストの結果を不完全文字列で返します。\x0a\x0a -- Generic function: digest class\x0a     ダイジェストルーチンのラッパです。メッセージダイジェストアルゴリズム\x0a     CLASSを与え、現在の入力ポートから入力データをEOFまで読み込み、\x0a     そのダイジェストの結果を不完全文字列で返します。\x0a\x0a -- Generic function: digest-string class string\x0a     ダイジェストルーチンのラッパです。メッセージダイジェストアルゴリズム\x0a     CLASSを与え、入力データをSTRINGから読み込み、\x0a     そのダイジェストの結果を不完全文字列で返します。\x0a\x0a -- Function: digest-hexify digest-result\x0a     ユーティリティ手続きです。ダイジェストの結果、DIGEST-RESULTを\x0a     与えると、それを16進文字列に変換します。\x0a\x0a11.43 `util.isomorph' - 同型判定 {{{2\x0a================================\x0a\x0a -- Module: util.isomorph\x0a     二つの構造が同型かどうかを判定する手続きを提供するモジュールです。\x0a\x0a -- Function: isomorphic? obj1 obj2 &optional context\x0a     OBJ1とOBJ2が同型であれば`#t'を返します。\x0a\x0a     省略可能な引数CONTEXTは、下で説明する`object-isomorphic?'\x0a     の中から`isomorphic?'を再帰的に呼び出す場合に使います。\x0a\x0a          (isomorphic? '(a b) '(a b)) => #t\x0a\x0a          (define x (cons 0 0))\x0a          (define y (cons 0 0))\x0a          (isomorphic? (cons x x)\x0a                       (cons x y))\x0a           => #f\x0a          (isomorphic? (cons x x)\x0a                       (cons y y))\x0a           => #t\x0a\x0a -- Generic Function: object-isomorphic? obj1 obj2 context\x0a     このメソッドで、二つのオブジェクトの同型判定処理をカスタマイズできます。\x0a     基本的には、オブジェクトのトラバースしたいスロットに対して`isomorphic?'を順に適用し、\x0a     全てが成功すれば`#t'を、一つでも失敗すれば`#f'を返すようにします。\x0a     CONTEXTはトラバースのコンテクストを保持しているオブジェクトです。そのまま\x0a     `isomorphic?'に渡して下さい。\x0a\x0a     デフォルトメソッドは、OBJ1とOBJ2が`equal?'の意味で等しければ\x0a     `#t'を返します。\x0a\x0a11.44 `util.lcs' - 最長共通サブシーケンス {{{2\x0a=========================================\x0a\x0a -- Module: util.lcs\x0a     このモジュールは、与えられた2つのシーケンスの最長共通サブシーケンスを見つける\x0a     アルゴリズムを実装しています。アルゴリズムは、Eugene Myersの\x0a     O(ND)アルゴリズムに基づいています(*Note [Myers86]: myers86.)。\x0a\x0a     このアルゴリズムを使うアプリケーションの1つは、2つのテキストストリームの\x0a     相違点を計算する*Note テキストストリームの相違点を計算する::です。\x0a\x0a -- Function: lcs seq-a seq-b &optional eq-fn\x0a     2つのリスト、SEQ-AとSEQ-Bの最長共通シーケンスを計算して\x0a     返します。オプションのEQ-FNでは、比較を行う述語を指定します。\x0a     省略されると、`equal?'が使われます。\x0a\x0a          (lcs '(x a b y) '(p a q b))\x0a           => (a b)\x0a\x0a -- Function: lcs-with-positions seq-a seq-b &optional eq-fn\x0a     `lcs'の詳細バージョンです。引数は同じです。\x0a\x0a     以下の構造のリストを返します。\x0a\x0a          (LENGTH ((ELT A-POS B-POS) ...))\x0a\x0a     LENGTHは、見つかったLCS(最長共通サブシーケンス)の長さを表す整数です。\x0a     それに続くのは、LCSの要素のリストで、その要素を構成するそれぞれのサブリスト、\x0a     SEQ-Aの中での要素の位置(整数)、SEQ-Bの中での要素の位置(整数)\x0a     となります。\x0a\x0a          (lcs-with-positions '(a) '(a))\x0a           => (1 ((a 0 0)))\x0a\x0a          (lcs-with-positions '(x a b y) '(p q a b))\x0a           => (2 ((a 1 2) (b 2 3)))\x0a\x0a          (lcs-with-positions '(x a b y) '(p a q b))\x0a           => (2 ((a 1 1) (b 2 3)))\x0a\x0a          (lcs-with-positions '(x y) '(p q))\x0a           => (0 ())\x0a\x0a -- Function: lcs-fold a-proc b-proc both-proc seed a b &optional eq-fn\x0a     2つのリストAとBから引き出された"編集リスト"に対する\x0a     基本的なイテレータです。\x0a\x0a     A-PROC、B-PROC、BOTH-PROCは全て2引数を取る手続きです。\x0a     2番目の引数は、計算の中間の値です。最初の値は、A-PROCではAにしかない要素、\x0a     B-PROCではBにしかない要素、BOTH-PROCではAとBの両方に\x0a     ある要素となります。それぞれの手続きが返す値は、次に呼び出される手続きのうちの1つの\x0a     状態を表す値として使われます。SEEDは、状態を表す値の初期値として使われます。\x0a     `lcs-fold'が返す値は、最後の状態を表す値です。\x0a\x0a     これらの3つの手続きは、以下の順番で呼ばれます。ここでは、シーケンスAは\x0a     A'CA"、BはB'CB"となっているとすると、\x0a     ここではA'、B'、A"、B"はサブシーケンスで、\x0a     CはAとBのLCSの先頭になります。そして、A-PROCはまず\x0a     A'のそれぞれの要素に対して呼ばれ、B-PROCがB'のそれぞれの\x0a     要素に対して呼ばれ、BOTH-PROCがCに対して呼ばれます。\x0a     その後、このプロセスはA"とB"を使って繰り返されます。\x0a\x0a -- Function: lcs-edit-list a b &optional eq-fn\x0a     2つのリストAとBから"編集リスト"を計算します。それは、\x0a     AをBに変更するためのコマンド(追加と削除)の最小セットです。\x0a     この手続きは、上の`lcs-fold'の上に構築されています。\x0a          (+|
Stack Trace:
_______________________________________
gosh> #<subr ->
gosh> *** ERROR: unbound variable: POSITION
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ELEMENT
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 26130: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 例を挙げます。AとBがそれぞれ以下のようなリストだとします。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: A
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ==
Stack Trace:
_______________________________________
gosh> *** ERROR: invalid application: ("A" "B" "C" "E" "H" "J" "L" "M" "N" "P")
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: B
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ==
Stack Trace:
_______________________________________
gosh> *** ERROR: invalid application: ("B" "C" "D" "E" "F" "J" "K" "L" "M" "R" "S" "T")
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: すると、
Stack Trace:
_______________________________________
gosh> (lcs-edit-list a b equal?)
gosh> は以下のリストを返します。
gosh> *** ERROR: operation + is not defined between 2 and "D"
Stack Trace:
_______________________________________
  0  (+ 2 "D")
        At line 26139 of "(stdin)"
gosh> *** ERROR: unbound variable: 結果は5つの片からなります。最初のものは1つのディレクティブ、
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 26145: extra close parenthesis
Stack Trace:
_______________________________________
gosh> から
gosh> *** ERROR: unbound variable: なり、これはリストAの位置0にある要素
Stack Trace:
_______________________________________
gosh> ``A
gosh> ''が削除されることを意味します。
gosh> *** ERROR: unbound variable: |2番目のものはまた1つのディレクティブ、|
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 26147: extra close parenthesis
Stack Trace:
_______________________________________
gosh> からなり、これは
gosh> *** ERROR: unbound variable: リストBの位置2にある要素
Stack Trace:
_______________________________________
gosh> ``D
gosh> ''が追加されることを意味します。
gosh> *** ERROR: unbound variable: |3番目のものは、リストAの位置4にある|
Stack Trace:
_______________________________________
gosh> ``H
gosh> ''は削除され、リストBの
gosh> *** ERROR: unbound variable: 位置4にある
Stack Trace:
_______________________________________
gosh> ``F
gosh> ''が追加される、などとなります。
gosh> *** ERROR: unbound variable: もしあなたがPerlのAlgorithm::Diffモジュールを良く知っていれば、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: その
Stack Trace:
_______________________________________
gosh> diff
gosh> 手続きが返すものと同じ構造だということが分かるでしょう。
gosh> 11.45
gosh> util.list
gosh> -
gosh> *** ERROR: unbound variable: その他のリストライブラリ
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 26291: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 26291: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: DEFAULTが省略されると、
Stack Trace:
_______________________________________
gosh> #f
gosh> が使われます。
gosh> assoc-ref
gosh> は、そのデフォルトが
gosh> equal?
gosh> である、オプションの
gosh> *** ERROR: unbound variable: 比較関数EQ-FNを取ります。
Stack Trace:
_______________________________________
gosh> assq-ref
gosh> は
gosh> eq?
gosh> を、
gosh> assv-ref
gosh> は
gosh> eqv?
gosh> をそれぞれ使います。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: rassoc-ref
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: alist
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: default
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: eq-fn
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: rassq-ref
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: alist
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: default
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: rassv-ref
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: alist
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: default
Stack Trace:
_______________________________________
gosh> assoc-ref
gosh> の逆連想リストバージョンです。
gosh> *** ERROR: unbound variable: alist
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ==
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
  0  (rassoc key alist eq-fn)
        At line 26305 of "(stdin)"
gosh> *** READ-ERROR: Read error at "(stdin)":line 26306: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 26306: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: オプショナル引数の意味は、
Stack Trace:
_______________________________________
gosh> assoc-ref
gosh> と同じです。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: assoc-set!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: alist
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> "value1"
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: eq-fn
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: assq-set!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: alist
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> "value1"
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: assv-set!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: alist
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: key
Stack Trace:
_______________________________________
gosh> "value1"
gosh> alist
gosh> に
gosh> (key . val)
gosh> のペアが追加された連想リストを返します。
gosh> alist
gosh> がすでにKEYをキーとする要素を持っている場合、
gosh> *** ERROR: unbound variable: その要素の_cdr_は破壊的にVALに変更されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ALISTがKEYをキーとする要素を持っていない場合は、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 新しいペアが作成され、ALISTの一番前に追加されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: したがって、KEY-VALペアが追加されたことを保証するために
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: その戻り値を使うべきです。
Stack Trace:
_______________________________________
gosh> assoc-set!
gosh> は、そのデフォルトが
gosh> equal?
gosh> である、オプションの
gosh> *** ERROR: unbound variable: 比較関数EQ-FNを取ります。
Stack Trace:
_______________________________________
gosh> assq-set!
gosh> は
gosh> eq?
gosh> を、
gosh> assv-set!
gosh> は
gosh> eqv?
gosh> を、それぞれ使います。
gosh> 11.46
gosh> util.match
gosh> -
gosh> *** ERROR: unbound variable: パターンマッチング
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 26899: unsupported #-syntax: #<
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: class
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: my-record>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: rtd
Stack Trace:
_______________________________________
  0  (record-constructor rtd '(a b c))
        At line 26901 of "(stdin)"
gosh> *** ERROR: unbound variable: make-my-record
Stack Trace:
_______________________________________
  0  (make-my-record 1 2 3)
        At line 26903 of "(stdin)"
gosh> *** ERROR: unbound variable: obj
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 26905: unsupported #-syntax: #<
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: my-record
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |0x819d9b0>|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: obj
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> #t
gosh> *** ERROR: unbound variable: obj
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 1
gosh> *** ERROR: unbound variable: obj
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 2
gosh> *** ERROR: unbound variable: obj
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> 3
gosh> *** ERROR: unbound variable: obj
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: obj
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: =>
Stack Trace:
_______________________________________
gosh> -1
gosh> 11.5
gosh> util.relation
gosh> -
gosh> *** ERROR: unbound variable: リレーションフレームワーク
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 26983: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のインスタンスを返さなければなりません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のこりのメソッドは上の4つのメソッドを使って組まれています。とはいえ、
Stack Trace:
_______________________________________
gosh> <relation>
gosh> のサブクラスでは以下のメソッドを性能を得るためにオー
gosh> *** ERROR: unbound variable: バーロードすることもできます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: relation-column-name?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <relation>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: column
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: COLUMNがリレーションRにおいて有効なカラム名である場合にの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: み真を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: relation-column-getter
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <relation>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: column
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: relation-column-setter
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <relation>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: column
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: リレーションRの行の指定したカラムにアクセスする手続を返します。
Stack Trace:
_______________________________________
gosh> Relation-column-getter
gosh> は、1つの引数、行をとる手続きを返さなけれ
gosh> *** ERROR: unbound variable: ばなりません。
Stack Trace:
_______________________________________
gosh> Relation-column-setter
gosh> は2つの引数、行と新しくセッ
gosh> *** ERROR: unbound variable: トする値を取る手続きを返さなければなりません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: リレーションが読み込み専用の場合は
Stack Trace:
_______________________________________
gosh> relation-column-setter
gosh> は
gosh> #f
gosh> を返します。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: relation-ref
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <relation>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: row
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: column
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: default
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ROWはリレーションRの行です。ROWのCOLUMNの値を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 返します。COLUMNが不正なカラム名である場合、DEFAULTが与え
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: られていればそれを返し、そうでなければ、エラーを示すシグナルがあがりま
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: す。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: relation-set!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <relation>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: row
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: column
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: value
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ROWはリレーションRの行です。VALUEをROWの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: COLUMNに設定します。リレーションが読み込み専用の場合には
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: エラーを示すシグナルがあがります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: relation-column-getters
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <relation>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: relation-column-setters
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <relation>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ゲッタとセッタの完全なリストを返します。通常はデフォルトのメソッドで十
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 分ですが、たとえばゲッタのリストをキャッシュしたいときもあるでしょう。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: relation-coercer
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <relation>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 行をシーケンスに変換する手続きを返します。行がすでにシーケンスで表現さ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: れているリレーションであれば、行をそのまま返す手続きです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: relation-insertable?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <relation>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: リレーションRに新しい行を挿入可能な場合にのみ真を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: relation-insert!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <relation>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: row
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: リレーションRに行ROWを挿入します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: relation-deletable?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <relation>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: リレーションRから行を削除可能である場合にのみ真を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: relation-delete!
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <relation>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: row
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: リレーションRから行ROWを削除します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Method:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: relation-fold
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <relation>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: seed
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: column
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PROCを各行のカラムCOLUMN
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の値に適用します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SEEDは状態の値として渡されます。すなわち、リレーションRの
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 各行ごとに以下のようにPROCを呼びます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: V_0
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: where
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: V_K
Stack Trace:
_______________________________________
gosh> #<subr =>
gosh> *** ERROR: unbound variable: R
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 呼び出しの結果があたらしいシードの値となり、最終の結果が
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: RELATION-FOLDから返ります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: たとえば、リレーションが
Stack Trace:
_______________________________________
gosh> amount
gosh> という名前のカラムをもつものと
gosh> *** ERROR: unbound variable: し、リレーション
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: R
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 内にあるそのカラムをすべて足しあわせたいとす
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ると以下のように書けます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: r
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 具象クラス
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 27132: unsupported #-syntax: #<
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: undef>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: gosh>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: s0
Stack Trace:
_______________________________________
  0  (stream-take s0 10)
        At line 27133 of "(stdin)"
gosh> *** ERROR: invalid application: (0 2 4 6 8 10 12 14 16 18)
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: gosh>
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: s1
Stack Trace:
_______________________________________
  0  (stream-take s1 10)
        At line 27135 of "(stdin)"
gosh> *** ERROR: invalid application: (1 3 5 7 9 11 13 15 17 19)
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-map
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: func
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 27139: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: streams
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-40
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: STREAMSの各要素にFUNCを適用した値を要素とする新しいストリー
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ムを返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-for-each
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: func
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 27144: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: streams
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-40
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: FUNCをSTREAMSの各要素に適用します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: STREAMSが終端にたっしたところで停止します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-filter
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pred?
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-40
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PRED?をパスする要素のみからなる新しいストリームを返す。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 以下の手続きは
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Alejandro
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Forero
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Cuervo
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Chicken
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Schemeのために書いた
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ライブラリから取ってきたものです。これらの手続きの名前は
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: srfi-1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: List
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の命名規則にならったものです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-xcons
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: b
Stack Trace:
_______________________________________
gosh> (stream-cons b a)
gosh> のこと。利便性のためだけにある。
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-cons*
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: elt
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: STREAMの前にELT
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...を連結した新しいストリームを生成し|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: make-stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: n
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: init
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: N個のINITを要素とする新しいストリームを生成します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: INITが省略された場合
Stack Trace:
_______________________________________
gosh> #f
gosh> が使われます。Nを負の値にする
gosh> *** ERROR: unbound variable: と無限ストリームが生成されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-tabulate
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: n
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: init-proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: N個の要素をもつ新しいストリームを生成します。K-番目の要素
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: INIT-PROC
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: K
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: に適用して得られます。Nを負の値にする
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: と無限ストリームが生成されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-iota
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: count
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: start
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: step
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: STARTからはじまり、STEPずつ要素が増加する整数のストリーム
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を生成します。ストリームの長さはCOUNTが正ならその値になります。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: COUNTが負なら無限ストリームになります。STARTのデフォルト値
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |0、STEPのデフォルト値は|
Stack Trace:
_______________________________________
gosh> 1
gosh> *** ERROR: unbound variable: です。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-format
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: fmt
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: arg
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> string->stream
gosh> を
gosh> (format fmt arg |...|)
gosh> に適用した結果の
gosh> *** ERROR: unbound variable: ストリームを返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-lines
Stack Trace:
_______________________________________
gosh> #<subr string>
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream->list
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: list->stream
Stack Trace:
_______________________________________
gosh> #<subr list>
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: string->stream
Stack Trace:
_______________________________________
gosh> #<subr string>
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream->string
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: port->stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: iport
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: reader
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: closer
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: iterator->stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: proc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream=
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: elt=
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-prefix=
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: prefix
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: elt=
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-caar
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: s
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-cadr
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: s
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-cdddar
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: s
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-cddddr
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: s
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-ref
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pos
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-first
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: s
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-second
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: s
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-third
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: s
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-fourth
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: s
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-fifth
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: s
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-sixth
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: s
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-seventh
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: s
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-eighth
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: s
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-ninth
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: s
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-tenth
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: s
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-take
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: count
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-take-safe
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: count
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-drop
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: count
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-drop-safe
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: count
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-intersperse
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: element
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-split
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pred
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-last
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-last-n
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: count
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-butlast
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-butlast-n
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: count
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-length
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-length>=
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: n
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-append
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: steram-concatenate
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: streams
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-reverse
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: tail-stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-count
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pred
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-remove
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pred
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-partition
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pred
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-find
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pred
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-find-tail
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pred
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-take-while
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pred
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-drop-while
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pred
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-span
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pred
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-break
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pred
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-any
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pred
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-every
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pred
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-index
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pred
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |...|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-member
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: obj
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: elt=
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-memq
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: obj
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-memv
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: obj
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-delete
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: obj
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: elt=
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-delete-duplicates
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: elt=
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream-grep
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: re
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: write-stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &optional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: oport
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: writer
Stack Trace:
_______________________________________
gosh> 11.52
gosh> util.trie
gosh> -
gosh> *** ERROR: unbound variable: Trie
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 27780: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: NAMEはパラメータの名前、FILENAMEはオリジナルファイルの名前
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: クライアント側でのパス名
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: です。PART-INFOは
Stack Trace:
_______________________________________
gosh> <mime-part>
gosh> オブジェクトで、
gosh> *** ERROR: unbound variable: このMIMEパートの情報を保持しており、そしてIPORTは内容を読むための入力ポートです。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: これらの引数の詳しい意味については*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: MIMEメッセージ処理::を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照して下さい。独自のPROCEDUREを書く際に、
Stack Trace:
_______________________________________
gosh> rfc.mime
gosh> の
gosh> mime-retrieve-body
gosh> のような手続きが使えるかもしれません。
gosh> *** ERROR: unbound variable: PROCEDURE内で一時ファイルを作る場合は、それを
Stack Trace:
_______________________________________
gosh> cgi-add-temporary-file
gosh> で登録しておけば、cgi処理中に
gosh> *** ERROR: unbound variable: エラーが起きた場合でも一時ファイルが消去されるようにすることができます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ファイルアップロード以外のパラメータはPART-HANDLERSの対象外である
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ことに注意して下さい。それらのパラメータの値は常に文字列へと変換されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 簡単な例を示します。例えば次のようなフォームがあったとします。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <form
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: enctype=
Stack Trace:
_______________________________________
gosh> "multipart/form-data"
gosh> *** ERROR: unbound variable: method=
Stack Trace:
_______________________________________
gosh> "POST"
gosh> *** ERROR: unbound variable: action=
Stack Trace:
_______________________________________
gosh> "mycgi.cgi"
gosh> #<subr >>
gosh> *** ERROR: unbound variable: <input
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: type=
Stack Trace:
_______________________________________
gosh> "file"
gosh> *** ERROR: unbound variable: name=
Stack Trace:
_______________________________________
gosh> "imagefile"
gosh> *** ERROR: unbound variable: />
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <input
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: type=
Stack Trace:
_______________________________________
gosh> "text"
gosh> *** ERROR: unbound variable: name=
Stack Trace:
_______________________________________
gosh> "description"
gosh> *** ERROR: unbound variable: />
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: <input
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: type=
Stack Trace:
_______________________________________
gosh> "hidden"
gosh> *** ERROR: unbound variable: name=
Stack Trace:
_______________________________________
gosh> "mode"
gosh> *** ERROR: unbound variable: value=
Stack Trace:
_______________________________________
gosh> "normal"
gosh> *** ERROR: unbound variable: />
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: </form>
Stack Trace:
_______________________________________
gosh> mycgi.cgi
gosh> 内で、
gosh> cgi-parse-parameters
gosh> を
gosh> *** ERROR: unbound variable: PART-HANDLERS引数なしで使った場合は、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 例えば次のようなリストがパラメータパージングの結果として得られるでしょう。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 実際の値は、webクライアントがどのようにフォームを埋めたかに依存します
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: invalid application: ("description" "my image")
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ここでもし、
Stack Trace:
_______________________________________
gosh> '(("imagefile" file "/tmp/mycgi"))
gosh> をPART-HANDLERSに
gosh> *** ERROR: unbound variable: 渡したなら、替わりに次のような結果が得られるでしょう。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ここで、アップロードされたファイルは
Stack Trace:
_______________________________________
gosh> /tmp/mycgi7gq0B
gosh> にセーブ
gosh> *** ERROR: unbound variable: されていることになります。
Stack Trace:
_______________________________________
gosh> *** ERROR: invalid application: ("description" "my image")
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 上の例でシンボル
Stack Trace:
_______________________________________
gosh> file
gosh> のかわりに
gosh> file+name
gosh> を使えば、
gosh> *** ERROR: unbound variable: 例えば
Stack Trace:
_______________________________________
gosh> "imagefile"
gosh> の値として
gosh> ("/tmp/mycgi7gq0B" "logo.jpg")
gosh> のようなものが得られるでしょう。ここで
gosh> "logo.jpg"
gosh> は
gosh> *** ERROR: unbound variable: アップロードされたファイルのクライアント側でのパス名です。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: できるため、その文字列が有効なパス名であることを仮定してはなりません。
Stack Trace:
_______________________________________
gosh> 11.55
gosh> www.cgi.test
gosh> -
gosh> *** ERROR: unbound variable: CGIのテスト
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 27868: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: がその環境変数の名前、
Stack Trace:
_______________________________________
gosh> cdr
gosh> が対応する値であるような連想リストでなければなりません。
gosh> *** ERROR: unbound variable: 両方ともまず
Stack Trace:
_______________________________________
gosh> x->string
gosh> に渡されます。
gosh> *** ERROR: unbound variable: ENVIRONMENT
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: とデフォルトのテスト環境に同じ環境変数がある場合は、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ENVIRONMENT
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: にあるものが使われます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: さらに、引数
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: PARAMETERS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: に連想リストが渡された場合、そこから
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: クエリストリングが作られスクリプトに渡されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: クエリストリングを渡す実際のメソッドは、環境変数
Stack Trace:
_______________________________________
gosh> REQUEST_METHOD
gosh> の
gosh> *** ERROR: unbound variable: 値に依存します。
Stack Trace:
_______________________________________
gosh> REQUEST_METHOD
gosh> が
gosh> GET
gosh> か
gosh> HEAD
gosh> で
gosh> *** ERROR: unbound variable: ある場合は、クエリストリングは環境変数
Stack Trace:
_______________________________________
gosh> QUERY_STRING
gosh> に置かれます。
gosh> REQUEST_METHOD
gosh> が
gosh> POST
gosh> の場合は、クエリストリングは
gosh> *** ERROR: unbound variable: スクリプトの標準入力から取得されます。後者の場合、
Stack Trace:
_______________________________________
gosh> CONTENT_TYPE
gosh> には
gosh> application/x-www-form-urlencoded
gosh> が、
gosh> CONTENT_LENGTH
gosh> には
gosh> QUERY_STRING
gosh> の長さが、それぞれ自動的に
gosh> *** ERROR: unbound variable: セットされます。
Stack Trace:
_______________________________________
gosh> REQUEST_METHOD
gosh> がその他の値の場合は、
gosh> *** ERROR: unbound variable: PARAMETERS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は無視されます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 必要であれば、このメカニズムをバイパスして、環境変数
Stack Trace:
_______________________________________
gosh> QUERY_STRING
gosh> を
gosh> *** ERROR: unbound variable: 直接セットアップすることも可能です。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: run-cgi-script->header&body
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: script
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: reader
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &keyword
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: environment
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: parameters
Stack Trace:
_______________________________________
gosh> call-with-cgi-script
gosh> の便利なラッパー手続きです。
gosh> *** ERROR: unbound variable: SCRIPT、ENVIRONMENT、PARAMETERSは、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: そのまま
Stack Trace:
_______________________________________
gosh> call-with-cgi-script
gosh> に渡されます。
gosh> *** ERROR: unbound variable: スクリプトの出力は、
Stack Trace:
_______________________________________
gosh> run-cgi-script->header&body
gosh> により
gosh> *** ERROR: unbound variable: パーズされます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 最初に、RFC2822ヘッダフィールドが
Stack Trace:
_______________________________________
gosh> rfc822-read-headers
gosh> (*Note RFC822メッセージ形式::参照)
gosh> *** ERROR: unbound variable: によりパーズされます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 次に、READERが、スクリプトの出力にパイプされた入力ポートと
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ともに呼ばれます。
Stack Trace:
_______________________________________
gosh> run-cgi-script->header&body
gosh> は、ヘッダのリスト
gosh> *** ERROR: invalid application: (rfc822-read-headers によりパーズされたもの)
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: と
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: READERの戻り値の2つの値を返します。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: run-cgi-script->sxml
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: script
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &keyword
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: environment
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: parameters
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: この手続きでは、
Stack Trace:
_______________________________________
gosh> run-cgi-script->header&body
gosh> の
gosh> *** ERROR: unbound variable: READERとして、
Stack Trace:
_______________________________________
gosh> ssax:xml->sxml
gosh> (*Note 関数的なXMLパーザ::参照)
gosh> *** ERROR: unbound variable: を使います。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 整形式
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Well-formed
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のHTMLやXMLドキュメントを生成する
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: CGIスクリプトをテストする場合に便利です。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: run-cgi-script->string
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: script
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &keyword
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: environment
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: parameters
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |--|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Function:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: run-cgi-script->string-list
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: script
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: &keyword
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: environment
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: parameters
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: これらの手続きは、
Stack Trace:
_______________________________________
gosh> run-cgi-script->header&body
gosh> の
gosh> *** ERROR: unbound variable: READERとして、それぞれ
Stack Trace:
_______________________________________
gosh> port->string
gosh> 、
gosh> port->string-list
gosh> を使います。
gosh> *** ERROR: unbound variable: 例:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: run-cgi-script->string-list
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Appendix
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: A
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参考文献
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 27936: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |1CC|
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Carl
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Bruggeman
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Oscar
"(stdin)":27938:,Oscar

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Waddell
Stack Trace:
_______________________________________
gosh> #<syntax and>
gosh> *** ERROR: unbound variable: R.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Kent
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Dybvig
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Representing
"(stdin)":27938:,Representing

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: control
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: in
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: the
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: presence
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: one-shot
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: continuations
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,in
"(stdin)":27939:,in

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Proceedings
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SIGPLAN
Stack Trace:
_______________________________________
gosh> 96
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,pp.
"(stdin)":27940:,pp.

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |99-107|
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,1996.0
"(stdin)":27940:,1996.0

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Myers86
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Eugene
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Myers
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,An
"(stdin)":27943:,An

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: O
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ND
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Difference
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Algorithm
Stack Trace:
_______________________________________
gosh> #<syntax and>
gosh> *** ERROR: unbound variable: Its
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Variations
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Algorithmica
"(stdin)":27944:,Algorithmica

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Vol.
Stack Trace:
_______________________________________
gosh> 1
gosh> *** ERROR: unbound variable: No.
Stack Trace:
_______________________________________
gosh> 2
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,pp.
"(stdin)":27944:,pp.

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: |251-266|
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,1986.0
"(stdin)":27944:,1986.0

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: MOP
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Gregor
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Kiczales
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Jim
"(stdin)":27947:,Jim

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Des
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Rivieres
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Daniel
"(stdin)":27947:,Daniel

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Bobrow
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,The
"(stdin)":27947:,The

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Art
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Metaobject
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Protocol
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,The
"(stdin)":27948:,The

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: MIT
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Press.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Dylan
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Kim
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Barrett
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Bob
"(stdin)":27951:,Bob

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Cassels
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Paul
"(stdin)":27951:,Paul

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Haahr
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,David
"(stdin)":27951:,David

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: A.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Moon
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Keith
"(stdin)":27951:,Keith

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Playford
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,P.
"(stdin)":27952:,P.

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Tucker
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Withington
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,A
"(stdin)":27952:,A

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Monotonic
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Superclass
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Linearization
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: for
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Dylan
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,in
"(stdin)":27953:,in

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Proceedings
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OOPSLA
Stack Trace:
_______________________________________
gosh> 96
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,October
"(stdin)":27953:,October

Stack Trace:
_______________________________________
gosh> 1996.0
gosh> http://www.webcom.com/~haahr/dylan/linearization-oopsla96.html
gosh> *** READ-ERROR: Read error at "(stdin)":line 27955: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: FairThreads
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: F.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Boussinot
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Java
"(stdin)":27957:,Java

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Fair
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Threads
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,`http://www-sop.inria.fr/mimosa/rp/FairThreads/html/FairThreads.html
"(stdin)":27958:,`http://www-sop.inria.fr/mimosa/rp/ ...

Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 27959: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: RFC1321
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: R.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Rivest
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,The
"(stdin)":27961:,The

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: MD5
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Message-Digest
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Algorithm.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: April
Stack Trace:
_______________________________________
gosh> 1992.0
gosh> ftp://ftp.isi.edu/in-notes/rfc1321.txt
gosh> *** READ-ERROR: Read error at "(stdin)":line 27964: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: RFC2045
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: N.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Freed
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,N.
"(stdin)":27966:,N.

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Borenstein:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Multipurpose
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Internet
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Mail
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Extension
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: MIME
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Part
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: One:
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Format
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Internet
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Message
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Bodies
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,November
"(stdin)":27967:,November

Stack Trace:
_______________________________________
gosh> 1996.0
gosh> ftp://ftp.isi.edu/in-notes/rfc2045.txt
gosh> *** READ-ERROR: Read error at "(stdin)":line 27969: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: RFC2396
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: T.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Berners-Lee
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,R.
"(stdin)":27971:,R.

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Fielding
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,L.
"(stdin)":27971:,L.

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Masinter
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Uniform
"(stdin)":27971:,Uniform

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Resource
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Identifiers
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: URI
Stack Trace:
_______________________________________
gosh> :
gosh> *** ERROR: unbound variable: Generic
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Syntax
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,August
"(stdin)":27972:,August

Stack Trace:
_______________________________________
gosh> 1998.0
gosh> ftp://ftp.isi.edu/in-notes/rfc2396.txt
gosh> *** READ-ERROR: Read error at "(stdin)":line 27974: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: RFC2616
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: R.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Fielding
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: et
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: al
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Hypertext
"(stdin)":27976:,Hypertext

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Transfer
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Protocol
Stack Trace:
_______________________________________
gosh> #<subr ->
gosh> *** ERROR: unbound variable: HTTP/1.1
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,June
"(stdin)":27976:,June

Stack Trace:
_______________________________________
gosh> 1999.0
gosh> ftp://ftp.isi.edu/in-notes/rfc2616.txt
gosh> *** READ-ERROR: Read error at "(stdin)":line 27979: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: RFC2822
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: P.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Resnick
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ed.
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Internet
"(stdin)":27981:,Internet

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Message
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Format
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,April
"(stdin)":27981:,April

Stack Trace:
_______________________________________
gosh> 2001.0
gosh> ftp://ftp.isi.edu/in-notes/rfc2822.txt
gosh> *** READ-ERROR: Read error at "(stdin)":line 27983: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: RFC2965
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: D.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Kristol
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,L.
"(stdin)":27985:,L.

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Montulli
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,HTTP
"(stdin)":27985:,HTTP

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: State
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Management
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Mechanism
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,October
"(stdin)":27985:,October

Stack Trace:
_______________________________________
gosh> 2000.0
gosh> ftp://ftp.isi.edu/in-notes/rfc2965.txt
gosh> *** READ-ERROR: Read error at "(stdin)":line 27988: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: RFC3174
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: D.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Eastlake
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,|3rd|
"(stdin)":27990:,|3rd|

Stack Trace:
_______________________________________
gosh> #<syntax and>
gosh> *** ERROR: unbound variable: P.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Jones
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,US
"(stdin)":27990:,US

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Secure
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Hash
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Algorithm
Stack Trace:
_______________________________________
gosh> 1
gosh> *** ERROR: unbound variable: SHA1
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 27991: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: September
Stack Trace:
_______________________________________
gosh> 2001.0
gosh> ftp://ftp.isi.edu/in-notes/rfc3174.txt
gosh> *** READ-ERROR: Read error at "(stdin)":line 27993: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: RFC3548
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: S.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Josefsson
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Ed.:
"(stdin)":27995:,Ed.:

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: The
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Base16
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Base32
"(stdin)":27995:,Base32

Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,and
"(stdin)":27995:,and

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Base64
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Data
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Encodings
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: July
Stack Trace:
_______________________________________
gosh> 2003.0
gosh> ftp://ftp.isi.edu/in-notes/rfc3548.txt
gosh> *** READ-ERROR: Read error at "(stdin)":line 27998: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-0
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Marc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Feeley
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Feature-based
"(stdin)":28000:,Feature-based

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: conditional
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: expansion
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: construct
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,May
"(stdin)":28000:,May

Stack Trace:
_______________________________________
gosh> 1999.0
gosh> http://srfi.schemers.org/srfi-0/srfi-0.html
gosh> *** READ-ERROR: Read error at "(stdin)":line 28003: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-1
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Olin
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Shivers
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,List
"(stdin)":28005:,List

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Library
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,October
"(stdin)":28005:,October

Stack Trace:
_______________________________________
gosh> 1999.0
gosh> http://srfi.schemers.org/srfi-1/srfi-1.html
gosh> *** READ-ERROR: Read error at "(stdin)":line 28007: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Oleg
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Kiselyov
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,`AND-LET*
"(stdin)":28009:,`AND-LET*

Stack Trace:
_______________________________________
gosh> :
gosh> *** ERROR: unbound variable: an
Stack Trace:
_______________________________________
gosh> AND
gosh> with
gosh> *** ERROR: unbound variable: local
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: bindings
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,a
"(stdin)":28009:,a

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: guarded
Stack Trace:
_______________________________________
gosh> LET*
gosh> special
gosh> *** ERROR: unbound variable: form
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,March
"(stdin)":28010:,March

Stack Trace:
_______________________________________
gosh> 1998.0
gosh> http://srfi.schemers.org/srfi-2/srfi-2.html
gosh> *** READ-ERROR: Read error at "(stdin)":line 28012: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-4
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Marc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Feeley
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Homogeneous
"(stdin)":28014:,Homogeneous

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: numeric
Stack Trace:
_______________________________________
gosh> #<subr vector>
gosh> *** ERROR: unbound variable: types
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,May
"(stdin)":28014:,May

Stack Trace:
_______________________________________
gosh> 1999.0
gosh> http://srfi.schemers.org/srfi-4/srfi-4.html
gosh> *** READ-ERROR: Read error at "(stdin)":line 28016: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-6
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: William
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: D
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Clinger
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Basic
"(stdin)":28018:,Basic

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: String
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Ports
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,July
"(stdin)":28018:,July

Stack Trace:
_______________________________________
gosh> 1999.0
gosh> http://srfi.schemers.org/srfi-6/srfi-6.html
gosh> *** READ-ERROR: Read error at "(stdin)":line 28020: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-8
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: John
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: David
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Stone
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,receive:
"(stdin)":28022:,receive:

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Binding
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: to
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: multiple
Stack Trace:
_______________________________________
gosh> #<subr values>
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,August
"(stdin)":28022:,August

Stack Trace:
_______________________________________
gosh> 1999.0
gosh> http://srfi.schemers.org/srfi-8/srfi-8.html
gosh> *** READ-ERROR: Read error at "(stdin)":line 28025: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-9
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Richard
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Kelsey
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Defining
"(stdin)":28027:,Defining

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Record
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Types
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,September
"(stdin)":28027:,September

Stack Trace:
_______________________________________
gosh> 1999.0
gosh> http://srfi.schemers.org/srfi-9/srfi-9.html
gosh> *** READ-ERROR: Read error at "(stdin)":line 28029: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-10
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Oleg
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Kiselyov
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 28031: bad #,-form: '(' should be followed, but got '
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: external
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: form
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,January
"(stdin)":28031:,January

Stack Trace:
_______________________________________
gosh> 2000.0
gosh> http://srfi.schemers.org/srfi-10/srfi-10.html
gosh> *** READ-ERROR: Read error at "(stdin)":line 28033: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-11
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Lars
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: T
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Hansen
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Syntax
"(stdin)":28035:,Syntax

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: for
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: receiving
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: multiple
Stack Trace:
_______________________________________
gosh> #<subr values>
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,March
"(stdin)":28035:,March

Stack Trace:
_______________________________________
gosh> 2000.0
gosh> http://srfi.schemers.org/srfi-11/srfi-11.html
gosh> *** READ-ERROR: Read error at "(stdin)":line 28037: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-13
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Olin
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Shivers
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,String
"(stdin)":28039:,String

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Libraries
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,December
"(stdin)":28039:,December

Stack Trace:
_______________________________________
gosh> 2000.0
gosh> http://srfi.schemers.org/srfi-13/srfi-13.html
gosh> *** READ-ERROR: Read error at "(stdin)":line 28041: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-14
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Olin
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Shivers
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Character-set
"(stdin)":28043:,Character-set

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Library
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,December
"(stdin)":28043:,December

Stack Trace:
_______________________________________
gosh> 2000.0
gosh> http://srfi.schemers.org/srfi-14/srfi-14.html
gosh> *** READ-ERROR: Read error at "(stdin)":line 28045: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-17
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Per
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Bothner
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Generalized
"(stdin)":28047:,Generalized

Stack Trace:
_______________________________________
gosh> set!
gosh> ,July
gosh> 2000.0
gosh> http://srfi.schemers.org/srfi-17/srfi-17.html
gosh> *** READ-ERROR: Read error at "(stdin)":line 28049: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-18
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Marc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Feeley
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Multithreading
"(stdin)":28051:,Multithreading

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Support
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,April
"(stdin)":28051:,April

Stack Trace:
_______________________________________
gosh> 2000.0
gosh> http://srfi.schemers.org/srfi-18/srfi-18.html
gosh> *** READ-ERROR: Read error at "(stdin)":line 28053: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-19
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Will
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Fitzgerald
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Time
"(stdin)":28055:,Time

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Data
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Types
Stack Trace:
_______________________________________
gosh> #<syntax and>
gosh> *** ERROR: unbound variable: Procedures
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,August
"(stdin)":28055:,August

Stack Trace:
_______________________________________
gosh> 2000.0
gosh> http://srfi.schemers.org/srfi-19/srfi-19.html
gosh> *** READ-ERROR: Read error at "(stdin)":line 28057: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-21
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Marc
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Feeley
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Readl-time
"(stdin)":28059:,Readl-time

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Multithreading
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Support
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,April
"(stdin)":28059:,April

Stack Trace:
_______________________________________
gosh> 2000.0
gosh> http://srfi.schemers.org/srfi-21/srfi-21.html
gosh> *** READ-ERROR: Read error at "(stdin)":line 28061: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-22
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Martin
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Gasbichler
Stack Trace:
_______________________________________
gosh> #<syntax and>
gosh> *** ERROR: unbound variable: Michael
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Sperber
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Running
"(stdin)":28063:,Running

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Scheme
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Scripts
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: on
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Unix
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,January
"(stdin)":28064:,January

Stack Trace:
_______________________________________
gosh> 2002.0
gosh> http://srfi.schemers.org/srfi-22/srfi-22.html
gosh> *** READ-ERROR: Read error at "(stdin)":line 28066: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-23
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Stephan
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Housen
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Error
"(stdin)":28068:,Error

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: reporting
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: mechanism
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,April
"(stdin)":28068:,April

Stack Trace:
_______________________________________
gosh> 2001.0
gosh> http://srfi.schemers.org/srfi-23/srfi-23.html
gosh> *** READ-ERROR: Read error at "(stdin)":line 28070: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-25
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Jussi
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Piitulainen
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Multi-dimensional
"(stdin)":28072:,Multi-dimensional

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Array
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Primitives
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,June
"(stdin)":28072:,June

Stack Trace:
_______________________________________
gosh> 2002.0
gosh> http://srfi.schemers.org/srfi-25/srfi-25.html
gosh> *** READ-ERROR: Read error at "(stdin)":line 28074: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-26
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Sebastian
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Egner
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Notation
"(stdin)":28076:,Notation

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: for
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Specializing
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Parameters
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: without
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Currying
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,June
"(stdin)":28077:,June

Stack Trace:
_______________________________________
gosh> 2002.0
gosh> http://srfi.schemers.org/srfi-26/srfi-26.html
gosh> *** READ-ERROR: Read error at "(stdin)":line 28079: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-27
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Sebastian
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Egner
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Sources
"(stdin)":28081:,Sources

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Random
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Bits
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,June
"(stdin)":28081:,June

Stack Trace:
_______________________________________
gosh> 2002.0
gosh> http://srfi.schemers.org/srfi-27/srfi-27.html
gosh> *** READ-ERROR: Read error at "(stdin)":line 28083: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-28
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Scott
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: G.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Miller
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Basic
"(stdin)":28085:,Basic

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Format
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Strings
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,June
"(stdin)":28085:,June

Stack Trace:
_______________________________________
gosh> 2002.0
gosh> http://srfi.schemers.org/srfi-28/srfi-28.html
gosh> *** READ-ERROR: Read error at "(stdin)":line 28087: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SRFI-37
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Anthony
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Carrico
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Args-fold:
"(stdin)":28089:,Args-fold:

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: a
Stack Trace:
_______________________________________
gosh> #<macro program>
gosh> *** ERROR: unbound variable: argument
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: processor
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Jan.
"(stdin)":28089:,Jan.

Stack Trace:
_______________________________________
gosh> 2003.0
gosh> http://srfi.schemers.org/srfi-37/srfi-37.html
gosh> *** READ-ERROR: Read error at "(stdin)":line 28092: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SSAX
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Oleg
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Kiselyov
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,XML
"(stdin)":28094:,XML

Stack Trace:
_______________________________________
gosh> #<syntax and>
gosh> *** ERROR: unbound variable: Scheme
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,`http://pobox.com/~oleg/ftp/Scheme/xml.html
"(stdin)":28095:,`http://pobox.com/~oleg/ftp/Scheme/ ...

Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 28096: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: The
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SSAX
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: distribution
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: is
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: also
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: available
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: at
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: sourceforge:
Stack Trace:
_______________________________________
gosh> http://ssax.sourceforge.net/
gosh> *** READ-ERROR: Read error at "(stdin)":line 28098: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: MT
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: M.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Matsumoto
Stack Trace:
_______________________________________
gosh> #<syntax and>
gosh> *** ERROR: unbound variable: T.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Nishimura
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,"Mersenne Twister: A\n     623-dimensionally equidistributed uniform pseudorandom number\n     generator"
"(stdin)":28100:,"Mersenne Twister: A\n     623-dime ...

Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,ACM
"(stdin)":28102:,ACM

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Trans.
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: on
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Modeling
Stack Trace:
_______________________________________
gosh> #<syntax and>
gosh> *** ERROR: unbound variable: Computer
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Simulation
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Vol.
Stack Trace:
_______________________________________
gosh> 8
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,No.
"(stdin)":28103:,No.

Stack Trace:
_______________________________________
gosh> 1
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Januray
"(stdin)":28103:,Januray

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: pp.3-30
Stack Trace:
_______________________________________
gosh> 1998.0
gosh> http://www.math.keio.ac.jp/~matumoto/emt.html
gosh> (OLEG1)
gosh> *** ERROR: unbound variable: Oleg
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Kiselyov
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,Making
"(stdin)":28107:,Making

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: sense
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: of
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: an
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: input
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: stream
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,`http://pobox.com/~oleg/ftp/Scheme/parsing.html
"(stdin)":28108:,`http://pobox.com/~oleg/ftp/Scheme/ ...

Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 28109: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: OLEG2
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Oleg
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Kiselyov
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,General
"(stdin)":28111:,General

Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ways
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: to
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: traverse
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: collections
Stack Trace:
_______________________________________
gosh> *** ERROR: Compile Error: unquote appeared outside quasiquote: ,,`http://pobox.com/~oleg/ftp/Scheme/enumerators-callcc.html
"(stdin)":28111:,,`http://pobox.com/~oleg/ftp/Scheme ...

Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 28112: dot in wrong context
Stack Trace:
_______________________________________
gosh> 2000.0
gosh> *** ERROR: unbound variable: Appendix
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: B
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: CとSchemeの関数の対応
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 28217: dot in wrong context
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Gauche
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> slot-ref
gosh> がこれに近いものです。*Note
gosh> *** ERROR: unbound variable: インスタンスへのアクセス::参照。
Stack Trace:
_______________________________________
gosh> ~
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> lognot
gosh> 。*Note
gosh> *** ERROR: unbound variable: ビット演算::参照。
Stack Trace:
_______________________________________
gosh> ~=
gosh> 同等の手続きはありません。
gosh> !
gosh> R5RS
gosh> *** ERROR: unbound variable: の手続き
Stack Trace:
_______________________________________
gosh> not
gosh> 。*Note
gosh> *** ERROR: unbound variable: 論理値::参照。
Stack Trace:
_______________________________________
gosh> !=
gosh> 同等の手続きはありません。
gosh> abort
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-abort
gosh> 。*Note
gosh> *** ERROR: unbound variable: プログラムの終了::参照。
Stack Trace:
_______________________________________
gosh> abs
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> abs
gosh> 。*Note
gosh> *** ERROR: unbound variable: 数値の演算::参照。
Stack Trace:
_______________________________________
gosh> access
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-access
gosh> 。*Note
gosh> *** ERROR: unbound variable: ファイルの状態::参照。
Stack Trace:
_______________________________________
gosh> acos
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> acos
gosh> 。*Note
gosh> *** ERROR: unbound variable: 数値の演算::参照。
Stack Trace:
_______________________________________
gosh> alarm
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-alarm
gosh> 。*Note
gosh> *** ERROR: unbound variable: その他のシステムコール::参照。
Stack Trace:
_______________________________________
gosh> asctime
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-asctime
gosh> 。*Note
gosh> *** ERROR: unbound variable: 時間::参照。
Stack Trace:
_______________________________________
gosh> asin
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> asin
gosh> 。*Note
gosh> *** ERROR: unbound variable: 数値の演算::参照。
Stack Trace:
_______________________________________
gosh> assert
gosh> Gauche
gosh> *** ERROR: unbound variable: には同等の関数はありません。
Stack Trace:
_______________________________________
gosh> atan
gosh> `atan2
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> atan
gosh> 。*Note
gosh> *** ERROR: unbound variable: 数値の演算::参照。
Stack Trace:
_______________________________________
gosh> atexit
gosh> Gauche
gosh> *** ERROR: unbound variable: には同等の関数はありませんが、
Stack Trace:
_______________________________________
gosh> exit
gosh> が呼ばれたとき
gosh> *** ERROR: unbound variable: アクティブな動的ハンドラの「事後」サンクが呼ばれます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: プログラムの終了::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: および
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 継続::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> atof
gosh> `atoi
gosh> `atol
gosh> `string->number
gosh> が使えます。*Note
gosh> *** ERROR: unbound variable: 数値の変換::参照。
Stack Trace:
_______________________________________
gosh> bsearch
gosh> SRFI-43の
gosh> vector-binary-search
gosh> が使えます。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Vector
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: library::参照。
Stack Trace:
_______________________________________
gosh> calloc
gosh> Scheme
gosh> *** ERROR: unbound variable: ではメモリ割当は自動的に処理されます。
Stack Trace:
_______________________________________
gosh> ceil
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> ceiling
gosh> 。*Note
gosh> *** ERROR: unbound variable: 数値の演算::参照。
Stack Trace:
_______________________________________
gosh> cfgetispeed
gosh> `cfgetospeed
gosh> `cfsetispeed
gosh> `cfsetospeed
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-cfgetispeed
gosh> 、
gosh> sys-cfgetospeed
gosh> 、
gosh> sys-cfsetispeed
gosh> 、
gosh> sys-cfsetospeed
gosh> 。*Note
gosh> *** ERROR: unbound variable: Termios::参照。
Stack Trace:
_______________________________________
gosh> chdir
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-chdir
gosh> 。*Note
gosh> *** ERROR: unbound variable: 他のファイル操作::参照。
Stack Trace:
_______________________________________
gosh> chmod
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-chmod
gosh> 。*Note
gosh> *** ERROR: unbound variable: ファイルの状態::参照。
Stack Trace:
_______________________________________
gosh> chown
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-chown
gosh> 。*Note
gosh> *** ERROR: unbound variable: ファイルの状態::参照。
Stack Trace:
_______________________________________
gosh> clearerr
gosh> 未サポート。
gosh> clock
gosh> Gauche
gosh> *** ERROR: unbound variable: には同等の関数はありません。
Stack Trace:
_______________________________________
gosh> sys-times
gosh> を使って、
gosh> *** ERROR: unbound variable: CPUタイムに情報を得ることができます。
Stack Trace:
_______________________________________
gosh> close
gosh> ファイルディスクリプタを直接クローズすることはできませんが、
gosh> close-input-port
gosh> あるいは
gosh> close-output-port
gosh> を使うと、
gosh> *** ERROR: unbound variable: 元になるファイルはクローズされます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: いくつかのポートに関連する関数、たとえば、
Stack Trace:
_______________________________________
gosh> call-with-output-file
gosh> などは、操作終了時に自動的にファイルをクローズします。
gosh> *** ERROR: unbound variable: また、それを支配しているポートがGCされたときにクローズされます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ポート共通の操作::参照。
Stack Trace:
_______________________________________
gosh> closedir
gosh> Gauche
gosh> *** ERROR: unbound variable: には同等の関数はありません。
Stack Trace:
_______________________________________
gosh> sys-readdir
gosh> を使うと
gosh> *** ERROR: unbound variable: ディレクトリの内容を一度に読むことができます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ディレクトリ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> cos
gosh> `cosh
gosh> `cos
gosh> および
gosh> cosh
gosh> 。*Note
gosh> *** ERROR: unbound variable: 数値の演算::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> creat
gosh> デフォルトでは、書き込みのためにファイルをオープンしたときに、暗黙のうちに
gosh> *** ERROR: unbound variable: ファイルが作成されます。ファイル作成のより詳しい制御については
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ファイルポート::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を参照してください。
Stack Trace:
_______________________________________
gosh> ctermid
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-ctermid
gosh> 。*Note
gosh> *** ERROR: unbound variable: システムへの問い合わせ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> ctime
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-ctime
gosh> 。*Note
gosh> *** ERROR: unbound variable: 時間::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> cuserid
gosh> 同等の関数はありません。これは新しい
gosh> *** ERROR: unbound variable: POSIX
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: からは削除されています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 別法として、
Stack Trace:
_______________________________________
gosh> sys-getuid
gosh> といっしょに、
gosh> sys-getlogin
gosh> あるいは
gosh> sys-getpwuid
gosh> などの関数が使えます。
gosh> difftime
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-difftime
gosh> 。*Note
gosh> *** ERROR: unbound variable: 時間::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> div
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> quotient
gosh> および
gosh> remainder
gosh> を使えます。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 数値の演算::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> dup
gosh> `dup2
gosh> 直接はサポートされていませんが、
gosh> port-fd-dup!
gosh> が使えます。
gosh> execl
gosh> `execle
gosh> `execlp
gosh> `execv
gosh> `execve
gosh> `execvp
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-exec
gosh> 。*Note
gosh> *** ERROR: unbound variable: Unixのプロセス管理::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: より高水準のインタフェースについては
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 高レベルプロセスインタフェース::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> exit
gosh> `_exit
gosh> 必要なことに応じて、
gosh> exit
gosh> あるいは
gosh> sys-exit
gosh> を使いましょう。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: プログラムの終了::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> exp
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> exp
gosh> 。*Note
gosh> *** ERROR: unbound variable: 数値の演算::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> fabs
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> abs
gosh> 。*Note
gosh> *** ERROR: unbound variable: 数値の演算::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> fclose
gosh> ファイルストリームを直接クローズすることはできませんが、
gosh> close-input-port
gosh> あるいは
gosh> close-output-port
gosh> を使うと、
gosh> *** ERROR: unbound variable: 元になるファイルはクローズされます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: いくつかのポートに関連する関数、たとえば、
Stack Trace:
_______________________________________
gosh> call-with-output-file
gosh> などは、操作終了時に自動的にファイルをクローズします。
gosh> *** ERROR: unbound variable: また、それを支配しているポートがGCされたときにクローズされます。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ポート共通の操作::参照。
Stack Trace:
_______________________________________
gosh> fcntl
gosh> `gauche.fcntl
gosh> モジュールで、
gosh> sys-fcntl
gosh> として実装されています。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 低レベルファイル操作::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> fdopen
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> open-input-fd-port
gosh> あるいは
gosh> open-output-fd-port
gosh> 。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ファイルポート::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> feof
gosh> 未サポート。
gosh> ferror
gosh> 未サポート。
gosh> fflush
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> flush
gosh> 。*Note
gosh> *** ERROR: unbound variable: 出力::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> fgetc
gosh> `read-char
gosh> あるいは
gosh> read-byte
gosh> を使いましょう。*Note
gosh> *** ERROR: unbound variable: 入力::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> fgetpos
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> port-tell
gosh> を使いましょう。
gosh> *** ERROR: unbound variable: ポート共通の操作::参照。
Stack Trace:
_______________________________________
gosh> fgets
gosh> `read-line
gosh> あるいは
gosh> read-block
gosh> を使いましょう。*Note
gosh> *** ERROR: unbound variable: 入力::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> fileno
gosh> `port-file-numer
gosh> 。*Note
gosh> *** ERROR: unbound variable: ポート共通の操作::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> floor
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> floor
gosh> 。*Note
gosh> *** ERROR: unbound variable: 数値の演算::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> fmod
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> fmod
gosh> 。
gosh> fopen
gosh> この操作に対応するのは、R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> open-input-file
gosh> あるいは
gosh> open-output-file
gosh> です。*Note
gosh> *** ERROR: unbound variable: ファイルポート::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> fork
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-fork
gosh> 。*Note
gosh> *** ERROR: unbound variable: Unixのプロセス管理::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> forkpty
gosh> `sys-forkpty
gosh> を使いましょう。*Note
gosh> *** ERROR: unbound variable: Termios::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> fpathconf
gosh> 未サポート。
gosh> fprintf
gosh> 直接はサポートされていませんが、Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> format
gosh> は
gosh> *** ERROR: unbound variable: 似たような機能を提供しています。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 出力::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: SLIB
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: は
Stack Trace:
_______________________________________
gosh> printf
gosh> の実装を持っています。
gosh> fputc
gosh> `write-char
gosh> あるいは
gosh> write-byte
gosh> を使いましょう。*Note
gosh> *** ERROR: unbound variable: 出力::参照。
Stack Trace:
_______________________________________
gosh> fputs
gosh> `display
gosh> を使いましょう。*Note
gosh> *** ERROR: unbound variable: 出力::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> fread
gosh> 直接はサポートされていません。
gosh> *** ERROR: unbound variable: バイナリの数値を読む場合は*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: バイナリI/O::を参照のこと。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: バイトのチャンクで読みたければ、
Stack Trace:
_______________________________________
gosh> read-block!
gosh> が使えるでしょう
gosh> *** ERROR: unbound variable: ユニフォームベクタのブロック入出力::参照
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> free
gosh> Scheme
gosh> *** ERROR: unbound variable: では必要がありません。
Stack Trace:
_______________________________________
gosh> freopen
gosh> 未サポート。
gosh> frexp
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> frexp
gosh> 。
gosh> fscanf
gosh> サポートしていません。一般的にはパーザを書かねばなりません。
gosh> *** ERROR: unbound variable: データを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: S式で保持しているなら、
Stack Trace:
_______________________________________
gosh> read
gosh> が使えます。
gosh> *** ERROR: unbound variable: 構文がごく単純なら、
Stack Trace:
_______________________________________
gosh> srfi-14
gosh> (*Note 文字列ライブラリ::)
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> string-tokenize
gosh> や、正規表現
gosh> *** ERROR: unbound variable: 正規表現::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が使えるでしょう。
Stack Trace:
_______________________________________
gosh> fseek
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> port-seek
gosh> (*Note ポート共通の操作::参照)
gosh> *** ERROR: unbound variable: を使いましょう。
Stack Trace:
_______________________________________
gosh> fsetpos
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> port-seek
gosh> (*Note ポート共通の操作::参照)
gosh> *** ERROR: unbound variable: を使いましょう。
Stack Trace:
_______________________________________
gosh> fstat
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-stat
gosh> 。*Note
gosh> *** ERROR: unbound variable: ファイルの状態::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> ftell
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> port-tell
gosh> (*Note ポート共通の操作::参照)
gosh> *** ERROR: unbound variable: を使いましょう。
Stack Trace:
_______________________________________
gosh> fwrite
gosh> 直接はサポートされていません。
gosh> *** ERROR: unbound variable: バイナリの数値を書き出すのなら、*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: バイナリI/O::参照のこと。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: バイト列のチャンクを書き出しすなら、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 単に
Stack Trace:
_______________________________________
gosh> display
gosh> を使うか、
gosh> write-block
gosh> が使えます
gosh> *** ERROR: unbound variable: ユニフォームベクタのブロック入出力::参照
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> getc
gosh> `getchar
gosh> `read-char
gosh> あるいは
gosh> read-byte
gosh> を使いましょう。*Note
gosh> *** ERROR: unbound variable: 入力::参照。
Stack Trace:
_______________________________________
gosh> getcwd
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-getcwd
gosh> 。*Note
gosh> *** ERROR: unbound variable: システムへの問い合わせ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> getdomainname
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-getdomainname
gosh> 。*Note
gosh> *** ERROR: unbound variable: システムへの問い合わせ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> getegid
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-getegid
gosh> 。*Note
gosh> *** ERROR: unbound variable: システムへの問い合わせ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> getenv
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-getenv
gosh> 。*Note
gosh> *** ERROR: unbound variable: 環境の問い合わせ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> geteuid
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-geteuid
gosh> 。*Note
gosh> *** ERROR: unbound variable: システムへの問い合わせ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> gethostname
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-gethostname
gosh> 。*Note
gosh> *** ERROR: unbound variable: システムへの問い合わせ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> getgid
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-getgid
gosh> 。*Note
gosh> *** ERROR: unbound variable: システムへの問い合わせ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> getgrgid
gosh> `getgrnam
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-getgrgid
gosh> および
gosh> sys-getgrnam
gosh> 。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Unixのグループとユーザ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> getgroups
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-getgroups
gosh> 。*Note
gosh> *** ERROR: unbound variable: システムへの問い合わせ::参照。
Stack Trace:
_______________________________________
gosh> getlogin
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-getlogin
gosh> 。*Note
gosh> *** ERROR: unbound variable: システムへの問い合わせ::参照。
Stack Trace:
_______________________________________
gosh> getpgrp
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-getpgrp
gosh> 。*Note
gosh> *** ERROR: unbound variable: システムへの問い合わせ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> getpid
gosh> `getppid
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-getpid
gosh> 。*Note
gosh> *** ERROR: unbound variable: システムへの問い合わせ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> getpwnam
gosh> `getpwuid
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-getpwnam
gosh> および
gosh> sys-getpwuid
gosh> 。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Unixのグループとユーザ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> gets
gosh> `read-line
gosh> または
gosh> read-block
gosh> を使いましょう。*Note
gosh> *** ERROR: unbound variable: 入力::参照。
Stack Trace:
_______________________________________
gosh> gettimeofday
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-gettimeofday
gosh> 。*Note
gosh> *** ERROR: unbound variable: 時間::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> getuid
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-getuid
gosh> 。*Note
gosh> *** ERROR: unbound variable: システムへの問い合わせ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> gmtime
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-gmtime
gosh> 。*Note
gosh> *** ERROR: unbound variable: 時間::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> isalnum
gosh> 直接はサポートされていませんが、R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> char-alphabetic?
gosh> および
gosh> char-numeric?
gosh> が使えます。*Note
gosh> *** ERROR: unbound variable: 文字::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。また、文字集合も
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 使えます。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字集合::、*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字集合ライブラリ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> isalpha
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> char-alphabetic?
gosh> 。*Note
gosh> *** ERROR: unbound variable: 文字::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。また、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字集合::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: および
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字集合ライブラリ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: も参照してください。
Stack Trace:
_______________________________________
gosh> isatty
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-isatty
gosh> 。*Note
gosh> *** ERROR: unbound variable: 他のファイル操作::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> iscntrl
gosh> 直接はサポートされていませんが、
gosh> srfi-14
gosh> で
gosh> (char-set-contains? char-set:iso-control c)
gosh> が使えます。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字集合ライブラリ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> isdigit
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> char-numeric?
gosh> 。*Note
gosh> *** ERROR: unbound variable: 文字::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> srfi-14
gosh> で、
gosh> (char-set-contains? char-set:digit c)
gosh> も
gosh> *** ERROR: unbound variable: 使えます。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字集合ライブラリ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> isgraph
gosh> 直接はサポートされていませんが、
gosh> srfi-14
gosh> で
gosh> (char-set-contains? char-set:graphic c)
gosh> が使えます。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字集合ライブラリ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> islower
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> char-lower-case?
gosh> 。*Note
gosh> *** ERROR: unbound variable: 文字::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> srfi-14
gosh> で
gosh> (char-set-contains? char-set:lower-case c)
gosh> も使えます。*Note
gosh> *** ERROR: unbound variable: 文字集合ライブラリ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> isprint
gosh> 直接はサポートされていませんが、
gosh> srfi-14
gosh> で
gosh> (char-set-contains? char-set:printing c)
gosh> が使えます。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字集合ライブラリ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> ispunct
gosh> 直接はサポートされていませんが、
gosh> srfi-14
gosh> で
gosh> (char-set-contains? char-set:punctuation c)
gosh> が使えます。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字集合ライブラリ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> isspace
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> char-whitespace?
gosh> 。*Note
gosh> *** ERROR: unbound variable: 文字::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> srfi-14
gosh> で
gosh> (char-set-contains? char-set:whitespace c)
gosh> も使えます。*Note
gosh> *** ERROR: unbound variable: 文字集合ライブラリ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> isupper
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> char-upper-case?
gosh> 。*Note
gosh> *** ERROR: unbound variable: 文字::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> srfi-14
gosh> で
gosh> (char-set-contains? char-set:upper-case c)
gosh> も使えます。*Note
gosh> *** ERROR: unbound variable: 文字集合ライブラリ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> isxdigit
gosh> 直接はサポートされていませんが、
gosh> srfi-14
gosh> で
gosh> (char-set-contains? char-set:hex-digit c)
gosh> が使えます。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字集合ライブラリ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> kill
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-kill
gosh> 。*Note
gosh> *** ERROR: unbound variable: シグナル::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> labs
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> abs
gosh> 。*Note
gosh> *** ERROR: unbound variable: 数値の演算::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> ldexp
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> ldexp
gosh> 。
gosh> ldiv
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> quotient
gosh> および
gosh> remainder
gosh> を使いましょう。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 数値の演算::参照。
Stack Trace:
_______________________________________
gosh> link
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-link
gosh> 。*Note
gosh> *** ERROR: unbound variable: ディレクトリ操作::参照。
Stack Trace:
_______________________________________
gosh> localeconv
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-localeconv
gosh> 。*Note
gosh> *** ERROR: unbound variable: ロケール::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> localtime
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-localtime
gosh> 。*Note
gosh> *** ERROR: unbound variable: 時間::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> log
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> log
gosh> 。*Note
gosh> *** ERROR: unbound variable: 数値の演算::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> log10
gosh> 直接はサポートされていません。
gosh> log10
gosh> *** ERROR: unbound variable: z
Stack Trace:
_______________________________________
gosh> ==
gosh> (/ (log z) (log 10))
gosh> です。
gosh> longjmp
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> call/cc
gosh> が類似
gosh> *** ERROR: unbound variable: 上位
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のメカニズムを提供しています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 継続::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> lseek
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> port-seek
gosh> (*Note ポート共通の操作::参照)
gosh> *** ERROR: unbound variable: を使いましょう。
Stack Trace:
_______________________________________
gosh> malloc
gosh> Scheme
gosh> *** ERROR: unbound variable: では必要ありません。
Stack Trace:
_______________________________________
gosh> mblen
gosh> `mbstowcs
gosh> `mbtowc
gosh> Gauche
gosh> *** ERROR: unbound variable: ではマルチバイト文字列を内部的に処理しますので、一般的には
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列がマルチバイトであるかどうかを気にする必要はありません。
Stack Trace:
_______________________________________
gosh> string-length
gosh> は常に、サポートされているエンコーディングの
gosh> *** ERROR: unbound variable: 文字列に対して、文字数を返します。文字のエンコーディング変換を
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: したいのであれば、*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字コード変換::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を参照してください。
Stack Trace:
_______________________________________
gosh> memcmp
gosh> `memcpy
gosh> `memmove
gosh> `memset
gosh> 同等の関数はありません。
gosh> mkdir
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-mkdir
gosh> 。*Note
gosh> *** ERROR: unbound variable: ディレクトリ操作::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> mkfifo
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-mkfifo
gosh> 。
gosh> mkstemp
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-mkstemp
gosh> 。*Note
gosh> *** ERROR: unbound variable: ディレクトリ操作::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: tmpnam
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の代りにこちらを使いましょう。
Stack Trace:
_______________________________________
gosh> mktime
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-mktime
gosh> 。*Note
gosh> *** ERROR: unbound variable: 時間::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> modf
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> modf
gosh> 。
gosh> open
gosh> 直接はサポートされていません。この操作に対応するのな
gosh> *** ERROR: unbound variable: R5RS
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> open-input-file
gosh> または
gosh> open-output-file
gosh> です。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ファイルポート::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> opendir
gosh> 直接はサポートされていません。
gosh> *** ERROR: unbound variable: ディレクトリのエントリをいちどに読むには
Stack Trace:
_______________________________________
gosh> sys-readdir
gosh> が使えます。*Note
gosh> *** ERROR: unbound variable: ディレクトリ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> openpty
gosh> `sys-openpty
gosh> を使いましょう。*Note
gosh> *** ERROR: unbound variable: Termios::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> pathconf
gosh> サポートしません。
gosh> pause
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-pause
gosh> 。*Note
gosh> *** ERROR: unbound variable: その他のシステムコール::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> perror
gosh> Gauche
gosh> *** ERROR: unbound variable: には同等の関数はありません。システムコールは一般的には
Stack Trace:
_______________________________________
gosh> #<closure error>
gosh> *** READ-ERROR: Read error at "(stdin)":line 28693: extra close parenthesis
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を投げます。これには、失敗した理由の説明が含まれて
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: います。
Stack Trace:
_______________________________________
gosh> pipe
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-pipe
gosh> 。*Note
gosh> *** ERROR: unbound variable: 他のファイル操作::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> pow
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> expt
gosh> 。*Note
gosh> *** ERROR: unbound variable: 数値の演算::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> printf
gosh> 直接はサポートされていませんが、Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> format
gosh> は類似の機能を
gosh> *** ERROR: unbound variable: 提供しています。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 出力::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。SLIB
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: には
Stack Trace:
_______________________________________
gosh> printf
gosh> の実装があります。
gosh> putc
gosh> `putchar
gosh> `write-char
gosh> または
gosh> write-byte
gosh> を使いましょう。*Note
gosh> *** ERROR: unbound variable: 出力::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> puts
gosh> `display
gosh> を使いましょう。*Note
gosh> *** ERROR: unbound variable: 出力::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> qsort
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sort
gosh> および
gosh> sort!
gosh> はリストをソートする便利な方法を
gosh> *** ERROR: unbound variable: 提供しています。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 比較とソート::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> raise
gosh> Gauche
gosh> *** ERROR: unbound variable: には同等の関数はありません。Scheme
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の関数
Stack Trace:
_______________________________________
gosh> raise
gosh> (SRFI-18)
gosh> *** ERROR: unbound variable: は例外を発生させます。シグナル
Stack Trace:
_______________________________________
gosh> SIG
gosh> を現在のプロセスに送るには
gosh> (sys-kill (sys-getpid) SIG)
gosh> が使えます。
gosh> rand
gosh> 直接はサポートされていませんが、多くのプラットフォーム上で、
gosh> sys-random
gosh> のような、よりよい
gosh> *** ERROR: unbound variable: RNG
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が利用可能です。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: その他のシステムコール::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> read
gosh> 直接はサポートされていませんが、
gosh> read-block
gosh> (*Note 入力::参照)
gosh> *** ERROR: unbound variable: あるいは
Stack Trace:
_______________________________________
gosh> read-block!
gosh> (*Note ユニフォームベクタのブロック入出力::参照)
gosh> *** ERROR: unbound variable: が使えます。
Stack Trace:
_______________________________________
gosh> readdir
gosh> 直接はサポートされていません。Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-readdir
gosh> は
gosh> *** ERROR: unbound variable: 指定のディレクトリを一度に読みます。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ディレクトリ::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> readlink
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-readlink
gosh> 。*Note
gosh> *** ERROR: unbound variable: ディレクトリ操作::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: この関数はシンボリックリンクをサポートしているシステム上で利用可能です。
Stack Trace:
_______________________________________
gosh> realloc
gosh> Scheme
gosh> *** ERROR: unbound variable: では必要ありません。
Stack Trace:
_______________________________________
gosh> realpath
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-normalize-pathname
gosh> あるいは
gosh> sys-realpath
gosh> 。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: パス名::参照。
Stack Trace:
_______________________________________
gosh> remove
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-remove
gosh> 。*Note
gosh> *** ERROR: unbound variable: ディレクトリ操作::参照。
Stack Trace:
_______________________________________
gosh> rename
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-rename
gosh> 。*Note
gosh> *** ERROR: unbound variable: ディレクトリ操作::参照。
Stack Trace:
_______________________________________
gosh> rewind
gosh> 直接はサポートされませんが、
gosh> port-seek
gosh> が代わりに使えます。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ポート共通の操作::参照。
Stack Trace:
_______________________________________
gosh> rewinddir
gosh> 直接はサポートされていません。
gosh> *** ERROR: unbound variable: ディレクトリエントリを一度に読むには
Stack Trace:
_______________________________________
gosh> sys-readdir
gosh> が使えます。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ディレクトリ::参照。
Stack Trace:
_______________________________________
gosh> rmdir
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-rmdir
gosh> 。*Note
gosh> *** ERROR: unbound variable: ディレクトリ操作::参照。
Stack Trace:
_______________________________________
gosh> scanf
gosh> サポートしていません。一般的にはパーザを書かねばなりません。
gosh> *** ERROR: unbound variable: データを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: S式で保持できるなら、
Stack Trace:
_______________________________________
gosh> read
gosh> が使えます。
gosh> *** ERROR: unbound variable: 構文がごく単純なら、
Stack Trace:
_______________________________________
gosh> srfi-14
gosh> (*Note 文字列ライブラリ::)
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> string-tokenize
gosh> や、正規表現
gosh> *** ERROR: unbound variable: 正規表現::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が使えるでしょう。
Stack Trace:
_______________________________________
gosh> select
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-select
gosh> 。*Note
gosh> *** ERROR: unbound variable: I/Oの多重化::参照。
Stack Trace:
_______________________________________
gosh> setbuf
gosh> 必要ありません。
gosh> setgid
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-getgid
gosh> 。
gosh> setjmp
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> call/cc
gosh> が類似
gosh> *** ERROR: unbound variable: 上位
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のメカニズムを提供しています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 継続::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> setlocale
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-setlocale
gosh> 。*Note
gosh> *** ERROR: unbound variable: ロケール::参照。
Stack Trace:
_______________________________________
gosh> setpgid
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-setpgid
gosh> 。*Note
gosh> *** ERROR: unbound variable: システムへの問い合わせ::参照。
Stack Trace:
_______________________________________
gosh> setsid
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-setsid
gosh> 。*Note
gosh> *** ERROR: unbound variable: システムへの問い合わせ::参照。
Stack Trace:
_______________________________________
gosh> setuid
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-setuid
gosh> 。*Note
gosh> *** ERROR: unbound variable: システムへの問い合わせ::参照。
Stack Trace:
_______________________________________
gosh> setvbuf
gosh> 必要ありません。
gosh> sigaction
gosh> シグナルハンドラを設定するには、
gosh> set-signal-handler!
gosh> が使えます。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: シグナルの処理::参照。
Stack Trace:
_______________________________________
gosh> sigaddset
gosh> `sigdelset
gosh> `sigemptyset
gosh> `sigfillset
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-sigset-add!
gosh> および
gosh> sys-sigset-delete!
gosh> 。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: シグナルとシグナルセット::参照。
Stack Trace:
_______________________________________
gosh> sigismember
gosh> 未サポート。
gosh> siglongjmp
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> call/cc
gosh> が類似
gosh> *** ERROR: unbound variable: 上位
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のメカニズムを提供しています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 継続::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> signal
gosh> シグナルハンドラを設定するのには、
gosh> with-signal-handlers
gosh> が使えます。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: シグナルの処理::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> sigpending
gosh> 未サポート
gosh> sigprocmask
gosh> シグナルマスクは内部的に処理されます。*Note
gosh> *** ERROR: unbound variable: シグナルの処理::参照。
Stack Trace:
_______________________________________
gosh> sigsetjmp
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> call/cc
gosh> が類似
gosh> *** ERROR: unbound variable: 上位
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: のメカニズムを提供しています。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 継続::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> sigsuspend
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-sigsuspend
gosh> 。*Note
gosh> *** ERROR: unbound variable: シグナルのマスクと待機::参照。
Stack Trace:
_______________________________________
gosh> sigwait
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-sigwait
gosh> 。*Note
gosh> *** ERROR: unbound variable: シグナルのマスクと待機::参照。
Stack Trace:
_______________________________________
gosh> sin
gosh> `sinh
gosh> `sin
gosh> および
gosh> sinh
gosh> を使いましょう。*Note
gosh> *** ERROR: unbound variable: 数値の演算::参照。
Stack Trace:
_______________________________________
gosh> sleep
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-sleep
gosh> 。*Note
gosh> *** ERROR: unbound variable: その他のシステムコール::参照。
Stack Trace:
_______________________________________
gosh> sprintf
gosh> 直接はサポートされていませんが、Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> format
gosh> は類似の機能を
gosh> *** ERROR: unbound variable: 提供しています。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 出力::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。SLIB
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: には
Stack Trace:
_______________________________________
gosh> printf
gosh> の実装があります。
gosh> sqrt
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sqrt
gosh> 。*Note
gosh> *** ERROR: unbound variable: 数値の演算::参照。
Stack Trace:
_______________________________________
gosh> srand
gosh> 直接はサポートされていませんが、多くのプラットフォーム上で、
gosh> sys-random
gosh> のような、よりよい
gosh> *** ERROR: unbound variable: RNG
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が利用可能です。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: その他のシステムコール::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: また、
Stack Trace:
_______________________________________
gosh> math.mt-random
gosh> はさらに優れたRNGを提供します
gosh> *** ERROR: unbound variable: Mersenne
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> sscanf
gosh> サポートしていません。一般的にはパーザを書かねばなりません。
gosh> *** ERROR: unbound variable: データを
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: S式で保持できるなら、
Stack Trace:
_______________________________________
gosh> read
gosh> が使えます。
gosh> *** ERROR: unbound variable: 構文がごく単純なら、
Stack Trace:
_______________________________________
gosh> srfi-14
gosh> (*Note 文字列ライブラリ::)
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> string-tokenize
gosh> や、正規表現
gosh> *** ERROR: unbound variable: 正規表現::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: が使えるでしょう。
Stack Trace:
_______________________________________
gosh> stat
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-stat
gosh> 。*Note
gosh> *** ERROR: unbound variable: ファイルの状態::参照。
Stack Trace:
_______________________________________
gosh> strcasecmp
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> string-ci=?
gosh> および、その他の比較関数。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列の比較::参照。
Stack Trace:
_______________________________________
gosh> strcat
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> string-append
gosh> 。*Note
gosh> *** ERROR: unbound variable: 文字列を扱うその他の手続き::参照。
Stack Trace:
_______________________________________
gosh> strchr
gosh> SRFI-13
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> string-index
gosh> 。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列の探索::参照。
Stack Trace:
_______________________________________
gosh> strcmp
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> string=?
gosh> および、その他の比較関数。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列の比較::参照。
Stack Trace:
_______________________________________
gosh> strcoll
gosh> 未サポート。
gosh> strcpy
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> string-copy
gosh> 。*Note
gosh> *** ERROR: unbound variable: 文字列を扱うその他の手続き::参照。
Stack Trace:
_______________________________________
gosh> strcspn
gosh> 直接はサポートされていませんが、文字集合とともに、SRFI-13
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> string-skip
gosh> が使えます。*Note
gosh> *** ERROR: unbound variable: 文字列の探索::参照。
Stack Trace:
_______________________________________
gosh> strerror
gosh> Gaucheの
gosh> sys-strerror
gosh> 。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: システムへの問い合わせ::参照。
Stack Trace:
_______________________________________
gosh> strftime
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-strftime
gosh> 。*Note
gosh> *** ERROR: unbound variable: 時間::参照。
Stack Trace:
_______________________________________
gosh> strlen
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> string-length
gosh> 。*Note
gosh> *** ERROR: unbound variable: 文字列のアクセスと変更::参照。
Stack Trace:
_______________________________________
gosh> strncat
gosh> 直接はサポートされていませんが、
gosh> string-append
gosh> および
gosh> substring
gosh> が使えます。
gosh> strncasecmp
gosh> SRFI-13
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> string-compare-ci
gosh> は非常に柔軟な
gosh> *** ERROR: unbound variable: 多少難しい
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 機能を提供しています。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列の色々な比較::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ふたつの文字列の固定長の接頭辞が一致しているかどうかをチェックしたい
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: だけなら、SRFI-13
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> string-prefix-ci?
gosh> が使えます。
gosh> strncmp
gosh> SRFI-13
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> string-compare-ci
gosh> は非常に柔軟な
gosh> *** ERROR: unbound variable: 多少難しい
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 機能を提供しています。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列の色々な比較::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: ふたつの文字列の固定長の接頭辞が一致しているかどうかをチェックしたい
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: だけなら、SRFI-13
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> string-prefix-ci?
gosh> が使えます。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列のプリフィックスとサフィックス::参照。
Stack Trace:
_______________________________________
gosh> strncpy
gosh> SRFI-13
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> substring
gosh> 。*Note
gosh> *** ERROR: unbound variable: 文字列を扱うその他の手続き::参照。
Stack Trace:
_______________________________________
gosh> strpbrk
gosh> 直接はサポートされていませんが、文字集合と
gosh> *** ERROR: unbound variable: SRFI-13
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> string-skip
gosh> が使えます。*Note
gosh> *** ERROR: unbound variable: 文字列の探索::参照。
Stack Trace:
_______________________________________
gosh> strrchr
gosh> SRFI-13
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> string-index-right
gosh> 。*Note
gosh> *** ERROR: unbound variable: 文字列の探索::参照。
Stack Trace:
_______________________________________
gosh> strspn
gosh> 直接はサポートされていませんが、文字集合と
gosh> *** ERROR: unbound variable: SRFI-13
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> string-index
gosh> が使えます。*Note
gosh> *** ERROR: unbound variable: 文字列の探索::参照。
Stack Trace:
_______________________________________
gosh> strstr
gosh> SRFI-13
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> string-contains
gosh> 。*Note
gosh> *** ERROR: unbound variable: 文字列の探索::参照。
Stack Trace:
_______________________________________
gosh> strtod
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> string->number
gosh> が使えます。*Note
gosh> *** ERROR: unbound variable: 数値の変換::参照。
Stack Trace:
_______________________________________
gosh> strtok
gosh> SRFI-13
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> string-tokenize
gosh> 。*Note
gosh> *** ERROR: unbound variable: 他の文字列操作::参照。
Stack Trace:
_______________________________________
gosh> strtol
gosh> `strtoul
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> string->number
gosh> が使えます。*Note
gosh> *** ERROR: unbound variable: 数値の変換::参照。
Stack Trace:
_______________________________________
gosh> strxfrm
gosh> 未サポート。
gosh> symlink
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-symlink
gosh> 。*Note
gosh> *** ERROR: unbound variable: ディレクトリ操作::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: この関数は、シンボリックリンクをサポートしているシステム上で利用可能です。
Stack Trace:
_______________________________________
gosh> sysconf
gosh> 未サポート。
gosh> system
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-system
gosh> 。*Note
gosh> *** ERROR: unbound variable: Unixのプロセス管理::参照。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 一般的にはプロセスライブラリ
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 高レベルプロセスインタフェース::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: を使うことを推奨します。
Stack Trace:
_______________________________________
gosh> tan
gosh> `tanh
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> tan
gosh> および
gosh> *** ERROR: unbound variable: Gauche
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> tanh
gosh> 。*Note
gosh> *** ERROR: unbound variable: 数値の演算::参照。
Stack Trace:
_______________________________________
gosh> tcdrain
gosh> `tcflow
gosh> `tcflush
gosh> `tcgetattr
gosh> `tcgetpgrp
gosh> `tcsendbreak
gosh> `tcsetattr
gosh> `tcsetpgrp
gosh> 対応する関数はそれぞれ、
gosh> sys-tcdrain
gosh> 、
gosh> sys-tcflow
gosh> 、
gosh> sys-tcflush
gosh> 、
gosh> sys-tcgetattr
gosh> 、
gosh> sys-tcgetpgrp
gosh> 、
gosh> sys-tcsendbreak
gosh> 、
gosh> sys-tcsetattr
gosh> 、
gosh> sys-tcsetpgrp
gosh> です。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Termios::参照。
Stack Trace:
_______________________________________
gosh> time
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-time
gosh> 。
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 時間::参照。
Stack Trace:
_______________________________________
gosh> times
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-times
gosh> 。*Note
gosh> *** ERROR: unbound variable: システムへの問い合わせ::参照。
Stack Trace:
_______________________________________
gosh> tmpfile
gosh> 厳密には、サポートしません。
gosh> tmpnam
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-tmpnam
gosh> 。この関数は
gosh> *** ERROR: unbound variable: POSIX
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: にあるので提供されていますが、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 潜在的なセキュリティリスクがあるため、利用はおすすめできません。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 代りに
Stack Trace:
_______________________________________
gosh> sys-mkstemp
gosh> を使いましょう。*Note
gosh> *** ERROR: unbound variable: ディレクトリ操作::参照。
Stack Trace:
_______________________________________
gosh> tolower
gosh> `toupper
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> char-upcase
gosh> および
gosh> char-downcase
gosh> 。*Note
gosh> *** ERROR: unbound variable: 文字::参照。
Stack Trace:
_______________________________________
gosh> ttyname
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-ttyname
gosh> 。*Note
gosh> *** ERROR: unbound variable: 他のファイル操作::参照。
Stack Trace:
_______________________________________
gosh> tzset
gosh> 未サポート。
gosh> umask
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-umask
gosh> 。*Note
gosh> *** ERROR: unbound variable: ディレクトリ操作::参照。
Stack Trace:
_______________________________________
gosh> uname
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-uname
gosh> 。*Note
gosh> *** ERROR: unbound variable: システムへの問い合わせ::参照。
Stack Trace:
_______________________________________
gosh> ungetc
gosh> 直接はサポートされません。プッシュしなおす代りに、
gosh> peek-char
gosh> をつかって
gosh> *** ERROR: unbound variable: 先読みしましょう。
Stack Trace:
_______________________________________
gosh> unlink
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-unlink
gosh> 。*Note
gosh> *** ERROR: unbound variable: ディレクトリ操作::参照。
Stack Trace:
_______________________________________
gosh> utime
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-utime
gosh> 。*Note
gosh> *** ERROR: unbound variable: ファイルの状態::参照。
Stack Trace:
_______________________________________
gosh> va_arg
gosh> `va_end
gosh> `va_start
gosh> Scheme
gosh> *** ERROR: unbound variable: は可変長引数を自然に処理できますので、必要ありません。
Stack Trace:
_______________________________________
gosh> vfprintf
gosh> `vprintf
gosh> `vsprintf
gosh> 直接はサポートされていませんが、Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> format
gosh> は類似の機能を
gosh> *** ERROR: unbound variable: 提供しています。*Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 出力::
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 参照。SLIB
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: には
Stack Trace:
_______________________________________
gosh> printf
gosh> の実装があります。
gosh> wait
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-wait
gosh> 。*Note
gosh> *** ERROR: unbound variable: Unixのプロセス管理::参照。
Stack Trace:
_______________________________________
gosh> waitpid
gosh> Gauche
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> sys-waitpid
gosh> 。*Note
gosh> *** ERROR: unbound variable: Unixのプロセス管理::参照。
Stack Trace:
_______________________________________
gosh> wcstombs
gosh> `wctomb
gosh> Gauche
gosh> *** ERROR: unbound variable: はマルチバイト文字列を内部的に処理します。それゆえ、一般的には
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字列がマルチバイトであるかどうかを気にする必要はありません。
Stack Trace:
_______________________________________
gosh> string-length
gosh> は常にサポートされているエンコーディングでの文字列の
gosh> *** ERROR: unbound variable: 文字数を返します。文字エンコーディングを変換したければ、
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: *Note
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: 文字コード変換::を参照してください。
Stack Trace:
_______________________________________
gosh> write
gosh> R5RS
gosh> *** ERROR: unbound variable: の
Stack Trace:
_______________________________________
gosh> display
gosh> (*Note 出力::)
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: あるいは
Stack Trace:
_______________________________________
gosh> write-block
gosh> (*Note ユニフォームベクタのブロック入出力::参照)
gosh> *** ERROR: unbound variable: 。
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Appendix
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: C
Stack Trace:
_______________________________________
gosh> *** ERROR: unbound variable: Index
Stack Trace:
_______________________________________
gosh> #<subr ->
gosh> *** ERROR: unbound variable: 手続きと構文索引
Stack Trace:
_______________________________________
gosh> *** READ-ERROR: Read error at "(stdin)":line 29077: EOF inside a list (starting from line 29067)
Stack Trace:
_______________________________________
gosh> 
